Grammar

    0 $accept: program $end

    1 program: declarations

    2 declarations: declarations declaration
    3             | declaration

    4 declaration: function_declaration_statement
    5            | variable_declaration_statement

    6 block: '{' statements '}'

    7 statements: statements statement
    8           | statement

    9 statement: expression_statement
   10          | io_statement
   11          | return_statement
   12          | variable_declaration_statement
   13          | for_statement
   14          | if_else_statement
   15          | block
   16          | error

   17 function_declaration_statement: SIMPLE_TYPE IDENTIFIER '(' parameters_optative ')' statement
   18                               | SIMPLE_TYPE LIST_TYPE IDENTIFIER '(' parameters_optative ')' statement

   19 parameters_optative: %empty
   20                    | parameters

   21 parameters: parameters ',' parameter
   22           | parameter

   23 parameter: SIMPLE_TYPE IDENTIFIER
   24          | SIMPLE_TYPE LIST_TYPE IDENTIFIER

   25 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement

   26 if_else_statement: RW_IF '(' expression ')' statement
   27                  | RW_IF '(' expression ')' statement RW_ELSE statement

   28 expression_statement: expression ';'

   29 io_statement: input_statement
   30             | output_statement

   31 input_statement: IO_READ '(' IDENTIFIER ')' ';'

   32 output_statement: IO_WRITE '(' expression ')' ';'
   33                 | IO_WRITE '(' LIT_STRING ')' ';'

   34 return_statement: RW_RETURN expression ';'

   35 expression: IDENTIFIER '=' expression
   36           | or_expression
   37           | function_call_expression

   38 function_call_expression: IDENTIFIER '(' function_arguments_optional ')'

   39 function_arguments_optional: %empty
   40                            | function_arguments

   41 function_arguments: function_arguments ',' function_argument
   42                   | function_argument

   43 function_argument: expression

   44 expression_optative: %empty
   45                    | expression

   46 or_expression_optative: %empty
   47                       | or_expression

   48 or_expression: or_expression LOGICAL_OP_OR and_expression
   49              | and_expression

   50 and_expression: and_expression LOGICAL_OP_AND equality_expression
   51               | equality_expression

   52 equality_expression: equality_expression EQUALITY_OP relational_expression
   53                    | relational_expression

   54 relational_expression: relational_expression RELATIONAL_OP list_expression
   55                      | list_expression

   56 list_expression: list_expression BINARY_LIST_OP addition_expression
   57                | addition_expression

   58 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE multiplication_expression
   59                    | multiplication_expression

   60 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE simple_value
   61                          | simple_value

   62 simple_value: constant
   63             | IDENTIFIER
   64             | ARITMETIC_OP_ADDITIVE simple_value
   65             | '!' simple_value
   66             | UNARY_LIST_OP simple_value
   67             | '(' expression ')'

   68 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER ';'
   69                               | SIMPLE_TYPE LIST_TYPE IDENTIFIER ';'

   70 constant: C_INTEGER
   71         | C_FLOAT
   72         | C_NIL


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 65
    '(' (40) 17 18 25 26 27 31 32 33 38 67
    ')' (41) 17 18 25 26 27 31 32 33 38 67
    ',' (44) 21 41
    ';' (59) 25 28 31 32 33 34 68 69
    '=' (61) 35
    '{' (123) 6
    '}' (125) 6
    error (256) 16
    C_INTEGER <token> (258) 70
    C_FLOAT <token> (259) 71
    C_NIL <token> (260) 72
    LIT_STRING <token> (261) 33
    SIMPLE_TYPE <token> (262) 17 18 23 24 68 69
    LIST_TYPE <token> (263) 18 24 69
    IDENTIFIER <token> (264) 17 18 23 24 31 35 38 63 68 69
    RW_FOR <token> (265) 25
    RW_RETURN <token> (266) 34
    RW_IF <token> (267) 26 27
    RW_ELSE <token> (268) 27
    IO_READ <token> (269) 31
    IO_WRITE <token> (270) 32 33
    BINARY_LIST_OP <token> (271) 56
    UNARY_LIST_OP <token> (272) 66
    ARITMETIC_OP_ADDITIVE <token> (273) 58 64
    ARITMETIC_OP_MULTIPLICATIVE <token> (274) 60
    RELATIONAL_OP <token> (275) 54
    EQUALITY_OP <token> (276) 52
    LOGICAL_OP_OR <token> (277) 48
    LOGICAL_OP_AND <token> (278) 50
    THEN (279)


Nonterminals, with rules where they appear

    $accept (33)
        on left: 0
    program (34)
        on left: 1
        on right: 0
    declarations (35)
        on left: 2 3
        on right: 1 2
    declaration (36)
        on left: 4 5
        on right: 2 3
    block (37)
        on left: 6
        on right: 15
    statements (38)
        on left: 7 8
        on right: 6 7
    statement (39)
        on left: 9 10 11 12 13 14 15 16
        on right: 7 8 17 18 25 26 27
    function_declaration_statement (40)
        on left: 17 18
        on right: 4
    parameters_optative (41)
        on left: 19 20
        on right: 17 18
    parameters (42)
        on left: 21 22
        on right: 20 21
    parameter (43)
        on left: 23 24
        on right: 21 22
    for_statement (44)
        on left: 25
        on right: 13
    if_else_statement (45)
        on left: 26 27
        on right: 14
    expression_statement (46)
        on left: 28
        on right: 9
    io_statement (47)
        on left: 29 30
        on right: 10
    input_statement (48)
        on left: 31
        on right: 29
    output_statement (49)
        on left: 32 33
        on right: 30
    return_statement (50)
        on left: 34
        on right: 11
    expression (51)
        on left: 35 36 37
        on right: 26 27 28 32 34 35 43 45 67
    function_call_expression (52)
        on left: 38
        on right: 37
    function_arguments_optional (53)
        on left: 39 40
        on right: 38
    function_arguments (54)
        on left: 41 42
        on right: 40 41
    function_argument (55)
        on left: 43
        on right: 41 42
    expression_optative (56)
        on left: 44 45
        on right: 25
    or_expression_optative (57)
        on left: 46 47
        on right: 25
    or_expression (58)
        on left: 48 49
        on right: 36 47 48
    and_expression (59)
        on left: 50 51
        on right: 48 49 50
    equality_expression (60)
        on left: 52 53
        on right: 50 51 52
    relational_expression (61)
        on left: 54 55
        on right: 52 53 54
    list_expression (62)
        on left: 56 57
        on right: 54 55 56
    addition_expression (63)
        on left: 58 59
        on right: 56 57 58
    multiplication_expression (64)
        on left: 60 61
        on right: 58 59 60
    simple_value (65)
        on left: 62 63 64 65 66 67
        on right: 60 61 64 65 66
    variable_declaration_statement (66)
        on left: 68 69
        on right: 5 12
    constant (67)
        on left: 70 71 72
        on right: 62


State 0

    0 $accept: • program $end

    SIMPLE_TYPE  shift, and go to state 1

    program                         go to state 2
    declarations                    go to state 3
    declaration                     go to state 4
    function_declaration_statement  go to state 5
    variable_declaration_statement  go to state 6


State 1

   17 function_declaration_statement: SIMPLE_TYPE • IDENTIFIER '(' parameters_optative ')' statement
   18                               | SIMPLE_TYPE • LIST_TYPE IDENTIFIER '(' parameters_optative ')' statement
   68 variable_declaration_statement: SIMPLE_TYPE • IDENTIFIER ';'
   69                               | SIMPLE_TYPE • LIST_TYPE IDENTIFIER ';'

    LIST_TYPE   shift, and go to state 7
    IDENTIFIER  shift, and go to state 8


State 2

    0 $accept: program • $end

    $end  shift, and go to state 9


State 3

    1 program: declarations •
    2 declarations: declarations • declaration

    SIMPLE_TYPE  shift, and go to state 1

    $end  reduce using rule 1 (program)

    declaration                     go to state 10
    function_declaration_statement  go to state 5
    variable_declaration_statement  go to state 6


State 4

    3 declarations: declaration •

    $end         reduce using rule 3 (declarations)
    SIMPLE_TYPE  reduce using rule 3 (declarations)


State 5

    4 declaration: function_declaration_statement •

    $end         reduce using rule 4 (declaration)
    SIMPLE_TYPE  reduce using rule 4 (declaration)


State 6

    5 declaration: variable_declaration_statement •

    $end         reduce using rule 5 (declaration)
    SIMPLE_TYPE  reduce using rule 5 (declaration)


State 7

   18 function_declaration_statement: SIMPLE_TYPE LIST_TYPE • IDENTIFIER '(' parameters_optative ')' statement
   69 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE • IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 11


State 8

   17 function_declaration_statement: SIMPLE_TYPE IDENTIFIER • '(' parameters_optative ')' statement
   68 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER • ';'

    '('  shift, and go to state 12
    ';'  shift, and go to state 13


State 9

    0 $accept: program $end •

    $default  accept


State 10

    2 declarations: declarations declaration •

    $end         reduce using rule 2 (declarations)
    SIMPLE_TYPE  reduce using rule 2 (declarations)


State 11

   18 function_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER • '(' parameters_optative ')' statement
   69 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER • ';'

    '('  shift, and go to state 14
    ';'  shift, and go to state 15


State 12

   17 function_declaration_statement: SIMPLE_TYPE IDENTIFIER '(' • parameters_optative ')' statement

    SIMPLE_TYPE  shift, and go to state 16

    ')'  reduce using rule 19 (parameters_optative)

    parameters_optative  go to state 17
    parameters           go to state 18
    parameter            go to state 19


State 13

   68 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER ';' •

    $end         reduce using rule 68 (variable_declaration_statement)
    SIMPLE_TYPE  reduce using rule 68 (variable_declaration_statement)


State 14

   18 function_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER '(' • parameters_optative ')' statement

    SIMPLE_TYPE  shift, and go to state 16

    ')'  reduce using rule 19 (parameters_optative)

    parameters_optative  go to state 20
    parameters           go to state 18
    parameter            go to state 19


State 15

   69 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER ';' •

    $end         reduce using rule 69 (variable_declaration_statement)
    SIMPLE_TYPE  reduce using rule 69 (variable_declaration_statement)


State 16

   23 parameter: SIMPLE_TYPE • IDENTIFIER
   24          | SIMPLE_TYPE • LIST_TYPE IDENTIFIER

    LIST_TYPE   shift, and go to state 21
    IDENTIFIER  shift, and go to state 22


State 17

   17 function_declaration_statement: SIMPLE_TYPE IDENTIFIER '(' parameters_optative • ')' statement

    ')'  shift, and go to state 23


State 18

   20 parameters_optative: parameters •
   21 parameters: parameters • ',' parameter

    ','  shift, and go to state 24

    ')'  reduce using rule 20 (parameters_optative)


State 19

   22 parameters: parameter •

    ')'  reduce using rule 22 (parameters)
    ','  reduce using rule 22 (parameters)


State 20

   18 function_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER '(' parameters_optative • ')' statement

    ')'  shift, and go to state 25


State 21

   24 parameter: SIMPLE_TYPE LIST_TYPE • IDENTIFIER

    IDENTIFIER  shift, and go to state 26


State 22

   23 parameter: SIMPLE_TYPE IDENTIFIER •

    ')'  reduce using rule 23 (parameter)
    ','  reduce using rule 23 (parameter)


State 23

   17 function_declaration_statement: SIMPLE_TYPE IDENTIFIER '(' parameters_optative ')' • statement

    error                  shift, and go to state 27
    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    SIMPLE_TYPE            shift, and go to state 31
    IDENTIFIER             shift, and go to state 32
    RW_FOR                 shift, and go to state 33
    RW_RETURN              shift, and go to state 34
    RW_IF                  shift, and go to state 35
    IO_READ                shift, and go to state 36
    IO_WRITE               shift, and go to state 37
    UNARY_LIST_OP          shift, and go to state 38
    '{'                    shift, and go to state 39
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    block                           go to state 43
    statement                       go to state 44
    for_statement                   go to state 45
    if_else_statement               go to state 46
    expression_statement            go to state 47
    io_statement                    go to state 48
    input_statement                 go to state 49
    output_statement                go to state 50
    return_statement                go to state 51
    expression                      go to state 52
    function_call_expression        go to state 53
    or_expression                   go to state 54
    and_expression                  go to state 55
    equality_expression             go to state 56
    relational_expression           go to state 57
    list_expression                 go to state 58
    addition_expression             go to state 59
    multiplication_expression       go to state 60
    simple_value                    go to state 61
    variable_declaration_statement  go to state 62
    constant                        go to state 63


State 24

   21 parameters: parameters ',' • parameter

    SIMPLE_TYPE  shift, and go to state 16

    parameter  go to state 64


State 25

   18 function_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER '(' parameters_optative ')' • statement

    error                  shift, and go to state 27
    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    SIMPLE_TYPE            shift, and go to state 31
    IDENTIFIER             shift, and go to state 32
    RW_FOR                 shift, and go to state 33
    RW_RETURN              shift, and go to state 34
    RW_IF                  shift, and go to state 35
    IO_READ                shift, and go to state 36
    IO_WRITE               shift, and go to state 37
    UNARY_LIST_OP          shift, and go to state 38
    '{'                    shift, and go to state 39
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    block                           go to state 43
    statement                       go to state 65
    for_statement                   go to state 45
    if_else_statement               go to state 46
    expression_statement            go to state 47
    io_statement                    go to state 48
    input_statement                 go to state 49
    output_statement                go to state 50
    return_statement                go to state 51
    expression                      go to state 52
    function_call_expression        go to state 53
    or_expression                   go to state 54
    and_expression                  go to state 55
    equality_expression             go to state 56
    relational_expression           go to state 57
    list_expression                 go to state 58
    addition_expression             go to state 59
    multiplication_expression       go to state 60
    simple_value                    go to state 61
    variable_declaration_statement  go to state 62
    constant                        go to state 63


State 26

   24 parameter: SIMPLE_TYPE LIST_TYPE IDENTIFIER •

    ')'  reduce using rule 24 (parameter)
    ','  reduce using rule 24 (parameter)


State 27

   16 statement: error •

    $end         reduce using rule 16 (statement)
    SIMPLE_TYPE  reduce using rule 16 (statement)


State 28

   70 constant: C_INTEGER •

    BINARY_LIST_OP               reduce using rule 70 (constant)
    ';'                          reduce using rule 70 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 70 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 70 (constant)
    RELATIONAL_OP                reduce using rule 70 (constant)
    EQUALITY_OP                  reduce using rule 70 (constant)
    LOGICAL_OP_OR                reduce using rule 70 (constant)
    LOGICAL_OP_AND               reduce using rule 70 (constant)


State 29

   71 constant: C_FLOAT •

    BINARY_LIST_OP               reduce using rule 71 (constant)
    ';'                          reduce using rule 71 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 71 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 71 (constant)
    RELATIONAL_OP                reduce using rule 71 (constant)
    EQUALITY_OP                  reduce using rule 71 (constant)
    LOGICAL_OP_OR                reduce using rule 71 (constant)
    LOGICAL_OP_AND               reduce using rule 71 (constant)


State 30

   72 constant: C_NIL •

    BINARY_LIST_OP               reduce using rule 72 (constant)
    ';'                          reduce using rule 72 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 72 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 72 (constant)
    RELATIONAL_OP                reduce using rule 72 (constant)
    EQUALITY_OP                  reduce using rule 72 (constant)
    LOGICAL_OP_OR                reduce using rule 72 (constant)
    LOGICAL_OP_AND               reduce using rule 72 (constant)


State 31

   68 variable_declaration_statement: SIMPLE_TYPE • IDENTIFIER ';'
   69                               | SIMPLE_TYPE • LIST_TYPE IDENTIFIER ';'

    LIST_TYPE   shift, and go to state 66
    IDENTIFIER  shift, and go to state 67


State 32

   35 expression: IDENTIFIER • '=' expression
   38 function_call_expression: IDENTIFIER • '(' function_arguments_optional ')'
   63 simple_value: IDENTIFIER •

    '('  shift, and go to state 68
    '='  shift, and go to state 69

    BINARY_LIST_OP               reduce using rule 63 (simple_value)
    ';'                          reduce using rule 63 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 63 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 63 (simple_value)
    RELATIONAL_OP                reduce using rule 63 (simple_value)
    EQUALITY_OP                  reduce using rule 63 (simple_value)
    LOGICAL_OP_OR                reduce using rule 63 (simple_value)
    LOGICAL_OP_AND               reduce using rule 63 (simple_value)


State 33

   25 for_statement: RW_FOR • '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    '('  shift, and go to state 70


State 34

   34 return_statement: RW_RETURN • expression ';'

    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    IDENTIFIER             shift, and go to state 32
    UNARY_LIST_OP          shift, and go to state 38
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    expression                 go to state 71
    function_call_expression   go to state 53
    or_expression              go to state 54
    and_expression             go to state 55
    equality_expression        go to state 56
    relational_expression      go to state 57
    list_expression            go to state 58
    addition_expression        go to state 59
    multiplication_expression  go to state 60
    simple_value               go to state 61
    constant                   go to state 63


State 35

   26 if_else_statement: RW_IF • '(' expression ')' statement
   27                  | RW_IF • '(' expression ')' statement RW_ELSE statement

    '('  shift, and go to state 72


State 36

   31 input_statement: IO_READ • '(' IDENTIFIER ')' ';'

    '('  shift, and go to state 73


State 37

   32 output_statement: IO_WRITE • '(' expression ')' ';'
   33                 | IO_WRITE • '(' LIT_STRING ')' ';'

    '('  shift, and go to state 74


State 38

   66 simple_value: UNARY_LIST_OP • simple_value

    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    IDENTIFIER             shift, and go to state 75
    UNARY_LIST_OP          shift, and go to state 38
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    simple_value  go to state 76
    constant      go to state 63


State 39

    6 block: '{' • statements '}'

    error                  shift, and go to state 133
    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    SIMPLE_TYPE            shift, and go to state 134
    IDENTIFIER             shift, and go to state 32
    RW_FOR                 shift, and go to state 135
    RW_RETURN              shift, and go to state 136
    RW_IF                  shift, and go to state 137
    IO_READ                shift, and go to state 138
    IO_WRITE               shift, and go to state 139
    UNARY_LIST_OP          shift, and go to state 38
    '{'                    shift, and go to state 140
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    block                           go to state 141
    statements                      go to state 77
    statement                       go to state 78
    for_statement                   go to state 142
    if_else_statement               go to state 143
    expression_statement            go to state 144
    io_statement                    go to state 145
    input_statement                 go to state 146
    output_statement                go to state 147
    return_statement                go to state 148
    expression                      go to state 149
    function_call_expression        go to state 53
    or_expression                   go to state 54
    and_expression                  go to state 55
    equality_expression             go to state 56
    relational_expression           go to state 57
    list_expression                 go to state 58
    addition_expression             go to state 59
    multiplication_expression       go to state 60
    simple_value                    go to state 61
    variable_declaration_statement  go to state 150
    constant                        go to state 63


State 40

   67 simple_value: '(' • expression ')'

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    IDENTIFIER             shift, and go to state 154
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    expression                 go to state 79
    function_call_expression   go to state 159
    or_expression              go to state 160
    and_expression             go to state 161
    equality_expression        go to state 162
    relational_expression      go to state 163
    list_expression            go to state 164
    addition_expression        go to state 165
    multiplication_expression  go to state 166
    simple_value               go to state 167
    constant                   go to state 168


State 41

   65 simple_value: '!' • simple_value

    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    IDENTIFIER             shift, and go to state 75
    UNARY_LIST_OP          shift, and go to state 38
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    simple_value  go to state 80
    constant      go to state 63


State 42

   64 simple_value: ARITMETIC_OP_ADDITIVE • simple_value

    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    IDENTIFIER             shift, and go to state 75
    UNARY_LIST_OP          shift, and go to state 38
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    simple_value  go to state 81
    constant      go to state 63


State 43

   15 statement: block •

    $end         reduce using rule 15 (statement)
    SIMPLE_TYPE  reduce using rule 15 (statement)


State 44

   17 function_declaration_statement: SIMPLE_TYPE IDENTIFIER '(' parameters_optative ')' statement •

    $end         reduce using rule 17 (function_declaration_statement)
    SIMPLE_TYPE  reduce using rule 17 (function_declaration_statement)


State 45

   13 statement: for_statement •

    $end         reduce using rule 13 (statement)
    SIMPLE_TYPE  reduce using rule 13 (statement)


State 46

   14 statement: if_else_statement •

    $end         reduce using rule 14 (statement)
    SIMPLE_TYPE  reduce using rule 14 (statement)


State 47

    9 statement: expression_statement •

    $end         reduce using rule 9 (statement)
    SIMPLE_TYPE  reduce using rule 9 (statement)


State 48

   10 statement: io_statement •

    $end         reduce using rule 10 (statement)
    SIMPLE_TYPE  reduce using rule 10 (statement)


State 49

   29 io_statement: input_statement •

    $end         reduce using rule 29 (io_statement)
    SIMPLE_TYPE  reduce using rule 29 (io_statement)


State 50

   30 io_statement: output_statement •

    $end         reduce using rule 30 (io_statement)
    SIMPLE_TYPE  reduce using rule 30 (io_statement)


State 51

   11 statement: return_statement •

    $end         reduce using rule 11 (statement)
    SIMPLE_TYPE  reduce using rule 11 (statement)


State 52

   28 expression_statement: expression • ';'

    ';'  shift, and go to state 82


State 53

   37 expression: function_call_expression •

    ';'  reduce using rule 37 (expression)


State 54

   36 expression: or_expression •
   48 or_expression: or_expression • LOGICAL_OP_OR and_expression

    LOGICAL_OP_OR  shift, and go to state 83

    ';'  reduce using rule 36 (expression)


State 55

   49 or_expression: and_expression •
   50 and_expression: and_expression • LOGICAL_OP_AND equality_expression

    LOGICAL_OP_AND  shift, and go to state 84

    ';'            reduce using rule 49 (or_expression)
    LOGICAL_OP_OR  reduce using rule 49 (or_expression)


State 56

   51 and_expression: equality_expression •
   52 equality_expression: equality_expression • EQUALITY_OP relational_expression

    EQUALITY_OP  shift, and go to state 85

    ';'             reduce using rule 51 (and_expression)
    LOGICAL_OP_OR   reduce using rule 51 (and_expression)
    LOGICAL_OP_AND  reduce using rule 51 (and_expression)


State 57

   53 equality_expression: relational_expression •
   54 relational_expression: relational_expression • RELATIONAL_OP list_expression

    RELATIONAL_OP  shift, and go to state 86

    ';'             reduce using rule 53 (equality_expression)
    EQUALITY_OP     reduce using rule 53 (equality_expression)
    LOGICAL_OP_OR   reduce using rule 53 (equality_expression)
    LOGICAL_OP_AND  reduce using rule 53 (equality_expression)


State 58

   55 relational_expression: list_expression •
   56 list_expression: list_expression • BINARY_LIST_OP addition_expression

    BINARY_LIST_OP  shift, and go to state 87

    ';'             reduce using rule 55 (relational_expression)
    RELATIONAL_OP   reduce using rule 55 (relational_expression)
    EQUALITY_OP     reduce using rule 55 (relational_expression)
    LOGICAL_OP_OR   reduce using rule 55 (relational_expression)
    LOGICAL_OP_AND  reduce using rule 55 (relational_expression)


State 59

   57 list_expression: addition_expression •
   58 addition_expression: addition_expression • ARITMETIC_OP_ADDITIVE multiplication_expression

    ARITMETIC_OP_ADDITIVE  shift, and go to state 88

    BINARY_LIST_OP  reduce using rule 57 (list_expression)
    ';'             reduce using rule 57 (list_expression)
    RELATIONAL_OP   reduce using rule 57 (list_expression)
    EQUALITY_OP     reduce using rule 57 (list_expression)
    LOGICAL_OP_OR   reduce using rule 57 (list_expression)
    LOGICAL_OP_AND  reduce using rule 57 (list_expression)


State 60

   59 addition_expression: multiplication_expression •
   60 multiplication_expression: multiplication_expression • ARITMETIC_OP_MULTIPLICATIVE simple_value

    ARITMETIC_OP_MULTIPLICATIVE  shift, and go to state 89

    BINARY_LIST_OP         reduce using rule 59 (addition_expression)
    ';'                    reduce using rule 59 (addition_expression)
    ARITMETIC_OP_ADDITIVE  reduce using rule 59 (addition_expression)
    RELATIONAL_OP          reduce using rule 59 (addition_expression)
    EQUALITY_OP            reduce using rule 59 (addition_expression)
    LOGICAL_OP_OR          reduce using rule 59 (addition_expression)
    LOGICAL_OP_AND         reduce using rule 59 (addition_expression)


State 61

   61 multiplication_expression: simple_value •

    BINARY_LIST_OP               reduce using rule 61 (multiplication_expression)
    ';'                          reduce using rule 61 (multiplication_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 61 (multiplication_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 61 (multiplication_expression)
    RELATIONAL_OP                reduce using rule 61 (multiplication_expression)
    EQUALITY_OP                  reduce using rule 61 (multiplication_expression)
    LOGICAL_OP_OR                reduce using rule 61 (multiplication_expression)
    LOGICAL_OP_AND               reduce using rule 61 (multiplication_expression)


State 62

   12 statement: variable_declaration_statement •

    $end         reduce using rule 12 (statement)
    SIMPLE_TYPE  reduce using rule 12 (statement)


State 63

   62 simple_value: constant •

    BINARY_LIST_OP               reduce using rule 62 (simple_value)
    ';'                          reduce using rule 62 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 62 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 62 (simple_value)
    RELATIONAL_OP                reduce using rule 62 (simple_value)
    EQUALITY_OP                  reduce using rule 62 (simple_value)
    LOGICAL_OP_OR                reduce using rule 62 (simple_value)
    LOGICAL_OP_AND               reduce using rule 62 (simple_value)


State 64

   21 parameters: parameters ',' parameter •

    ')'  reduce using rule 21 (parameters)
    ','  reduce using rule 21 (parameters)


State 65

   18 function_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER '(' parameters_optative ')' statement •

    $end         reduce using rule 18 (function_declaration_statement)
    SIMPLE_TYPE  reduce using rule 18 (function_declaration_statement)


State 66

   69 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE • IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 90


State 67

   68 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 13


State 68

   38 function_call_expression: IDENTIFIER '(' • function_arguments_optional ')'

    C_INTEGER              shift, and go to state 169
    C_FLOAT                shift, and go to state 170
    C_NIL                  shift, and go to state 171
    IDENTIFIER             shift, and go to state 172
    UNARY_LIST_OP          shift, and go to state 173
    '('                    shift, and go to state 174
    '!'                    shift, and go to state 175
    ARITMETIC_OP_ADDITIVE  shift, and go to state 176

    ')'  reduce using rule 39 (function_arguments_optional)

    expression                   go to state 91
    function_call_expression     go to state 177
    function_arguments_optional  go to state 92
    function_arguments           go to state 93
    function_argument            go to state 94
    or_expression                go to state 178
    and_expression               go to state 179
    equality_expression          go to state 180
    relational_expression        go to state 181
    list_expression              go to state 182
    addition_expression          go to state 183
    multiplication_expression    go to state 184
    simple_value                 go to state 185
    constant                     go to state 186


State 69

   35 expression: IDENTIFIER '=' • expression

    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    IDENTIFIER             shift, and go to state 32
    UNARY_LIST_OP          shift, and go to state 38
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    expression                 go to state 95
    function_call_expression   go to state 53
    or_expression              go to state 54
    and_expression             go to state 55
    equality_expression        go to state 56
    relational_expression      go to state 57
    list_expression            go to state 58
    addition_expression        go to state 59
    multiplication_expression  go to state 60
    simple_value               go to state 61
    constant                   go to state 63


State 70

   25 for_statement: RW_FOR '(' • expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    IDENTIFIER             shift, and go to state 32
    UNARY_LIST_OP          shift, and go to state 38
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    ';'  reduce using rule 44 (expression_optative)

    expression                 go to state 96
    function_call_expression   go to state 53
    expression_optative        go to state 97
    or_expression              go to state 54
    and_expression             go to state 55
    equality_expression        go to state 56
    relational_expression      go to state 57
    list_expression            go to state 58
    addition_expression        go to state 59
    multiplication_expression  go to state 60
    simple_value               go to state 61
    constant                   go to state 63


State 71

   34 return_statement: RW_RETURN expression • ';'

    ';'  shift, and go to state 98


State 72

   26 if_else_statement: RW_IF '(' • expression ')' statement
   27                  | RW_IF '(' • expression ')' statement RW_ELSE statement

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    IDENTIFIER             shift, and go to state 154
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    expression                 go to state 99
    function_call_expression   go to state 159
    or_expression              go to state 160
    and_expression             go to state 161
    equality_expression        go to state 162
    relational_expression      go to state 163
    list_expression            go to state 164
    addition_expression        go to state 165
    multiplication_expression  go to state 166
    simple_value               go to state 167
    constant                   go to state 168


State 73

   31 input_statement: IO_READ '(' • IDENTIFIER ')' ';'

    IDENTIFIER  shift, and go to state 100


State 74

   32 output_statement: IO_WRITE '(' • expression ')' ';'
   33                 | IO_WRITE '(' • LIT_STRING ')' ';'

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    LIT_STRING             shift, and go to state 101
    IDENTIFIER             shift, and go to state 154
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    expression                 go to state 102
    function_call_expression   go to state 159
    or_expression              go to state 160
    and_expression             go to state 161
    equality_expression        go to state 162
    relational_expression      go to state 163
    list_expression            go to state 164
    addition_expression        go to state 165
    multiplication_expression  go to state 166
    simple_value               go to state 167
    constant                   go to state 168


State 75

   63 simple_value: IDENTIFIER •

    BINARY_LIST_OP               reduce using rule 63 (simple_value)
    ';'                          reduce using rule 63 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 63 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 63 (simple_value)
    RELATIONAL_OP                reduce using rule 63 (simple_value)
    EQUALITY_OP                  reduce using rule 63 (simple_value)
    LOGICAL_OP_OR                reduce using rule 63 (simple_value)
    LOGICAL_OP_AND               reduce using rule 63 (simple_value)


State 76

   66 simple_value: UNARY_LIST_OP simple_value •

    BINARY_LIST_OP               reduce using rule 66 (simple_value)
    ';'                          reduce using rule 66 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 66 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 66 (simple_value)
    RELATIONAL_OP                reduce using rule 66 (simple_value)
    EQUALITY_OP                  reduce using rule 66 (simple_value)
    LOGICAL_OP_OR                reduce using rule 66 (simple_value)
    LOGICAL_OP_AND               reduce using rule 66 (simple_value)


State 77

    6 block: '{' statements • '}'
    7 statements: statements • statement

    error                  shift, and go to state 133
    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    SIMPLE_TYPE            shift, and go to state 134
    IDENTIFIER             shift, and go to state 32
    RW_FOR                 shift, and go to state 135
    RW_RETURN              shift, and go to state 136
    RW_IF                  shift, and go to state 137
    IO_READ                shift, and go to state 138
    IO_WRITE               shift, and go to state 139
    UNARY_LIST_OP          shift, and go to state 38
    '{'                    shift, and go to state 140
    '}'                    shift, and go to state 103
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    block                           go to state 141
    statement                       go to state 104
    for_statement                   go to state 142
    if_else_statement               go to state 143
    expression_statement            go to state 144
    io_statement                    go to state 145
    input_statement                 go to state 146
    output_statement                go to state 147
    return_statement                go to state 148
    expression                      go to state 149
    function_call_expression        go to state 53
    or_expression                   go to state 54
    and_expression                  go to state 55
    equality_expression             go to state 56
    relational_expression           go to state 57
    list_expression                 go to state 58
    addition_expression             go to state 59
    multiplication_expression       go to state 60
    simple_value                    go to state 61
    variable_declaration_statement  go to state 150
    constant                        go to state 63


State 78

    8 statements: statement •

    error                  reduce using rule 8 (statements)
    C_INTEGER              reduce using rule 8 (statements)
    C_FLOAT                reduce using rule 8 (statements)
    C_NIL                  reduce using rule 8 (statements)
    SIMPLE_TYPE            reduce using rule 8 (statements)
    IDENTIFIER             reduce using rule 8 (statements)
    RW_FOR                 reduce using rule 8 (statements)
    RW_RETURN              reduce using rule 8 (statements)
    RW_IF                  reduce using rule 8 (statements)
    IO_READ                reduce using rule 8 (statements)
    IO_WRITE               reduce using rule 8 (statements)
    UNARY_LIST_OP          reduce using rule 8 (statements)
    '{'                    reduce using rule 8 (statements)
    '}'                    reduce using rule 8 (statements)
    '('                    reduce using rule 8 (statements)
    '!'                    reduce using rule 8 (statements)
    ARITMETIC_OP_ADDITIVE  reduce using rule 8 (statements)


State 79

   67 simple_value: '(' expression • ')'

    ')'  shift, and go to state 105


State 80

   65 simple_value: '!' simple_value •

    BINARY_LIST_OP               reduce using rule 65 (simple_value)
    ';'                          reduce using rule 65 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 65 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 65 (simple_value)
    RELATIONAL_OP                reduce using rule 65 (simple_value)
    EQUALITY_OP                  reduce using rule 65 (simple_value)
    LOGICAL_OP_OR                reduce using rule 65 (simple_value)
    LOGICAL_OP_AND               reduce using rule 65 (simple_value)


State 81

   64 simple_value: ARITMETIC_OP_ADDITIVE simple_value •

    BINARY_LIST_OP               reduce using rule 64 (simple_value)
    ';'                          reduce using rule 64 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 64 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 64 (simple_value)
    RELATIONAL_OP                reduce using rule 64 (simple_value)
    EQUALITY_OP                  reduce using rule 64 (simple_value)
    LOGICAL_OP_OR                reduce using rule 64 (simple_value)
    LOGICAL_OP_AND               reduce using rule 64 (simple_value)


State 82

   28 expression_statement: expression ';' •

    $end         reduce using rule 28 (expression_statement)
    SIMPLE_TYPE  reduce using rule 28 (expression_statement)


State 83

   48 or_expression: or_expression LOGICAL_OP_OR • and_expression

    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    IDENTIFIER             shift, and go to state 75
    UNARY_LIST_OP          shift, and go to state 38
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    and_expression             go to state 106
    equality_expression        go to state 56
    relational_expression      go to state 57
    list_expression            go to state 58
    addition_expression        go to state 59
    multiplication_expression  go to state 60
    simple_value               go to state 61
    constant                   go to state 63


State 84

   50 and_expression: and_expression LOGICAL_OP_AND • equality_expression

    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    IDENTIFIER             shift, and go to state 75
    UNARY_LIST_OP          shift, and go to state 38
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    equality_expression        go to state 107
    relational_expression      go to state 57
    list_expression            go to state 58
    addition_expression        go to state 59
    multiplication_expression  go to state 60
    simple_value               go to state 61
    constant                   go to state 63


State 85

   52 equality_expression: equality_expression EQUALITY_OP • relational_expression

    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    IDENTIFIER             shift, and go to state 75
    UNARY_LIST_OP          shift, and go to state 38
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    relational_expression      go to state 108
    list_expression            go to state 58
    addition_expression        go to state 59
    multiplication_expression  go to state 60
    simple_value               go to state 61
    constant                   go to state 63


State 86

   54 relational_expression: relational_expression RELATIONAL_OP • list_expression

    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    IDENTIFIER             shift, and go to state 75
    UNARY_LIST_OP          shift, and go to state 38
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    list_expression            go to state 109
    addition_expression        go to state 59
    multiplication_expression  go to state 60
    simple_value               go to state 61
    constant                   go to state 63


State 87

   56 list_expression: list_expression BINARY_LIST_OP • addition_expression

    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    IDENTIFIER             shift, and go to state 75
    UNARY_LIST_OP          shift, and go to state 38
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    addition_expression        go to state 110
    multiplication_expression  go to state 60
    simple_value               go to state 61
    constant                   go to state 63


State 88

   58 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE • multiplication_expression

    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    IDENTIFIER             shift, and go to state 75
    UNARY_LIST_OP          shift, and go to state 38
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    multiplication_expression  go to state 111
    simple_value               go to state 61
    constant                   go to state 63


State 89

   60 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE • simple_value

    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    IDENTIFIER             shift, and go to state 75
    UNARY_LIST_OP          shift, and go to state 38
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    simple_value  go to state 112
    constant      go to state 63


State 90

   69 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 15


State 91

   43 function_argument: expression •

    ')'  reduce using rule 43 (function_argument)
    ','  reduce using rule 43 (function_argument)


State 92

   38 function_call_expression: IDENTIFIER '(' function_arguments_optional • ')'

    ')'  shift, and go to state 113


State 93

   40 function_arguments_optional: function_arguments •
   41 function_arguments: function_arguments • ',' function_argument

    ','  shift, and go to state 114

    ')'  reduce using rule 40 (function_arguments_optional)


State 94

   42 function_arguments: function_argument •

    ')'  reduce using rule 42 (function_arguments)
    ','  reduce using rule 42 (function_arguments)


State 95

   35 expression: IDENTIFIER '=' expression •

    ';'  reduce using rule 35 (expression)


State 96

   45 expression_optative: expression •

    ';'  reduce using rule 45 (expression_optative)


State 97

   25 for_statement: RW_FOR '(' expression_optative • ';' or_expression_optative ';' expression_optative ')' statement

    ';'  shift, and go to state 115


State 98

   34 return_statement: RW_RETURN expression ';' •

    $end         reduce using rule 34 (return_statement)
    SIMPLE_TYPE  reduce using rule 34 (return_statement)


State 99

   26 if_else_statement: RW_IF '(' expression • ')' statement
   27                  | RW_IF '(' expression • ')' statement RW_ELSE statement

    ')'  shift, and go to state 116


State 100

   31 input_statement: IO_READ '(' IDENTIFIER • ')' ';'

    ')'  shift, and go to state 117


State 101

   33 output_statement: IO_WRITE '(' LIT_STRING • ')' ';'

    ')'  shift, and go to state 118


State 102

   32 output_statement: IO_WRITE '(' expression • ')' ';'

    ')'  shift, and go to state 119


State 103

    6 block: '{' statements '}' •

    $end         reduce using rule 6 (block)
    SIMPLE_TYPE  reduce using rule 6 (block)


State 104

    7 statements: statements statement •

    error                  reduce using rule 7 (statements)
    C_INTEGER              reduce using rule 7 (statements)
    C_FLOAT                reduce using rule 7 (statements)
    C_NIL                  reduce using rule 7 (statements)
    SIMPLE_TYPE            reduce using rule 7 (statements)
    IDENTIFIER             reduce using rule 7 (statements)
    RW_FOR                 reduce using rule 7 (statements)
    RW_RETURN              reduce using rule 7 (statements)
    RW_IF                  reduce using rule 7 (statements)
    IO_READ                reduce using rule 7 (statements)
    IO_WRITE               reduce using rule 7 (statements)
    UNARY_LIST_OP          reduce using rule 7 (statements)
    '{'                    reduce using rule 7 (statements)
    '}'                    reduce using rule 7 (statements)
    '('                    reduce using rule 7 (statements)
    '!'                    reduce using rule 7 (statements)
    ARITMETIC_OP_ADDITIVE  reduce using rule 7 (statements)


State 105

   67 simple_value: '(' expression ')' •

    BINARY_LIST_OP               reduce using rule 67 (simple_value)
    ';'                          reduce using rule 67 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 67 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 67 (simple_value)
    RELATIONAL_OP                reduce using rule 67 (simple_value)
    EQUALITY_OP                  reduce using rule 67 (simple_value)
    LOGICAL_OP_OR                reduce using rule 67 (simple_value)
    LOGICAL_OP_AND               reduce using rule 67 (simple_value)


State 106

   48 or_expression: or_expression LOGICAL_OP_OR and_expression •
   50 and_expression: and_expression • LOGICAL_OP_AND equality_expression

    LOGICAL_OP_AND  shift, and go to state 84

    ';'            reduce using rule 48 (or_expression)
    LOGICAL_OP_OR  reduce using rule 48 (or_expression)


State 107

   50 and_expression: and_expression LOGICAL_OP_AND equality_expression •
   52 equality_expression: equality_expression • EQUALITY_OP relational_expression

    EQUALITY_OP  shift, and go to state 85

    ';'             reduce using rule 50 (and_expression)
    LOGICAL_OP_OR   reduce using rule 50 (and_expression)
    LOGICAL_OP_AND  reduce using rule 50 (and_expression)


State 108

   52 equality_expression: equality_expression EQUALITY_OP relational_expression •
   54 relational_expression: relational_expression • RELATIONAL_OP list_expression

    RELATIONAL_OP  shift, and go to state 86

    ';'             reduce using rule 52 (equality_expression)
    EQUALITY_OP     reduce using rule 52 (equality_expression)
    LOGICAL_OP_OR   reduce using rule 52 (equality_expression)
    LOGICAL_OP_AND  reduce using rule 52 (equality_expression)


State 109

   54 relational_expression: relational_expression RELATIONAL_OP list_expression •
   56 list_expression: list_expression • BINARY_LIST_OP addition_expression

    BINARY_LIST_OP  shift, and go to state 87

    ';'             reduce using rule 54 (relational_expression)
    RELATIONAL_OP   reduce using rule 54 (relational_expression)
    EQUALITY_OP     reduce using rule 54 (relational_expression)
    LOGICAL_OP_OR   reduce using rule 54 (relational_expression)
    LOGICAL_OP_AND  reduce using rule 54 (relational_expression)


State 110

   56 list_expression: list_expression BINARY_LIST_OP addition_expression •
   58 addition_expression: addition_expression • ARITMETIC_OP_ADDITIVE multiplication_expression

    ARITMETIC_OP_ADDITIVE  shift, and go to state 88

    BINARY_LIST_OP  reduce using rule 56 (list_expression)
    ';'             reduce using rule 56 (list_expression)
    RELATIONAL_OP   reduce using rule 56 (list_expression)
    EQUALITY_OP     reduce using rule 56 (list_expression)
    LOGICAL_OP_OR   reduce using rule 56 (list_expression)
    LOGICAL_OP_AND  reduce using rule 56 (list_expression)


State 111

   58 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE multiplication_expression •
   60 multiplication_expression: multiplication_expression • ARITMETIC_OP_MULTIPLICATIVE simple_value

    ARITMETIC_OP_MULTIPLICATIVE  shift, and go to state 89

    BINARY_LIST_OP         reduce using rule 58 (addition_expression)
    ';'                    reduce using rule 58 (addition_expression)
    ARITMETIC_OP_ADDITIVE  reduce using rule 58 (addition_expression)
    RELATIONAL_OP          reduce using rule 58 (addition_expression)
    EQUALITY_OP            reduce using rule 58 (addition_expression)
    LOGICAL_OP_OR          reduce using rule 58 (addition_expression)
    LOGICAL_OP_AND         reduce using rule 58 (addition_expression)


State 112

   60 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE simple_value •

    BINARY_LIST_OP               reduce using rule 60 (multiplication_expression)
    ';'                          reduce using rule 60 (multiplication_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 60 (multiplication_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 60 (multiplication_expression)
    RELATIONAL_OP                reduce using rule 60 (multiplication_expression)
    EQUALITY_OP                  reduce using rule 60 (multiplication_expression)
    LOGICAL_OP_OR                reduce using rule 60 (multiplication_expression)
    LOGICAL_OP_AND               reduce using rule 60 (multiplication_expression)


State 113

   38 function_call_expression: IDENTIFIER '(' function_arguments_optional ')' •

    ';'  reduce using rule 38 (function_call_expression)


State 114

   41 function_arguments: function_arguments ',' • function_argument

    C_INTEGER              shift, and go to state 169
    C_FLOAT                shift, and go to state 170
    C_NIL                  shift, and go to state 171
    IDENTIFIER             shift, and go to state 172
    UNARY_LIST_OP          shift, and go to state 173
    '('                    shift, and go to state 174
    '!'                    shift, and go to state 175
    ARITMETIC_OP_ADDITIVE  shift, and go to state 176

    expression                 go to state 91
    function_call_expression   go to state 177
    function_argument          go to state 120
    or_expression              go to state 178
    and_expression             go to state 179
    equality_expression        go to state 180
    relational_expression      go to state 181
    list_expression            go to state 182
    addition_expression        go to state 183
    multiplication_expression  go to state 184
    simple_value               go to state 185
    constant                   go to state 186


State 115

   25 for_statement: RW_FOR '(' expression_optative ';' • or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    IDENTIFIER             shift, and go to state 75
    UNARY_LIST_OP          shift, and go to state 38
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    ';'  reduce using rule 46 (or_expression_optative)

    or_expression_optative     go to state 121
    or_expression              go to state 122
    and_expression             go to state 55
    equality_expression        go to state 56
    relational_expression      go to state 57
    list_expression            go to state 58
    addition_expression        go to state 59
    multiplication_expression  go to state 60
    simple_value               go to state 61
    constant                   go to state 63


State 116

   26 if_else_statement: RW_IF '(' expression ')' • statement
   27                  | RW_IF '(' expression ')' • statement RW_ELSE statement

    error                  shift, and go to state 187
    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    SIMPLE_TYPE            shift, and go to state 188
    IDENTIFIER             shift, and go to state 32
    RW_FOR                 shift, and go to state 189
    RW_RETURN              shift, and go to state 190
    RW_IF                  shift, and go to state 191
    IO_READ                shift, and go to state 192
    IO_WRITE               shift, and go to state 193
    UNARY_LIST_OP          shift, and go to state 38
    '{'                    shift, and go to state 194
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    block                           go to state 195
    statement                       go to state 123
    for_statement                   go to state 196
    if_else_statement               go to state 197
    expression_statement            go to state 198
    io_statement                    go to state 199
    input_statement                 go to state 200
    output_statement                go to state 201
    return_statement                go to state 202
    expression                      go to state 203
    function_call_expression        go to state 53
    or_expression                   go to state 54
    and_expression                  go to state 55
    equality_expression             go to state 56
    relational_expression           go to state 57
    list_expression                 go to state 58
    addition_expression             go to state 59
    multiplication_expression       go to state 60
    simple_value                    go to state 61
    variable_declaration_statement  go to state 204
    constant                        go to state 63


State 117

   31 input_statement: IO_READ '(' IDENTIFIER ')' • ';'

    ';'  shift, and go to state 124


State 118

   33 output_statement: IO_WRITE '(' LIT_STRING ')' • ';'

    ';'  shift, and go to state 125


State 119

   32 output_statement: IO_WRITE '(' expression ')' • ';'

    ';'  shift, and go to state 126


State 120

   41 function_arguments: function_arguments ',' function_argument •

    ')'  reduce using rule 41 (function_arguments)
    ','  reduce using rule 41 (function_arguments)


State 121

   25 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative • ';' expression_optative ')' statement

    ';'  shift, and go to state 127


State 122

   47 or_expression_optative: or_expression •
   48 or_expression: or_expression • LOGICAL_OP_OR and_expression

    LOGICAL_OP_OR  shift, and go to state 83

    ';'  reduce using rule 47 (or_expression_optative)


State 123

   26 if_else_statement: RW_IF '(' expression ')' statement •
   27                  | RW_IF '(' expression ')' statement • RW_ELSE statement

    RW_ELSE  shift, and go to state 128

    $end         reduce using rule 26 (if_else_statement)
    SIMPLE_TYPE  reduce using rule 26 (if_else_statement)


State 124

   31 input_statement: IO_READ '(' IDENTIFIER ')' ';' •

    $end         reduce using rule 31 (input_statement)
    SIMPLE_TYPE  reduce using rule 31 (input_statement)


State 125

   33 output_statement: IO_WRITE '(' LIT_STRING ')' ';' •

    $end         reduce using rule 33 (output_statement)
    SIMPLE_TYPE  reduce using rule 33 (output_statement)


State 126

   32 output_statement: IO_WRITE '(' expression ')' ';' •

    $end         reduce using rule 32 (output_statement)
    SIMPLE_TYPE  reduce using rule 32 (output_statement)


State 127

   25 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' • expression_optative ')' statement

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    IDENTIFIER             shift, and go to state 154
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    ')'  reduce using rule 44 (expression_optative)

    expression                 go to state 205
    function_call_expression   go to state 159
    expression_optative        go to state 129
    or_expression              go to state 160
    and_expression             go to state 161
    equality_expression        go to state 162
    relational_expression      go to state 163
    list_expression            go to state 164
    addition_expression        go to state 165
    multiplication_expression  go to state 166
    simple_value               go to state 167
    constant                   go to state 168


State 128

   27 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE • statement

    error                  shift, and go to state 27
    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    SIMPLE_TYPE            shift, and go to state 31
    IDENTIFIER             shift, and go to state 32
    RW_FOR                 shift, and go to state 33
    RW_RETURN              shift, and go to state 34
    RW_IF                  shift, and go to state 35
    IO_READ                shift, and go to state 36
    IO_WRITE               shift, and go to state 37
    UNARY_LIST_OP          shift, and go to state 38
    '{'                    shift, and go to state 39
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    block                           go to state 43
    statement                       go to state 130
    for_statement                   go to state 45
    if_else_statement               go to state 46
    expression_statement            go to state 47
    io_statement                    go to state 48
    input_statement                 go to state 49
    output_statement                go to state 50
    return_statement                go to state 51
    expression                      go to state 52
    function_call_expression        go to state 53
    or_expression                   go to state 54
    and_expression                  go to state 55
    equality_expression             go to state 56
    relational_expression           go to state 57
    list_expression                 go to state 58
    addition_expression             go to state 59
    multiplication_expression       go to state 60
    simple_value                    go to state 61
    variable_declaration_statement  go to state 62
    constant                        go to state 63


State 129

   25 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative • ')' statement

    ')'  shift, and go to state 131


State 130

   27 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE statement •

    $end         reduce using rule 27 (if_else_statement)
    SIMPLE_TYPE  reduce using rule 27 (if_else_statement)


State 131

   25 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' • statement

    error                  shift, and go to state 27
    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    SIMPLE_TYPE            shift, and go to state 31
    IDENTIFIER             shift, and go to state 32
    RW_FOR                 shift, and go to state 33
    RW_RETURN              shift, and go to state 34
    RW_IF                  shift, and go to state 35
    IO_READ                shift, and go to state 36
    IO_WRITE               shift, and go to state 37
    UNARY_LIST_OP          shift, and go to state 38
    '{'                    shift, and go to state 39
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    block                           go to state 43
    statement                       go to state 132
    for_statement                   go to state 45
    if_else_statement               go to state 46
    expression_statement            go to state 47
    io_statement                    go to state 48
    input_statement                 go to state 49
    output_statement                go to state 50
    return_statement                go to state 51
    expression                      go to state 52
    function_call_expression        go to state 53
    or_expression                   go to state 54
    and_expression                  go to state 55
    equality_expression             go to state 56
    relational_expression           go to state 57
    list_expression                 go to state 58
    addition_expression             go to state 59
    multiplication_expression       go to state 60
    simple_value                    go to state 61
    variable_declaration_statement  go to state 62
    constant                        go to state 63


State 132

   25 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement •

    $end         reduce using rule 25 (for_statement)
    SIMPLE_TYPE  reduce using rule 25 (for_statement)


State 133

   16 statement: error •

    error                  reduce using rule 16 (statement)
    C_INTEGER              reduce using rule 16 (statement)
    C_FLOAT                reduce using rule 16 (statement)
    C_NIL                  reduce using rule 16 (statement)
    SIMPLE_TYPE            reduce using rule 16 (statement)
    IDENTIFIER             reduce using rule 16 (statement)
    RW_FOR                 reduce using rule 16 (statement)
    RW_RETURN              reduce using rule 16 (statement)
    RW_IF                  reduce using rule 16 (statement)
    IO_READ                reduce using rule 16 (statement)
    IO_WRITE               reduce using rule 16 (statement)
    UNARY_LIST_OP          reduce using rule 16 (statement)
    '{'                    reduce using rule 16 (statement)
    '}'                    reduce using rule 16 (statement)
    '('                    reduce using rule 16 (statement)
    '!'                    reduce using rule 16 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 16 (statement)


State 134

   68 variable_declaration_statement: SIMPLE_TYPE • IDENTIFIER ';'
   69                               | SIMPLE_TYPE • LIST_TYPE IDENTIFIER ';'

    LIST_TYPE   shift, and go to state 206
    IDENTIFIER  shift, and go to state 207


State 135

   25 for_statement: RW_FOR • '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    '('  shift, and go to state 208


State 136

   34 return_statement: RW_RETURN • expression ';'

    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    IDENTIFIER             shift, and go to state 32
    UNARY_LIST_OP          shift, and go to state 38
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    expression                 go to state 209
    function_call_expression   go to state 53
    or_expression              go to state 54
    and_expression             go to state 55
    equality_expression        go to state 56
    relational_expression      go to state 57
    list_expression            go to state 58
    addition_expression        go to state 59
    multiplication_expression  go to state 60
    simple_value               go to state 61
    constant                   go to state 63


State 137

   26 if_else_statement: RW_IF • '(' expression ')' statement
   27                  | RW_IF • '(' expression ')' statement RW_ELSE statement

    '('  shift, and go to state 210


State 138

   31 input_statement: IO_READ • '(' IDENTIFIER ')' ';'

    '('  shift, and go to state 211


State 139

   32 output_statement: IO_WRITE • '(' expression ')' ';'
   33                 | IO_WRITE • '(' LIT_STRING ')' ';'

    '('  shift, and go to state 212


State 140

    6 block: '{' • statements '}'

    error                  shift, and go to state 133
    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    SIMPLE_TYPE            shift, and go to state 134
    IDENTIFIER             shift, and go to state 32
    RW_FOR                 shift, and go to state 135
    RW_RETURN              shift, and go to state 136
    RW_IF                  shift, and go to state 137
    IO_READ                shift, and go to state 138
    IO_WRITE               shift, and go to state 139
    UNARY_LIST_OP          shift, and go to state 38
    '{'                    shift, and go to state 140
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    block                           go to state 141
    statements                      go to state 213
    statement                       go to state 78
    for_statement                   go to state 142
    if_else_statement               go to state 143
    expression_statement            go to state 144
    io_statement                    go to state 145
    input_statement                 go to state 146
    output_statement                go to state 147
    return_statement                go to state 148
    expression                      go to state 149
    function_call_expression        go to state 53
    or_expression                   go to state 54
    and_expression                  go to state 55
    equality_expression             go to state 56
    relational_expression           go to state 57
    list_expression                 go to state 58
    addition_expression             go to state 59
    multiplication_expression       go to state 60
    simple_value                    go to state 61
    variable_declaration_statement  go to state 150
    constant                        go to state 63


State 141

   15 statement: block •

    error                  reduce using rule 15 (statement)
    C_INTEGER              reduce using rule 15 (statement)
    C_FLOAT                reduce using rule 15 (statement)
    C_NIL                  reduce using rule 15 (statement)
    SIMPLE_TYPE            reduce using rule 15 (statement)
    IDENTIFIER             reduce using rule 15 (statement)
    RW_FOR                 reduce using rule 15 (statement)
    RW_RETURN              reduce using rule 15 (statement)
    RW_IF                  reduce using rule 15 (statement)
    IO_READ                reduce using rule 15 (statement)
    IO_WRITE               reduce using rule 15 (statement)
    UNARY_LIST_OP          reduce using rule 15 (statement)
    '{'                    reduce using rule 15 (statement)
    '}'                    reduce using rule 15 (statement)
    '('                    reduce using rule 15 (statement)
    '!'                    reduce using rule 15 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 15 (statement)


State 142

   13 statement: for_statement •

    error                  reduce using rule 13 (statement)
    C_INTEGER              reduce using rule 13 (statement)
    C_FLOAT                reduce using rule 13 (statement)
    C_NIL                  reduce using rule 13 (statement)
    SIMPLE_TYPE            reduce using rule 13 (statement)
    IDENTIFIER             reduce using rule 13 (statement)
    RW_FOR                 reduce using rule 13 (statement)
    RW_RETURN              reduce using rule 13 (statement)
    RW_IF                  reduce using rule 13 (statement)
    IO_READ                reduce using rule 13 (statement)
    IO_WRITE               reduce using rule 13 (statement)
    UNARY_LIST_OP          reduce using rule 13 (statement)
    '{'                    reduce using rule 13 (statement)
    '}'                    reduce using rule 13 (statement)
    '('                    reduce using rule 13 (statement)
    '!'                    reduce using rule 13 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 13 (statement)


State 143

   14 statement: if_else_statement •

    error                  reduce using rule 14 (statement)
    C_INTEGER              reduce using rule 14 (statement)
    C_FLOAT                reduce using rule 14 (statement)
    C_NIL                  reduce using rule 14 (statement)
    SIMPLE_TYPE            reduce using rule 14 (statement)
    IDENTIFIER             reduce using rule 14 (statement)
    RW_FOR                 reduce using rule 14 (statement)
    RW_RETURN              reduce using rule 14 (statement)
    RW_IF                  reduce using rule 14 (statement)
    IO_READ                reduce using rule 14 (statement)
    IO_WRITE               reduce using rule 14 (statement)
    UNARY_LIST_OP          reduce using rule 14 (statement)
    '{'                    reduce using rule 14 (statement)
    '}'                    reduce using rule 14 (statement)
    '('                    reduce using rule 14 (statement)
    '!'                    reduce using rule 14 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 14 (statement)


State 144

    9 statement: expression_statement •

    error                  reduce using rule 9 (statement)
    C_INTEGER              reduce using rule 9 (statement)
    C_FLOAT                reduce using rule 9 (statement)
    C_NIL                  reduce using rule 9 (statement)
    SIMPLE_TYPE            reduce using rule 9 (statement)
    IDENTIFIER             reduce using rule 9 (statement)
    RW_FOR                 reduce using rule 9 (statement)
    RW_RETURN              reduce using rule 9 (statement)
    RW_IF                  reduce using rule 9 (statement)
    IO_READ                reduce using rule 9 (statement)
    IO_WRITE               reduce using rule 9 (statement)
    UNARY_LIST_OP          reduce using rule 9 (statement)
    '{'                    reduce using rule 9 (statement)
    '}'                    reduce using rule 9 (statement)
    '('                    reduce using rule 9 (statement)
    '!'                    reduce using rule 9 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 9 (statement)


State 145

   10 statement: io_statement •

    error                  reduce using rule 10 (statement)
    C_INTEGER              reduce using rule 10 (statement)
    C_FLOAT                reduce using rule 10 (statement)
    C_NIL                  reduce using rule 10 (statement)
    SIMPLE_TYPE            reduce using rule 10 (statement)
    IDENTIFIER             reduce using rule 10 (statement)
    RW_FOR                 reduce using rule 10 (statement)
    RW_RETURN              reduce using rule 10 (statement)
    RW_IF                  reduce using rule 10 (statement)
    IO_READ                reduce using rule 10 (statement)
    IO_WRITE               reduce using rule 10 (statement)
    UNARY_LIST_OP          reduce using rule 10 (statement)
    '{'                    reduce using rule 10 (statement)
    '}'                    reduce using rule 10 (statement)
    '('                    reduce using rule 10 (statement)
    '!'                    reduce using rule 10 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 10 (statement)


State 146

   29 io_statement: input_statement •

    error                  reduce using rule 29 (io_statement)
    C_INTEGER              reduce using rule 29 (io_statement)
    C_FLOAT                reduce using rule 29 (io_statement)
    C_NIL                  reduce using rule 29 (io_statement)
    SIMPLE_TYPE            reduce using rule 29 (io_statement)
    IDENTIFIER             reduce using rule 29 (io_statement)
    RW_FOR                 reduce using rule 29 (io_statement)
    RW_RETURN              reduce using rule 29 (io_statement)
    RW_IF                  reduce using rule 29 (io_statement)
    IO_READ                reduce using rule 29 (io_statement)
    IO_WRITE               reduce using rule 29 (io_statement)
    UNARY_LIST_OP          reduce using rule 29 (io_statement)
    '{'                    reduce using rule 29 (io_statement)
    '}'                    reduce using rule 29 (io_statement)
    '('                    reduce using rule 29 (io_statement)
    '!'                    reduce using rule 29 (io_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 29 (io_statement)


State 147

   30 io_statement: output_statement •

    error                  reduce using rule 30 (io_statement)
    C_INTEGER              reduce using rule 30 (io_statement)
    C_FLOAT                reduce using rule 30 (io_statement)
    C_NIL                  reduce using rule 30 (io_statement)
    SIMPLE_TYPE            reduce using rule 30 (io_statement)
    IDENTIFIER             reduce using rule 30 (io_statement)
    RW_FOR                 reduce using rule 30 (io_statement)
    RW_RETURN              reduce using rule 30 (io_statement)
    RW_IF                  reduce using rule 30 (io_statement)
    IO_READ                reduce using rule 30 (io_statement)
    IO_WRITE               reduce using rule 30 (io_statement)
    UNARY_LIST_OP          reduce using rule 30 (io_statement)
    '{'                    reduce using rule 30 (io_statement)
    '}'                    reduce using rule 30 (io_statement)
    '('                    reduce using rule 30 (io_statement)
    '!'                    reduce using rule 30 (io_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 30 (io_statement)


State 148

   11 statement: return_statement •

    error                  reduce using rule 11 (statement)
    C_INTEGER              reduce using rule 11 (statement)
    C_FLOAT                reduce using rule 11 (statement)
    C_NIL                  reduce using rule 11 (statement)
    SIMPLE_TYPE            reduce using rule 11 (statement)
    IDENTIFIER             reduce using rule 11 (statement)
    RW_FOR                 reduce using rule 11 (statement)
    RW_RETURN              reduce using rule 11 (statement)
    RW_IF                  reduce using rule 11 (statement)
    IO_READ                reduce using rule 11 (statement)
    IO_WRITE               reduce using rule 11 (statement)
    UNARY_LIST_OP          reduce using rule 11 (statement)
    '{'                    reduce using rule 11 (statement)
    '}'                    reduce using rule 11 (statement)
    '('                    reduce using rule 11 (statement)
    '!'                    reduce using rule 11 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 11 (statement)


State 149

   28 expression_statement: expression • ';'

    ';'  shift, and go to state 214


State 150

   12 statement: variable_declaration_statement •

    error                  reduce using rule 12 (statement)
    C_INTEGER              reduce using rule 12 (statement)
    C_FLOAT                reduce using rule 12 (statement)
    C_NIL                  reduce using rule 12 (statement)
    SIMPLE_TYPE            reduce using rule 12 (statement)
    IDENTIFIER             reduce using rule 12 (statement)
    RW_FOR                 reduce using rule 12 (statement)
    RW_RETURN              reduce using rule 12 (statement)
    RW_IF                  reduce using rule 12 (statement)
    IO_READ                reduce using rule 12 (statement)
    IO_WRITE               reduce using rule 12 (statement)
    UNARY_LIST_OP          reduce using rule 12 (statement)
    '{'                    reduce using rule 12 (statement)
    '}'                    reduce using rule 12 (statement)
    '('                    reduce using rule 12 (statement)
    '!'                    reduce using rule 12 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 12 (statement)


State 151

   70 constant: C_INTEGER •

    BINARY_LIST_OP               reduce using rule 70 (constant)
    ')'                          reduce using rule 70 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 70 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 70 (constant)
    RELATIONAL_OP                reduce using rule 70 (constant)
    EQUALITY_OP                  reduce using rule 70 (constant)
    LOGICAL_OP_OR                reduce using rule 70 (constant)
    LOGICAL_OP_AND               reduce using rule 70 (constant)


State 152

   71 constant: C_FLOAT •

    BINARY_LIST_OP               reduce using rule 71 (constant)
    ')'                          reduce using rule 71 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 71 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 71 (constant)
    RELATIONAL_OP                reduce using rule 71 (constant)
    EQUALITY_OP                  reduce using rule 71 (constant)
    LOGICAL_OP_OR                reduce using rule 71 (constant)
    LOGICAL_OP_AND               reduce using rule 71 (constant)


State 153

   72 constant: C_NIL •

    BINARY_LIST_OP               reduce using rule 72 (constant)
    ')'                          reduce using rule 72 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 72 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 72 (constant)
    RELATIONAL_OP                reduce using rule 72 (constant)
    EQUALITY_OP                  reduce using rule 72 (constant)
    LOGICAL_OP_OR                reduce using rule 72 (constant)
    LOGICAL_OP_AND               reduce using rule 72 (constant)


State 154

   35 expression: IDENTIFIER • '=' expression
   38 function_call_expression: IDENTIFIER • '(' function_arguments_optional ')'
   63 simple_value: IDENTIFIER •

    '('  shift, and go to state 215
    '='  shift, and go to state 216

    BINARY_LIST_OP               reduce using rule 63 (simple_value)
    ')'                          reduce using rule 63 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 63 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 63 (simple_value)
    RELATIONAL_OP                reduce using rule 63 (simple_value)
    EQUALITY_OP                  reduce using rule 63 (simple_value)
    LOGICAL_OP_OR                reduce using rule 63 (simple_value)
    LOGICAL_OP_AND               reduce using rule 63 (simple_value)


State 155

   66 simple_value: UNARY_LIST_OP • simple_value

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    IDENTIFIER             shift, and go to state 217
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    simple_value  go to state 218
    constant      go to state 168


State 156

   67 simple_value: '(' • expression ')'

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    IDENTIFIER             shift, and go to state 154
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    expression                 go to state 219
    function_call_expression   go to state 159
    or_expression              go to state 160
    and_expression             go to state 161
    equality_expression        go to state 162
    relational_expression      go to state 163
    list_expression            go to state 164
    addition_expression        go to state 165
    multiplication_expression  go to state 166
    simple_value               go to state 167
    constant                   go to state 168


State 157

   65 simple_value: '!' • simple_value

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    IDENTIFIER             shift, and go to state 217
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    simple_value  go to state 220
    constant      go to state 168


State 158

   64 simple_value: ARITMETIC_OP_ADDITIVE • simple_value

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    IDENTIFIER             shift, and go to state 217
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    simple_value  go to state 221
    constant      go to state 168


State 159

   37 expression: function_call_expression •

    ')'  reduce using rule 37 (expression)


State 160

   36 expression: or_expression •
   48 or_expression: or_expression • LOGICAL_OP_OR and_expression

    LOGICAL_OP_OR  shift, and go to state 222

    ')'  reduce using rule 36 (expression)


State 161

   49 or_expression: and_expression •
   50 and_expression: and_expression • LOGICAL_OP_AND equality_expression

    LOGICAL_OP_AND  shift, and go to state 223

    ')'            reduce using rule 49 (or_expression)
    LOGICAL_OP_OR  reduce using rule 49 (or_expression)


State 162

   51 and_expression: equality_expression •
   52 equality_expression: equality_expression • EQUALITY_OP relational_expression

    EQUALITY_OP  shift, and go to state 224

    ')'             reduce using rule 51 (and_expression)
    LOGICAL_OP_OR   reduce using rule 51 (and_expression)
    LOGICAL_OP_AND  reduce using rule 51 (and_expression)


State 163

   53 equality_expression: relational_expression •
   54 relational_expression: relational_expression • RELATIONAL_OP list_expression

    RELATIONAL_OP  shift, and go to state 225

    ')'             reduce using rule 53 (equality_expression)
    EQUALITY_OP     reduce using rule 53 (equality_expression)
    LOGICAL_OP_OR   reduce using rule 53 (equality_expression)
    LOGICAL_OP_AND  reduce using rule 53 (equality_expression)


State 164

   55 relational_expression: list_expression •
   56 list_expression: list_expression • BINARY_LIST_OP addition_expression

    BINARY_LIST_OP  shift, and go to state 226

    ')'             reduce using rule 55 (relational_expression)
    RELATIONAL_OP   reduce using rule 55 (relational_expression)
    EQUALITY_OP     reduce using rule 55 (relational_expression)
    LOGICAL_OP_OR   reduce using rule 55 (relational_expression)
    LOGICAL_OP_AND  reduce using rule 55 (relational_expression)


State 165

   57 list_expression: addition_expression •
   58 addition_expression: addition_expression • ARITMETIC_OP_ADDITIVE multiplication_expression

    ARITMETIC_OP_ADDITIVE  shift, and go to state 227

    BINARY_LIST_OP  reduce using rule 57 (list_expression)
    ')'             reduce using rule 57 (list_expression)
    RELATIONAL_OP   reduce using rule 57 (list_expression)
    EQUALITY_OP     reduce using rule 57 (list_expression)
    LOGICAL_OP_OR   reduce using rule 57 (list_expression)
    LOGICAL_OP_AND  reduce using rule 57 (list_expression)


State 166

   59 addition_expression: multiplication_expression •
   60 multiplication_expression: multiplication_expression • ARITMETIC_OP_MULTIPLICATIVE simple_value

    ARITMETIC_OP_MULTIPLICATIVE  shift, and go to state 228

    BINARY_LIST_OP         reduce using rule 59 (addition_expression)
    ')'                    reduce using rule 59 (addition_expression)
    ARITMETIC_OP_ADDITIVE  reduce using rule 59 (addition_expression)
    RELATIONAL_OP          reduce using rule 59 (addition_expression)
    EQUALITY_OP            reduce using rule 59 (addition_expression)
    LOGICAL_OP_OR          reduce using rule 59 (addition_expression)
    LOGICAL_OP_AND         reduce using rule 59 (addition_expression)


State 167

   61 multiplication_expression: simple_value •

    BINARY_LIST_OP               reduce using rule 61 (multiplication_expression)
    ')'                          reduce using rule 61 (multiplication_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 61 (multiplication_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 61 (multiplication_expression)
    RELATIONAL_OP                reduce using rule 61 (multiplication_expression)
    EQUALITY_OP                  reduce using rule 61 (multiplication_expression)
    LOGICAL_OP_OR                reduce using rule 61 (multiplication_expression)
    LOGICAL_OP_AND               reduce using rule 61 (multiplication_expression)


State 168

   62 simple_value: constant •

    BINARY_LIST_OP               reduce using rule 62 (simple_value)
    ')'                          reduce using rule 62 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 62 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 62 (simple_value)
    RELATIONAL_OP                reduce using rule 62 (simple_value)
    EQUALITY_OP                  reduce using rule 62 (simple_value)
    LOGICAL_OP_OR                reduce using rule 62 (simple_value)
    LOGICAL_OP_AND               reduce using rule 62 (simple_value)


State 169

   70 constant: C_INTEGER •

    BINARY_LIST_OP               reduce using rule 70 (constant)
    ')'                          reduce using rule 70 (constant)
    ','                          reduce using rule 70 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 70 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 70 (constant)
    RELATIONAL_OP                reduce using rule 70 (constant)
    EQUALITY_OP                  reduce using rule 70 (constant)
    LOGICAL_OP_OR                reduce using rule 70 (constant)
    LOGICAL_OP_AND               reduce using rule 70 (constant)


State 170

   71 constant: C_FLOAT •

    BINARY_LIST_OP               reduce using rule 71 (constant)
    ')'                          reduce using rule 71 (constant)
    ','                          reduce using rule 71 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 71 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 71 (constant)
    RELATIONAL_OP                reduce using rule 71 (constant)
    EQUALITY_OP                  reduce using rule 71 (constant)
    LOGICAL_OP_OR                reduce using rule 71 (constant)
    LOGICAL_OP_AND               reduce using rule 71 (constant)


State 171

   72 constant: C_NIL •

    BINARY_LIST_OP               reduce using rule 72 (constant)
    ')'                          reduce using rule 72 (constant)
    ','                          reduce using rule 72 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 72 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 72 (constant)
    RELATIONAL_OP                reduce using rule 72 (constant)
    EQUALITY_OP                  reduce using rule 72 (constant)
    LOGICAL_OP_OR                reduce using rule 72 (constant)
    LOGICAL_OP_AND               reduce using rule 72 (constant)


State 172

   35 expression: IDENTIFIER • '=' expression
   38 function_call_expression: IDENTIFIER • '(' function_arguments_optional ')'
   63 simple_value: IDENTIFIER •

    '('  shift, and go to state 229
    '='  shift, and go to state 230

    BINARY_LIST_OP               reduce using rule 63 (simple_value)
    ')'                          reduce using rule 63 (simple_value)
    ','                          reduce using rule 63 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 63 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 63 (simple_value)
    RELATIONAL_OP                reduce using rule 63 (simple_value)
    EQUALITY_OP                  reduce using rule 63 (simple_value)
    LOGICAL_OP_OR                reduce using rule 63 (simple_value)
    LOGICAL_OP_AND               reduce using rule 63 (simple_value)


State 173

   66 simple_value: UNARY_LIST_OP • simple_value

    C_INTEGER              shift, and go to state 169
    C_FLOAT                shift, and go to state 170
    C_NIL                  shift, and go to state 171
    IDENTIFIER             shift, and go to state 231
    UNARY_LIST_OP          shift, and go to state 173
    '('                    shift, and go to state 174
    '!'                    shift, and go to state 175
    ARITMETIC_OP_ADDITIVE  shift, and go to state 176

    simple_value  go to state 232
    constant      go to state 186


State 174

   67 simple_value: '(' • expression ')'

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    IDENTIFIER             shift, and go to state 154
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    expression                 go to state 233
    function_call_expression   go to state 159
    or_expression              go to state 160
    and_expression             go to state 161
    equality_expression        go to state 162
    relational_expression      go to state 163
    list_expression            go to state 164
    addition_expression        go to state 165
    multiplication_expression  go to state 166
    simple_value               go to state 167
    constant                   go to state 168


State 175

   65 simple_value: '!' • simple_value

    C_INTEGER              shift, and go to state 169
    C_FLOAT                shift, and go to state 170
    C_NIL                  shift, and go to state 171
    IDENTIFIER             shift, and go to state 231
    UNARY_LIST_OP          shift, and go to state 173
    '('                    shift, and go to state 174
    '!'                    shift, and go to state 175
    ARITMETIC_OP_ADDITIVE  shift, and go to state 176

    simple_value  go to state 234
    constant      go to state 186


State 176

   64 simple_value: ARITMETIC_OP_ADDITIVE • simple_value

    C_INTEGER              shift, and go to state 169
    C_FLOAT                shift, and go to state 170
    C_NIL                  shift, and go to state 171
    IDENTIFIER             shift, and go to state 231
    UNARY_LIST_OP          shift, and go to state 173
    '('                    shift, and go to state 174
    '!'                    shift, and go to state 175
    ARITMETIC_OP_ADDITIVE  shift, and go to state 176

    simple_value  go to state 235
    constant      go to state 186


State 177

   37 expression: function_call_expression •

    ')'  reduce using rule 37 (expression)
    ','  reduce using rule 37 (expression)


State 178

   36 expression: or_expression •
   48 or_expression: or_expression • LOGICAL_OP_OR and_expression

    LOGICAL_OP_OR  shift, and go to state 236

    ')'  reduce using rule 36 (expression)
    ','  reduce using rule 36 (expression)


State 179

   49 or_expression: and_expression •
   50 and_expression: and_expression • LOGICAL_OP_AND equality_expression

    LOGICAL_OP_AND  shift, and go to state 237

    ')'            reduce using rule 49 (or_expression)
    ','            reduce using rule 49 (or_expression)
    LOGICAL_OP_OR  reduce using rule 49 (or_expression)


State 180

   51 and_expression: equality_expression •
   52 equality_expression: equality_expression • EQUALITY_OP relational_expression

    EQUALITY_OP  shift, and go to state 238

    ')'             reduce using rule 51 (and_expression)
    ','             reduce using rule 51 (and_expression)
    LOGICAL_OP_OR   reduce using rule 51 (and_expression)
    LOGICAL_OP_AND  reduce using rule 51 (and_expression)


State 181

   53 equality_expression: relational_expression •
   54 relational_expression: relational_expression • RELATIONAL_OP list_expression

    RELATIONAL_OP  shift, and go to state 239

    ')'             reduce using rule 53 (equality_expression)
    ','             reduce using rule 53 (equality_expression)
    EQUALITY_OP     reduce using rule 53 (equality_expression)
    LOGICAL_OP_OR   reduce using rule 53 (equality_expression)
    LOGICAL_OP_AND  reduce using rule 53 (equality_expression)


State 182

   55 relational_expression: list_expression •
   56 list_expression: list_expression • BINARY_LIST_OP addition_expression

    BINARY_LIST_OP  shift, and go to state 240

    ')'             reduce using rule 55 (relational_expression)
    ','             reduce using rule 55 (relational_expression)
    RELATIONAL_OP   reduce using rule 55 (relational_expression)
    EQUALITY_OP     reduce using rule 55 (relational_expression)
    LOGICAL_OP_OR   reduce using rule 55 (relational_expression)
    LOGICAL_OP_AND  reduce using rule 55 (relational_expression)


State 183

   57 list_expression: addition_expression •
   58 addition_expression: addition_expression • ARITMETIC_OP_ADDITIVE multiplication_expression

    ARITMETIC_OP_ADDITIVE  shift, and go to state 241

    BINARY_LIST_OP  reduce using rule 57 (list_expression)
    ')'             reduce using rule 57 (list_expression)
    ','             reduce using rule 57 (list_expression)
    RELATIONAL_OP   reduce using rule 57 (list_expression)
    EQUALITY_OP     reduce using rule 57 (list_expression)
    LOGICAL_OP_OR   reduce using rule 57 (list_expression)
    LOGICAL_OP_AND  reduce using rule 57 (list_expression)


State 184

   59 addition_expression: multiplication_expression •
   60 multiplication_expression: multiplication_expression • ARITMETIC_OP_MULTIPLICATIVE simple_value

    ARITMETIC_OP_MULTIPLICATIVE  shift, and go to state 242

    BINARY_LIST_OP         reduce using rule 59 (addition_expression)
    ')'                    reduce using rule 59 (addition_expression)
    ','                    reduce using rule 59 (addition_expression)
    ARITMETIC_OP_ADDITIVE  reduce using rule 59 (addition_expression)
    RELATIONAL_OP          reduce using rule 59 (addition_expression)
    EQUALITY_OP            reduce using rule 59 (addition_expression)
    LOGICAL_OP_OR          reduce using rule 59 (addition_expression)
    LOGICAL_OP_AND         reduce using rule 59 (addition_expression)


State 185

   61 multiplication_expression: simple_value •

    BINARY_LIST_OP               reduce using rule 61 (multiplication_expression)
    ')'                          reduce using rule 61 (multiplication_expression)
    ','                          reduce using rule 61 (multiplication_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 61 (multiplication_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 61 (multiplication_expression)
    RELATIONAL_OP                reduce using rule 61 (multiplication_expression)
    EQUALITY_OP                  reduce using rule 61 (multiplication_expression)
    LOGICAL_OP_OR                reduce using rule 61 (multiplication_expression)
    LOGICAL_OP_AND               reduce using rule 61 (multiplication_expression)


State 186

   62 simple_value: constant •

    BINARY_LIST_OP               reduce using rule 62 (simple_value)
    ')'                          reduce using rule 62 (simple_value)
    ','                          reduce using rule 62 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 62 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 62 (simple_value)
    RELATIONAL_OP                reduce using rule 62 (simple_value)
    EQUALITY_OP                  reduce using rule 62 (simple_value)
    LOGICAL_OP_OR                reduce using rule 62 (simple_value)
    LOGICAL_OP_AND               reduce using rule 62 (simple_value)


State 187

   16 statement: error •

    $end         reduce using rule 16 (statement)
    SIMPLE_TYPE  reduce using rule 16 (statement)
    RW_ELSE      reduce using rule 16 (statement)


State 188

   68 variable_declaration_statement: SIMPLE_TYPE • IDENTIFIER ';'
   69                               | SIMPLE_TYPE • LIST_TYPE IDENTIFIER ';'

    LIST_TYPE   shift, and go to state 243
    IDENTIFIER  shift, and go to state 244


State 189

   25 for_statement: RW_FOR • '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    '('  shift, and go to state 245


State 190

   34 return_statement: RW_RETURN • expression ';'

    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    IDENTIFIER             shift, and go to state 32
    UNARY_LIST_OP          shift, and go to state 38
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    expression                 go to state 246
    function_call_expression   go to state 53
    or_expression              go to state 54
    and_expression             go to state 55
    equality_expression        go to state 56
    relational_expression      go to state 57
    list_expression            go to state 58
    addition_expression        go to state 59
    multiplication_expression  go to state 60
    simple_value               go to state 61
    constant                   go to state 63


State 191

   26 if_else_statement: RW_IF • '(' expression ')' statement
   27                  | RW_IF • '(' expression ')' statement RW_ELSE statement

    '('  shift, and go to state 247


State 192

   31 input_statement: IO_READ • '(' IDENTIFIER ')' ';'

    '('  shift, and go to state 248


State 193

   32 output_statement: IO_WRITE • '(' expression ')' ';'
   33                 | IO_WRITE • '(' LIT_STRING ')' ';'

    '('  shift, and go to state 249


State 194

    6 block: '{' • statements '}'

    error                  shift, and go to state 133
    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    SIMPLE_TYPE            shift, and go to state 134
    IDENTIFIER             shift, and go to state 32
    RW_FOR                 shift, and go to state 135
    RW_RETURN              shift, and go to state 136
    RW_IF                  shift, and go to state 137
    IO_READ                shift, and go to state 138
    IO_WRITE               shift, and go to state 139
    UNARY_LIST_OP          shift, and go to state 38
    '{'                    shift, and go to state 140
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    block                           go to state 141
    statements                      go to state 250
    statement                       go to state 78
    for_statement                   go to state 142
    if_else_statement               go to state 143
    expression_statement            go to state 144
    io_statement                    go to state 145
    input_statement                 go to state 146
    output_statement                go to state 147
    return_statement                go to state 148
    expression                      go to state 149
    function_call_expression        go to state 53
    or_expression                   go to state 54
    and_expression                  go to state 55
    equality_expression             go to state 56
    relational_expression           go to state 57
    list_expression                 go to state 58
    addition_expression             go to state 59
    multiplication_expression       go to state 60
    simple_value                    go to state 61
    variable_declaration_statement  go to state 150
    constant                        go to state 63


State 195

   15 statement: block •

    $end         reduce using rule 15 (statement)
    SIMPLE_TYPE  reduce using rule 15 (statement)
    RW_ELSE      reduce using rule 15 (statement)


State 196

   13 statement: for_statement •

    $end         reduce using rule 13 (statement)
    SIMPLE_TYPE  reduce using rule 13 (statement)
    RW_ELSE      reduce using rule 13 (statement)


State 197

   14 statement: if_else_statement •

    $end         reduce using rule 14 (statement)
    SIMPLE_TYPE  reduce using rule 14 (statement)
    RW_ELSE      reduce using rule 14 (statement)


State 198

    9 statement: expression_statement •

    $end         reduce using rule 9 (statement)
    SIMPLE_TYPE  reduce using rule 9 (statement)
    RW_ELSE      reduce using rule 9 (statement)


State 199

   10 statement: io_statement •

    $end         reduce using rule 10 (statement)
    SIMPLE_TYPE  reduce using rule 10 (statement)
    RW_ELSE      reduce using rule 10 (statement)


State 200

   29 io_statement: input_statement •

    $end         reduce using rule 29 (io_statement)
    SIMPLE_TYPE  reduce using rule 29 (io_statement)
    RW_ELSE      reduce using rule 29 (io_statement)


State 201

   30 io_statement: output_statement •

    $end         reduce using rule 30 (io_statement)
    SIMPLE_TYPE  reduce using rule 30 (io_statement)
    RW_ELSE      reduce using rule 30 (io_statement)


State 202

   11 statement: return_statement •

    $end         reduce using rule 11 (statement)
    SIMPLE_TYPE  reduce using rule 11 (statement)
    RW_ELSE      reduce using rule 11 (statement)


State 203

   28 expression_statement: expression • ';'

    ';'  shift, and go to state 251


State 204

   12 statement: variable_declaration_statement •

    $end         reduce using rule 12 (statement)
    SIMPLE_TYPE  reduce using rule 12 (statement)
    RW_ELSE      reduce using rule 12 (statement)


State 205

   45 expression_optative: expression •

    ')'  reduce using rule 45 (expression_optative)


State 206

   69 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE • IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 252


State 207

   68 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 253


State 208

   25 for_statement: RW_FOR '(' • expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    IDENTIFIER             shift, and go to state 32
    UNARY_LIST_OP          shift, and go to state 38
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    ';'  reduce using rule 44 (expression_optative)

    expression                 go to state 96
    function_call_expression   go to state 53
    expression_optative        go to state 254
    or_expression              go to state 54
    and_expression             go to state 55
    equality_expression        go to state 56
    relational_expression      go to state 57
    list_expression            go to state 58
    addition_expression        go to state 59
    multiplication_expression  go to state 60
    simple_value               go to state 61
    constant                   go to state 63


State 209

   34 return_statement: RW_RETURN expression • ';'

    ';'  shift, and go to state 255


State 210

   26 if_else_statement: RW_IF '(' • expression ')' statement
   27                  | RW_IF '(' • expression ')' statement RW_ELSE statement

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    IDENTIFIER             shift, and go to state 154
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    expression                 go to state 256
    function_call_expression   go to state 159
    or_expression              go to state 160
    and_expression             go to state 161
    equality_expression        go to state 162
    relational_expression      go to state 163
    list_expression            go to state 164
    addition_expression        go to state 165
    multiplication_expression  go to state 166
    simple_value               go to state 167
    constant                   go to state 168


State 211

   31 input_statement: IO_READ '(' • IDENTIFIER ')' ';'

    IDENTIFIER  shift, and go to state 257


State 212

   32 output_statement: IO_WRITE '(' • expression ')' ';'
   33                 | IO_WRITE '(' • LIT_STRING ')' ';'

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    LIT_STRING             shift, and go to state 258
    IDENTIFIER             shift, and go to state 154
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    expression                 go to state 259
    function_call_expression   go to state 159
    or_expression              go to state 160
    and_expression             go to state 161
    equality_expression        go to state 162
    relational_expression      go to state 163
    list_expression            go to state 164
    addition_expression        go to state 165
    multiplication_expression  go to state 166
    simple_value               go to state 167
    constant                   go to state 168


State 213

    6 block: '{' statements • '}'
    7 statements: statements • statement

    error                  shift, and go to state 133
    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    SIMPLE_TYPE            shift, and go to state 134
    IDENTIFIER             shift, and go to state 32
    RW_FOR                 shift, and go to state 135
    RW_RETURN              shift, and go to state 136
    RW_IF                  shift, and go to state 137
    IO_READ                shift, and go to state 138
    IO_WRITE               shift, and go to state 139
    UNARY_LIST_OP          shift, and go to state 38
    '{'                    shift, and go to state 140
    '}'                    shift, and go to state 260
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    block                           go to state 141
    statement                       go to state 104
    for_statement                   go to state 142
    if_else_statement               go to state 143
    expression_statement            go to state 144
    io_statement                    go to state 145
    input_statement                 go to state 146
    output_statement                go to state 147
    return_statement                go to state 148
    expression                      go to state 149
    function_call_expression        go to state 53
    or_expression                   go to state 54
    and_expression                  go to state 55
    equality_expression             go to state 56
    relational_expression           go to state 57
    list_expression                 go to state 58
    addition_expression             go to state 59
    multiplication_expression       go to state 60
    simple_value                    go to state 61
    variable_declaration_statement  go to state 150
    constant                        go to state 63


State 214

   28 expression_statement: expression ';' •

    error                  reduce using rule 28 (expression_statement)
    C_INTEGER              reduce using rule 28 (expression_statement)
    C_FLOAT                reduce using rule 28 (expression_statement)
    C_NIL                  reduce using rule 28 (expression_statement)
    SIMPLE_TYPE            reduce using rule 28 (expression_statement)
    IDENTIFIER             reduce using rule 28 (expression_statement)
    RW_FOR                 reduce using rule 28 (expression_statement)
    RW_RETURN              reduce using rule 28 (expression_statement)
    RW_IF                  reduce using rule 28 (expression_statement)
    IO_READ                reduce using rule 28 (expression_statement)
    IO_WRITE               reduce using rule 28 (expression_statement)
    UNARY_LIST_OP          reduce using rule 28 (expression_statement)
    '{'                    reduce using rule 28 (expression_statement)
    '}'                    reduce using rule 28 (expression_statement)
    '('                    reduce using rule 28 (expression_statement)
    '!'                    reduce using rule 28 (expression_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 28 (expression_statement)


State 215

   38 function_call_expression: IDENTIFIER '(' • function_arguments_optional ')'

    C_INTEGER              shift, and go to state 169
    C_FLOAT                shift, and go to state 170
    C_NIL                  shift, and go to state 171
    IDENTIFIER             shift, and go to state 172
    UNARY_LIST_OP          shift, and go to state 173
    '('                    shift, and go to state 174
    '!'                    shift, and go to state 175
    ARITMETIC_OP_ADDITIVE  shift, and go to state 176

    ')'  reduce using rule 39 (function_arguments_optional)

    expression                   go to state 91
    function_call_expression     go to state 177
    function_arguments_optional  go to state 261
    function_arguments           go to state 93
    function_argument            go to state 94
    or_expression                go to state 178
    and_expression               go to state 179
    equality_expression          go to state 180
    relational_expression        go to state 181
    list_expression              go to state 182
    addition_expression          go to state 183
    multiplication_expression    go to state 184
    simple_value                 go to state 185
    constant                     go to state 186


State 216

   35 expression: IDENTIFIER '=' • expression

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    IDENTIFIER             shift, and go to state 154
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    expression                 go to state 262
    function_call_expression   go to state 159
    or_expression              go to state 160
    and_expression             go to state 161
    equality_expression        go to state 162
    relational_expression      go to state 163
    list_expression            go to state 164
    addition_expression        go to state 165
    multiplication_expression  go to state 166
    simple_value               go to state 167
    constant                   go to state 168


State 217

   63 simple_value: IDENTIFIER •

    BINARY_LIST_OP               reduce using rule 63 (simple_value)
    ')'                          reduce using rule 63 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 63 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 63 (simple_value)
    RELATIONAL_OP                reduce using rule 63 (simple_value)
    EQUALITY_OP                  reduce using rule 63 (simple_value)
    LOGICAL_OP_OR                reduce using rule 63 (simple_value)
    LOGICAL_OP_AND               reduce using rule 63 (simple_value)


State 218

   66 simple_value: UNARY_LIST_OP simple_value •

    BINARY_LIST_OP               reduce using rule 66 (simple_value)
    ')'                          reduce using rule 66 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 66 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 66 (simple_value)
    RELATIONAL_OP                reduce using rule 66 (simple_value)
    EQUALITY_OP                  reduce using rule 66 (simple_value)
    LOGICAL_OP_OR                reduce using rule 66 (simple_value)
    LOGICAL_OP_AND               reduce using rule 66 (simple_value)


State 219

   67 simple_value: '(' expression • ')'

    ')'  shift, and go to state 263


State 220

   65 simple_value: '!' simple_value •

    BINARY_LIST_OP               reduce using rule 65 (simple_value)
    ')'                          reduce using rule 65 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 65 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 65 (simple_value)
    RELATIONAL_OP                reduce using rule 65 (simple_value)
    EQUALITY_OP                  reduce using rule 65 (simple_value)
    LOGICAL_OP_OR                reduce using rule 65 (simple_value)
    LOGICAL_OP_AND               reduce using rule 65 (simple_value)


State 221

   64 simple_value: ARITMETIC_OP_ADDITIVE simple_value •

    BINARY_LIST_OP               reduce using rule 64 (simple_value)
    ')'                          reduce using rule 64 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 64 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 64 (simple_value)
    RELATIONAL_OP                reduce using rule 64 (simple_value)
    EQUALITY_OP                  reduce using rule 64 (simple_value)
    LOGICAL_OP_OR                reduce using rule 64 (simple_value)
    LOGICAL_OP_AND               reduce using rule 64 (simple_value)


State 222

   48 or_expression: or_expression LOGICAL_OP_OR • and_expression

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    IDENTIFIER             shift, and go to state 217
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    and_expression             go to state 264
    equality_expression        go to state 162
    relational_expression      go to state 163
    list_expression            go to state 164
    addition_expression        go to state 165
    multiplication_expression  go to state 166
    simple_value               go to state 167
    constant                   go to state 168


State 223

   50 and_expression: and_expression LOGICAL_OP_AND • equality_expression

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    IDENTIFIER             shift, and go to state 217
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    equality_expression        go to state 265
    relational_expression      go to state 163
    list_expression            go to state 164
    addition_expression        go to state 165
    multiplication_expression  go to state 166
    simple_value               go to state 167
    constant                   go to state 168


State 224

   52 equality_expression: equality_expression EQUALITY_OP • relational_expression

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    IDENTIFIER             shift, and go to state 217
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    relational_expression      go to state 266
    list_expression            go to state 164
    addition_expression        go to state 165
    multiplication_expression  go to state 166
    simple_value               go to state 167
    constant                   go to state 168


State 225

   54 relational_expression: relational_expression RELATIONAL_OP • list_expression

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    IDENTIFIER             shift, and go to state 217
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    list_expression            go to state 267
    addition_expression        go to state 165
    multiplication_expression  go to state 166
    simple_value               go to state 167
    constant                   go to state 168


State 226

   56 list_expression: list_expression BINARY_LIST_OP • addition_expression

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    IDENTIFIER             shift, and go to state 217
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    addition_expression        go to state 268
    multiplication_expression  go to state 166
    simple_value               go to state 167
    constant                   go to state 168


State 227

   58 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE • multiplication_expression

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    IDENTIFIER             shift, and go to state 217
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    multiplication_expression  go to state 269
    simple_value               go to state 167
    constant                   go to state 168


State 228

   60 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE • simple_value

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    IDENTIFIER             shift, and go to state 217
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    simple_value  go to state 270
    constant      go to state 168


State 229

   38 function_call_expression: IDENTIFIER '(' • function_arguments_optional ')'

    C_INTEGER              shift, and go to state 169
    C_FLOAT                shift, and go to state 170
    C_NIL                  shift, and go to state 171
    IDENTIFIER             shift, and go to state 172
    UNARY_LIST_OP          shift, and go to state 173
    '('                    shift, and go to state 174
    '!'                    shift, and go to state 175
    ARITMETIC_OP_ADDITIVE  shift, and go to state 176

    ')'  reduce using rule 39 (function_arguments_optional)

    expression                   go to state 91
    function_call_expression     go to state 177
    function_arguments_optional  go to state 271
    function_arguments           go to state 93
    function_argument            go to state 94
    or_expression                go to state 178
    and_expression               go to state 179
    equality_expression          go to state 180
    relational_expression        go to state 181
    list_expression              go to state 182
    addition_expression          go to state 183
    multiplication_expression    go to state 184
    simple_value                 go to state 185
    constant                     go to state 186


State 230

   35 expression: IDENTIFIER '=' • expression

    C_INTEGER              shift, and go to state 169
    C_FLOAT                shift, and go to state 170
    C_NIL                  shift, and go to state 171
    IDENTIFIER             shift, and go to state 172
    UNARY_LIST_OP          shift, and go to state 173
    '('                    shift, and go to state 174
    '!'                    shift, and go to state 175
    ARITMETIC_OP_ADDITIVE  shift, and go to state 176

    expression                 go to state 272
    function_call_expression   go to state 177
    or_expression              go to state 178
    and_expression             go to state 179
    equality_expression        go to state 180
    relational_expression      go to state 181
    list_expression            go to state 182
    addition_expression        go to state 183
    multiplication_expression  go to state 184
    simple_value               go to state 185
    constant                   go to state 186


State 231

   63 simple_value: IDENTIFIER •

    BINARY_LIST_OP               reduce using rule 63 (simple_value)
    ')'                          reduce using rule 63 (simple_value)
    ','                          reduce using rule 63 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 63 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 63 (simple_value)
    RELATIONAL_OP                reduce using rule 63 (simple_value)
    EQUALITY_OP                  reduce using rule 63 (simple_value)
    LOGICAL_OP_OR                reduce using rule 63 (simple_value)
    LOGICAL_OP_AND               reduce using rule 63 (simple_value)


State 232

   66 simple_value: UNARY_LIST_OP simple_value •

    BINARY_LIST_OP               reduce using rule 66 (simple_value)
    ')'                          reduce using rule 66 (simple_value)
    ','                          reduce using rule 66 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 66 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 66 (simple_value)
    RELATIONAL_OP                reduce using rule 66 (simple_value)
    EQUALITY_OP                  reduce using rule 66 (simple_value)
    LOGICAL_OP_OR                reduce using rule 66 (simple_value)
    LOGICAL_OP_AND               reduce using rule 66 (simple_value)


State 233

   67 simple_value: '(' expression • ')'

    ')'  shift, and go to state 273


State 234

   65 simple_value: '!' simple_value •

    BINARY_LIST_OP               reduce using rule 65 (simple_value)
    ')'                          reduce using rule 65 (simple_value)
    ','                          reduce using rule 65 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 65 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 65 (simple_value)
    RELATIONAL_OP                reduce using rule 65 (simple_value)
    EQUALITY_OP                  reduce using rule 65 (simple_value)
    LOGICAL_OP_OR                reduce using rule 65 (simple_value)
    LOGICAL_OP_AND               reduce using rule 65 (simple_value)


State 235

   64 simple_value: ARITMETIC_OP_ADDITIVE simple_value •

    BINARY_LIST_OP               reduce using rule 64 (simple_value)
    ')'                          reduce using rule 64 (simple_value)
    ','                          reduce using rule 64 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 64 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 64 (simple_value)
    RELATIONAL_OP                reduce using rule 64 (simple_value)
    EQUALITY_OP                  reduce using rule 64 (simple_value)
    LOGICAL_OP_OR                reduce using rule 64 (simple_value)
    LOGICAL_OP_AND               reduce using rule 64 (simple_value)


State 236

   48 or_expression: or_expression LOGICAL_OP_OR • and_expression

    C_INTEGER              shift, and go to state 169
    C_FLOAT                shift, and go to state 170
    C_NIL                  shift, and go to state 171
    IDENTIFIER             shift, and go to state 231
    UNARY_LIST_OP          shift, and go to state 173
    '('                    shift, and go to state 174
    '!'                    shift, and go to state 175
    ARITMETIC_OP_ADDITIVE  shift, and go to state 176

    and_expression             go to state 274
    equality_expression        go to state 180
    relational_expression      go to state 181
    list_expression            go to state 182
    addition_expression        go to state 183
    multiplication_expression  go to state 184
    simple_value               go to state 185
    constant                   go to state 186


State 237

   50 and_expression: and_expression LOGICAL_OP_AND • equality_expression

    C_INTEGER              shift, and go to state 169
    C_FLOAT                shift, and go to state 170
    C_NIL                  shift, and go to state 171
    IDENTIFIER             shift, and go to state 231
    UNARY_LIST_OP          shift, and go to state 173
    '('                    shift, and go to state 174
    '!'                    shift, and go to state 175
    ARITMETIC_OP_ADDITIVE  shift, and go to state 176

    equality_expression        go to state 275
    relational_expression      go to state 181
    list_expression            go to state 182
    addition_expression        go to state 183
    multiplication_expression  go to state 184
    simple_value               go to state 185
    constant                   go to state 186


State 238

   52 equality_expression: equality_expression EQUALITY_OP • relational_expression

    C_INTEGER              shift, and go to state 169
    C_FLOAT                shift, and go to state 170
    C_NIL                  shift, and go to state 171
    IDENTIFIER             shift, and go to state 231
    UNARY_LIST_OP          shift, and go to state 173
    '('                    shift, and go to state 174
    '!'                    shift, and go to state 175
    ARITMETIC_OP_ADDITIVE  shift, and go to state 176

    relational_expression      go to state 276
    list_expression            go to state 182
    addition_expression        go to state 183
    multiplication_expression  go to state 184
    simple_value               go to state 185
    constant                   go to state 186


State 239

   54 relational_expression: relational_expression RELATIONAL_OP • list_expression

    C_INTEGER              shift, and go to state 169
    C_FLOAT                shift, and go to state 170
    C_NIL                  shift, and go to state 171
    IDENTIFIER             shift, and go to state 231
    UNARY_LIST_OP          shift, and go to state 173
    '('                    shift, and go to state 174
    '!'                    shift, and go to state 175
    ARITMETIC_OP_ADDITIVE  shift, and go to state 176

    list_expression            go to state 277
    addition_expression        go to state 183
    multiplication_expression  go to state 184
    simple_value               go to state 185
    constant                   go to state 186


State 240

   56 list_expression: list_expression BINARY_LIST_OP • addition_expression

    C_INTEGER              shift, and go to state 169
    C_FLOAT                shift, and go to state 170
    C_NIL                  shift, and go to state 171
    IDENTIFIER             shift, and go to state 231
    UNARY_LIST_OP          shift, and go to state 173
    '('                    shift, and go to state 174
    '!'                    shift, and go to state 175
    ARITMETIC_OP_ADDITIVE  shift, and go to state 176

    addition_expression        go to state 278
    multiplication_expression  go to state 184
    simple_value               go to state 185
    constant                   go to state 186


State 241

   58 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE • multiplication_expression

    C_INTEGER              shift, and go to state 169
    C_FLOAT                shift, and go to state 170
    C_NIL                  shift, and go to state 171
    IDENTIFIER             shift, and go to state 231
    UNARY_LIST_OP          shift, and go to state 173
    '('                    shift, and go to state 174
    '!'                    shift, and go to state 175
    ARITMETIC_OP_ADDITIVE  shift, and go to state 176

    multiplication_expression  go to state 279
    simple_value               go to state 185
    constant                   go to state 186


State 242

   60 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE • simple_value

    C_INTEGER              shift, and go to state 169
    C_FLOAT                shift, and go to state 170
    C_NIL                  shift, and go to state 171
    IDENTIFIER             shift, and go to state 231
    UNARY_LIST_OP          shift, and go to state 173
    '('                    shift, and go to state 174
    '!'                    shift, and go to state 175
    ARITMETIC_OP_ADDITIVE  shift, and go to state 176

    simple_value  go to state 280
    constant      go to state 186


State 243

   69 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE • IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 281


State 244

   68 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 282


State 245

   25 for_statement: RW_FOR '(' • expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    IDENTIFIER             shift, and go to state 32
    UNARY_LIST_OP          shift, and go to state 38
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    ';'  reduce using rule 44 (expression_optative)

    expression                 go to state 96
    function_call_expression   go to state 53
    expression_optative        go to state 283
    or_expression              go to state 54
    and_expression             go to state 55
    equality_expression        go to state 56
    relational_expression      go to state 57
    list_expression            go to state 58
    addition_expression        go to state 59
    multiplication_expression  go to state 60
    simple_value               go to state 61
    constant                   go to state 63


State 246

   34 return_statement: RW_RETURN expression • ';'

    ';'  shift, and go to state 284


State 247

   26 if_else_statement: RW_IF '(' • expression ')' statement
   27                  | RW_IF '(' • expression ')' statement RW_ELSE statement

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    IDENTIFIER             shift, and go to state 154
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    expression                 go to state 285
    function_call_expression   go to state 159
    or_expression              go to state 160
    and_expression             go to state 161
    equality_expression        go to state 162
    relational_expression      go to state 163
    list_expression            go to state 164
    addition_expression        go to state 165
    multiplication_expression  go to state 166
    simple_value               go to state 167
    constant                   go to state 168


State 248

   31 input_statement: IO_READ '(' • IDENTIFIER ')' ';'

    IDENTIFIER  shift, and go to state 286


State 249

   32 output_statement: IO_WRITE '(' • expression ')' ';'
   33                 | IO_WRITE '(' • LIT_STRING ')' ';'

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    LIT_STRING             shift, and go to state 287
    IDENTIFIER             shift, and go to state 154
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    expression                 go to state 288
    function_call_expression   go to state 159
    or_expression              go to state 160
    and_expression             go to state 161
    equality_expression        go to state 162
    relational_expression      go to state 163
    list_expression            go to state 164
    addition_expression        go to state 165
    multiplication_expression  go to state 166
    simple_value               go to state 167
    constant                   go to state 168


State 250

    6 block: '{' statements • '}'
    7 statements: statements • statement

    error                  shift, and go to state 133
    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    SIMPLE_TYPE            shift, and go to state 134
    IDENTIFIER             shift, and go to state 32
    RW_FOR                 shift, and go to state 135
    RW_RETURN              shift, and go to state 136
    RW_IF                  shift, and go to state 137
    IO_READ                shift, and go to state 138
    IO_WRITE               shift, and go to state 139
    UNARY_LIST_OP          shift, and go to state 38
    '{'                    shift, and go to state 140
    '}'                    shift, and go to state 289
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    block                           go to state 141
    statement                       go to state 104
    for_statement                   go to state 142
    if_else_statement               go to state 143
    expression_statement            go to state 144
    io_statement                    go to state 145
    input_statement                 go to state 146
    output_statement                go to state 147
    return_statement                go to state 148
    expression                      go to state 149
    function_call_expression        go to state 53
    or_expression                   go to state 54
    and_expression                  go to state 55
    equality_expression             go to state 56
    relational_expression           go to state 57
    list_expression                 go to state 58
    addition_expression             go to state 59
    multiplication_expression       go to state 60
    simple_value                    go to state 61
    variable_declaration_statement  go to state 150
    constant                        go to state 63


State 251

   28 expression_statement: expression ';' •

    $end         reduce using rule 28 (expression_statement)
    SIMPLE_TYPE  reduce using rule 28 (expression_statement)
    RW_ELSE      reduce using rule 28 (expression_statement)


State 252

   69 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 290


State 253

   68 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER ';' •

    error                  reduce using rule 68 (variable_declaration_statement)
    C_INTEGER              reduce using rule 68 (variable_declaration_statement)
    C_FLOAT                reduce using rule 68 (variable_declaration_statement)
    C_NIL                  reduce using rule 68 (variable_declaration_statement)
    SIMPLE_TYPE            reduce using rule 68 (variable_declaration_statement)
    IDENTIFIER             reduce using rule 68 (variable_declaration_statement)
    RW_FOR                 reduce using rule 68 (variable_declaration_statement)
    RW_RETURN              reduce using rule 68 (variable_declaration_statement)
    RW_IF                  reduce using rule 68 (variable_declaration_statement)
    IO_READ                reduce using rule 68 (variable_declaration_statement)
    IO_WRITE               reduce using rule 68 (variable_declaration_statement)
    UNARY_LIST_OP          reduce using rule 68 (variable_declaration_statement)
    '{'                    reduce using rule 68 (variable_declaration_statement)
    '}'                    reduce using rule 68 (variable_declaration_statement)
    '('                    reduce using rule 68 (variable_declaration_statement)
    '!'                    reduce using rule 68 (variable_declaration_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 68 (variable_declaration_statement)


State 254

   25 for_statement: RW_FOR '(' expression_optative • ';' or_expression_optative ';' expression_optative ')' statement

    ';'  shift, and go to state 291


State 255

   34 return_statement: RW_RETURN expression ';' •

    error                  reduce using rule 34 (return_statement)
    C_INTEGER              reduce using rule 34 (return_statement)
    C_FLOAT                reduce using rule 34 (return_statement)
    C_NIL                  reduce using rule 34 (return_statement)
    SIMPLE_TYPE            reduce using rule 34 (return_statement)
    IDENTIFIER             reduce using rule 34 (return_statement)
    RW_FOR                 reduce using rule 34 (return_statement)
    RW_RETURN              reduce using rule 34 (return_statement)
    RW_IF                  reduce using rule 34 (return_statement)
    IO_READ                reduce using rule 34 (return_statement)
    IO_WRITE               reduce using rule 34 (return_statement)
    UNARY_LIST_OP          reduce using rule 34 (return_statement)
    '{'                    reduce using rule 34 (return_statement)
    '}'                    reduce using rule 34 (return_statement)
    '('                    reduce using rule 34 (return_statement)
    '!'                    reduce using rule 34 (return_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 34 (return_statement)


State 256

   26 if_else_statement: RW_IF '(' expression • ')' statement
   27                  | RW_IF '(' expression • ')' statement RW_ELSE statement

    ')'  shift, and go to state 292


State 257

   31 input_statement: IO_READ '(' IDENTIFIER • ')' ';'

    ')'  shift, and go to state 293


State 258

   33 output_statement: IO_WRITE '(' LIT_STRING • ')' ';'

    ')'  shift, and go to state 294


State 259

   32 output_statement: IO_WRITE '(' expression • ')' ';'

    ')'  shift, and go to state 295


State 260

    6 block: '{' statements '}' •

    error                  reduce using rule 6 (block)
    C_INTEGER              reduce using rule 6 (block)
    C_FLOAT                reduce using rule 6 (block)
    C_NIL                  reduce using rule 6 (block)
    SIMPLE_TYPE            reduce using rule 6 (block)
    IDENTIFIER             reduce using rule 6 (block)
    RW_FOR                 reduce using rule 6 (block)
    RW_RETURN              reduce using rule 6 (block)
    RW_IF                  reduce using rule 6 (block)
    IO_READ                reduce using rule 6 (block)
    IO_WRITE               reduce using rule 6 (block)
    UNARY_LIST_OP          reduce using rule 6 (block)
    '{'                    reduce using rule 6 (block)
    '}'                    reduce using rule 6 (block)
    '('                    reduce using rule 6 (block)
    '!'                    reduce using rule 6 (block)
    ARITMETIC_OP_ADDITIVE  reduce using rule 6 (block)


State 261

   38 function_call_expression: IDENTIFIER '(' function_arguments_optional • ')'

    ')'  shift, and go to state 296


State 262

   35 expression: IDENTIFIER '=' expression •

    ')'  reduce using rule 35 (expression)


State 263

   67 simple_value: '(' expression ')' •

    BINARY_LIST_OP               reduce using rule 67 (simple_value)
    ')'                          reduce using rule 67 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 67 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 67 (simple_value)
    RELATIONAL_OP                reduce using rule 67 (simple_value)
    EQUALITY_OP                  reduce using rule 67 (simple_value)
    LOGICAL_OP_OR                reduce using rule 67 (simple_value)
    LOGICAL_OP_AND               reduce using rule 67 (simple_value)


State 264

   48 or_expression: or_expression LOGICAL_OP_OR and_expression •
   50 and_expression: and_expression • LOGICAL_OP_AND equality_expression

    LOGICAL_OP_AND  shift, and go to state 223

    ')'            reduce using rule 48 (or_expression)
    LOGICAL_OP_OR  reduce using rule 48 (or_expression)


State 265

   50 and_expression: and_expression LOGICAL_OP_AND equality_expression •
   52 equality_expression: equality_expression • EQUALITY_OP relational_expression

    EQUALITY_OP  shift, and go to state 224

    ')'             reduce using rule 50 (and_expression)
    LOGICAL_OP_OR   reduce using rule 50 (and_expression)
    LOGICAL_OP_AND  reduce using rule 50 (and_expression)


State 266

   52 equality_expression: equality_expression EQUALITY_OP relational_expression •
   54 relational_expression: relational_expression • RELATIONAL_OP list_expression

    RELATIONAL_OP  shift, and go to state 225

    ')'             reduce using rule 52 (equality_expression)
    EQUALITY_OP     reduce using rule 52 (equality_expression)
    LOGICAL_OP_OR   reduce using rule 52 (equality_expression)
    LOGICAL_OP_AND  reduce using rule 52 (equality_expression)


State 267

   54 relational_expression: relational_expression RELATIONAL_OP list_expression •
   56 list_expression: list_expression • BINARY_LIST_OP addition_expression

    BINARY_LIST_OP  shift, and go to state 226

    ')'             reduce using rule 54 (relational_expression)
    RELATIONAL_OP   reduce using rule 54 (relational_expression)
    EQUALITY_OP     reduce using rule 54 (relational_expression)
    LOGICAL_OP_OR   reduce using rule 54 (relational_expression)
    LOGICAL_OP_AND  reduce using rule 54 (relational_expression)


State 268

   56 list_expression: list_expression BINARY_LIST_OP addition_expression •
   58 addition_expression: addition_expression • ARITMETIC_OP_ADDITIVE multiplication_expression

    ARITMETIC_OP_ADDITIVE  shift, and go to state 227

    BINARY_LIST_OP  reduce using rule 56 (list_expression)
    ')'             reduce using rule 56 (list_expression)
    RELATIONAL_OP   reduce using rule 56 (list_expression)
    EQUALITY_OP     reduce using rule 56 (list_expression)
    LOGICAL_OP_OR   reduce using rule 56 (list_expression)
    LOGICAL_OP_AND  reduce using rule 56 (list_expression)


State 269

   58 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE multiplication_expression •
   60 multiplication_expression: multiplication_expression • ARITMETIC_OP_MULTIPLICATIVE simple_value

    ARITMETIC_OP_MULTIPLICATIVE  shift, and go to state 228

    BINARY_LIST_OP         reduce using rule 58 (addition_expression)
    ')'                    reduce using rule 58 (addition_expression)
    ARITMETIC_OP_ADDITIVE  reduce using rule 58 (addition_expression)
    RELATIONAL_OP          reduce using rule 58 (addition_expression)
    EQUALITY_OP            reduce using rule 58 (addition_expression)
    LOGICAL_OP_OR          reduce using rule 58 (addition_expression)
    LOGICAL_OP_AND         reduce using rule 58 (addition_expression)


State 270

   60 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE simple_value •

    BINARY_LIST_OP               reduce using rule 60 (multiplication_expression)
    ')'                          reduce using rule 60 (multiplication_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 60 (multiplication_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 60 (multiplication_expression)
    RELATIONAL_OP                reduce using rule 60 (multiplication_expression)
    EQUALITY_OP                  reduce using rule 60 (multiplication_expression)
    LOGICAL_OP_OR                reduce using rule 60 (multiplication_expression)
    LOGICAL_OP_AND               reduce using rule 60 (multiplication_expression)


State 271

   38 function_call_expression: IDENTIFIER '(' function_arguments_optional • ')'

    ')'  shift, and go to state 297


State 272

   35 expression: IDENTIFIER '=' expression •

    ')'  reduce using rule 35 (expression)
    ','  reduce using rule 35 (expression)


State 273

   67 simple_value: '(' expression ')' •

    BINARY_LIST_OP               reduce using rule 67 (simple_value)
    ')'                          reduce using rule 67 (simple_value)
    ','                          reduce using rule 67 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 67 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 67 (simple_value)
    RELATIONAL_OP                reduce using rule 67 (simple_value)
    EQUALITY_OP                  reduce using rule 67 (simple_value)
    LOGICAL_OP_OR                reduce using rule 67 (simple_value)
    LOGICAL_OP_AND               reduce using rule 67 (simple_value)


State 274

   48 or_expression: or_expression LOGICAL_OP_OR and_expression •
   50 and_expression: and_expression • LOGICAL_OP_AND equality_expression

    LOGICAL_OP_AND  shift, and go to state 237

    ')'            reduce using rule 48 (or_expression)
    ','            reduce using rule 48 (or_expression)
    LOGICAL_OP_OR  reduce using rule 48 (or_expression)


State 275

   50 and_expression: and_expression LOGICAL_OP_AND equality_expression •
   52 equality_expression: equality_expression • EQUALITY_OP relational_expression

    EQUALITY_OP  shift, and go to state 238

    ')'             reduce using rule 50 (and_expression)
    ','             reduce using rule 50 (and_expression)
    LOGICAL_OP_OR   reduce using rule 50 (and_expression)
    LOGICAL_OP_AND  reduce using rule 50 (and_expression)


State 276

   52 equality_expression: equality_expression EQUALITY_OP relational_expression •
   54 relational_expression: relational_expression • RELATIONAL_OP list_expression

    RELATIONAL_OP  shift, and go to state 239

    ')'             reduce using rule 52 (equality_expression)
    ','             reduce using rule 52 (equality_expression)
    EQUALITY_OP     reduce using rule 52 (equality_expression)
    LOGICAL_OP_OR   reduce using rule 52 (equality_expression)
    LOGICAL_OP_AND  reduce using rule 52 (equality_expression)


State 277

   54 relational_expression: relational_expression RELATIONAL_OP list_expression •
   56 list_expression: list_expression • BINARY_LIST_OP addition_expression

    BINARY_LIST_OP  shift, and go to state 240

    ')'             reduce using rule 54 (relational_expression)
    ','             reduce using rule 54 (relational_expression)
    RELATIONAL_OP   reduce using rule 54 (relational_expression)
    EQUALITY_OP     reduce using rule 54 (relational_expression)
    LOGICAL_OP_OR   reduce using rule 54 (relational_expression)
    LOGICAL_OP_AND  reduce using rule 54 (relational_expression)


State 278

   56 list_expression: list_expression BINARY_LIST_OP addition_expression •
   58 addition_expression: addition_expression • ARITMETIC_OP_ADDITIVE multiplication_expression

    ARITMETIC_OP_ADDITIVE  shift, and go to state 241

    BINARY_LIST_OP  reduce using rule 56 (list_expression)
    ')'             reduce using rule 56 (list_expression)
    ','             reduce using rule 56 (list_expression)
    RELATIONAL_OP   reduce using rule 56 (list_expression)
    EQUALITY_OP     reduce using rule 56 (list_expression)
    LOGICAL_OP_OR   reduce using rule 56 (list_expression)
    LOGICAL_OP_AND  reduce using rule 56 (list_expression)


State 279

   58 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE multiplication_expression •
   60 multiplication_expression: multiplication_expression • ARITMETIC_OP_MULTIPLICATIVE simple_value

    ARITMETIC_OP_MULTIPLICATIVE  shift, and go to state 242

    BINARY_LIST_OP         reduce using rule 58 (addition_expression)
    ')'                    reduce using rule 58 (addition_expression)
    ','                    reduce using rule 58 (addition_expression)
    ARITMETIC_OP_ADDITIVE  reduce using rule 58 (addition_expression)
    RELATIONAL_OP          reduce using rule 58 (addition_expression)
    EQUALITY_OP            reduce using rule 58 (addition_expression)
    LOGICAL_OP_OR          reduce using rule 58 (addition_expression)
    LOGICAL_OP_AND         reduce using rule 58 (addition_expression)


State 280

   60 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE simple_value •

    BINARY_LIST_OP               reduce using rule 60 (multiplication_expression)
    ')'                          reduce using rule 60 (multiplication_expression)
    ','                          reduce using rule 60 (multiplication_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 60 (multiplication_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 60 (multiplication_expression)
    RELATIONAL_OP                reduce using rule 60 (multiplication_expression)
    EQUALITY_OP                  reduce using rule 60 (multiplication_expression)
    LOGICAL_OP_OR                reduce using rule 60 (multiplication_expression)
    LOGICAL_OP_AND               reduce using rule 60 (multiplication_expression)


State 281

   69 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 298


State 282

   68 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER ';' •

    $end         reduce using rule 68 (variable_declaration_statement)
    SIMPLE_TYPE  reduce using rule 68 (variable_declaration_statement)
    RW_ELSE      reduce using rule 68 (variable_declaration_statement)


State 283

   25 for_statement: RW_FOR '(' expression_optative • ';' or_expression_optative ';' expression_optative ')' statement

    ';'  shift, and go to state 299


State 284

   34 return_statement: RW_RETURN expression ';' •

    $end         reduce using rule 34 (return_statement)
    SIMPLE_TYPE  reduce using rule 34 (return_statement)
    RW_ELSE      reduce using rule 34 (return_statement)


State 285

   26 if_else_statement: RW_IF '(' expression • ')' statement
   27                  | RW_IF '(' expression • ')' statement RW_ELSE statement

    ')'  shift, and go to state 300


State 286

   31 input_statement: IO_READ '(' IDENTIFIER • ')' ';'

    ')'  shift, and go to state 301


State 287

   33 output_statement: IO_WRITE '(' LIT_STRING • ')' ';'

    ')'  shift, and go to state 302


State 288

   32 output_statement: IO_WRITE '(' expression • ')' ';'

    ')'  shift, and go to state 303


State 289

    6 block: '{' statements '}' •

    $end         reduce using rule 6 (block)
    SIMPLE_TYPE  reduce using rule 6 (block)
    RW_ELSE      reduce using rule 6 (block)


State 290

   69 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER ';' •

    error                  reduce using rule 69 (variable_declaration_statement)
    C_INTEGER              reduce using rule 69 (variable_declaration_statement)
    C_FLOAT                reduce using rule 69 (variable_declaration_statement)
    C_NIL                  reduce using rule 69 (variable_declaration_statement)
    SIMPLE_TYPE            reduce using rule 69 (variable_declaration_statement)
    IDENTIFIER             reduce using rule 69 (variable_declaration_statement)
    RW_FOR                 reduce using rule 69 (variable_declaration_statement)
    RW_RETURN              reduce using rule 69 (variable_declaration_statement)
    RW_IF                  reduce using rule 69 (variable_declaration_statement)
    IO_READ                reduce using rule 69 (variable_declaration_statement)
    IO_WRITE               reduce using rule 69 (variable_declaration_statement)
    UNARY_LIST_OP          reduce using rule 69 (variable_declaration_statement)
    '{'                    reduce using rule 69 (variable_declaration_statement)
    '}'                    reduce using rule 69 (variable_declaration_statement)
    '('                    reduce using rule 69 (variable_declaration_statement)
    '!'                    reduce using rule 69 (variable_declaration_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 69 (variable_declaration_statement)


State 291

   25 for_statement: RW_FOR '(' expression_optative ';' • or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    IDENTIFIER             shift, and go to state 75
    UNARY_LIST_OP          shift, and go to state 38
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    ';'  reduce using rule 46 (or_expression_optative)

    or_expression_optative     go to state 304
    or_expression              go to state 122
    and_expression             go to state 55
    equality_expression        go to state 56
    relational_expression      go to state 57
    list_expression            go to state 58
    addition_expression        go to state 59
    multiplication_expression  go to state 60
    simple_value               go to state 61
    constant                   go to state 63


State 292

   26 if_else_statement: RW_IF '(' expression ')' • statement
   27                  | RW_IF '(' expression ')' • statement RW_ELSE statement

    error                  shift, and go to state 305
    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    SIMPLE_TYPE            shift, and go to state 306
    IDENTIFIER             shift, and go to state 32
    RW_FOR                 shift, and go to state 307
    RW_RETURN              shift, and go to state 308
    RW_IF                  shift, and go to state 309
    IO_READ                shift, and go to state 310
    IO_WRITE               shift, and go to state 311
    UNARY_LIST_OP          shift, and go to state 38
    '{'                    shift, and go to state 312
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    block                           go to state 313
    statement                       go to state 314
    for_statement                   go to state 315
    if_else_statement               go to state 316
    expression_statement            go to state 317
    io_statement                    go to state 318
    input_statement                 go to state 319
    output_statement                go to state 320
    return_statement                go to state 321
    expression                      go to state 322
    function_call_expression        go to state 53
    or_expression                   go to state 54
    and_expression                  go to state 55
    equality_expression             go to state 56
    relational_expression           go to state 57
    list_expression                 go to state 58
    addition_expression             go to state 59
    multiplication_expression       go to state 60
    simple_value                    go to state 61
    variable_declaration_statement  go to state 323
    constant                        go to state 63


State 293

   31 input_statement: IO_READ '(' IDENTIFIER ')' • ';'

    ';'  shift, and go to state 324


State 294

   33 output_statement: IO_WRITE '(' LIT_STRING ')' • ';'

    ';'  shift, and go to state 325


State 295

   32 output_statement: IO_WRITE '(' expression ')' • ';'

    ';'  shift, and go to state 326


State 296

   38 function_call_expression: IDENTIFIER '(' function_arguments_optional ')' •

    ')'  reduce using rule 38 (function_call_expression)


State 297

   38 function_call_expression: IDENTIFIER '(' function_arguments_optional ')' •

    ')'  reduce using rule 38 (function_call_expression)
    ','  reduce using rule 38 (function_call_expression)


State 298

   69 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER ';' •

    $end         reduce using rule 69 (variable_declaration_statement)
    SIMPLE_TYPE  reduce using rule 69 (variable_declaration_statement)
    RW_ELSE      reduce using rule 69 (variable_declaration_statement)


State 299

   25 for_statement: RW_FOR '(' expression_optative ';' • or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    IDENTIFIER             shift, and go to state 75
    UNARY_LIST_OP          shift, and go to state 38
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    ';'  reduce using rule 46 (or_expression_optative)

    or_expression_optative     go to state 327
    or_expression              go to state 122
    and_expression             go to state 55
    equality_expression        go to state 56
    relational_expression      go to state 57
    list_expression            go to state 58
    addition_expression        go to state 59
    multiplication_expression  go to state 60
    simple_value               go to state 61
    constant                   go to state 63


State 300

   26 if_else_statement: RW_IF '(' expression ')' • statement
   27                  | RW_IF '(' expression ')' • statement RW_ELSE statement

    error                  shift, and go to state 187
    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    SIMPLE_TYPE            shift, and go to state 188
    IDENTIFIER             shift, and go to state 32
    RW_FOR                 shift, and go to state 189
    RW_RETURN              shift, and go to state 190
    RW_IF                  shift, and go to state 191
    IO_READ                shift, and go to state 192
    IO_WRITE               shift, and go to state 193
    UNARY_LIST_OP          shift, and go to state 38
    '{'                    shift, and go to state 194
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    block                           go to state 195
    statement                       go to state 328
    for_statement                   go to state 196
    if_else_statement               go to state 197
    expression_statement            go to state 198
    io_statement                    go to state 199
    input_statement                 go to state 200
    output_statement                go to state 201
    return_statement                go to state 202
    expression                      go to state 203
    function_call_expression        go to state 53
    or_expression                   go to state 54
    and_expression                  go to state 55
    equality_expression             go to state 56
    relational_expression           go to state 57
    list_expression                 go to state 58
    addition_expression             go to state 59
    multiplication_expression       go to state 60
    simple_value                    go to state 61
    variable_declaration_statement  go to state 204
    constant                        go to state 63


State 301

   31 input_statement: IO_READ '(' IDENTIFIER ')' • ';'

    ';'  shift, and go to state 329


State 302

   33 output_statement: IO_WRITE '(' LIT_STRING ')' • ';'

    ';'  shift, and go to state 330


State 303

   32 output_statement: IO_WRITE '(' expression ')' • ';'

    ';'  shift, and go to state 331


State 304

   25 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative • ';' expression_optative ')' statement

    ';'  shift, and go to state 332


State 305

   16 statement: error •

    error                  reduce using rule 16 (statement)
    C_INTEGER              reduce using rule 16 (statement)
    C_FLOAT                reduce using rule 16 (statement)
    C_NIL                  reduce using rule 16 (statement)
    SIMPLE_TYPE            reduce using rule 16 (statement)
    IDENTIFIER             reduce using rule 16 (statement)
    RW_FOR                 reduce using rule 16 (statement)
    RW_RETURN              reduce using rule 16 (statement)
    RW_IF                  reduce using rule 16 (statement)
    RW_ELSE                reduce using rule 16 (statement)
    IO_READ                reduce using rule 16 (statement)
    IO_WRITE               reduce using rule 16 (statement)
    UNARY_LIST_OP          reduce using rule 16 (statement)
    '{'                    reduce using rule 16 (statement)
    '}'                    reduce using rule 16 (statement)
    '('                    reduce using rule 16 (statement)
    '!'                    reduce using rule 16 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 16 (statement)


State 306

   68 variable_declaration_statement: SIMPLE_TYPE • IDENTIFIER ';'
   69                               | SIMPLE_TYPE • LIST_TYPE IDENTIFIER ';'

    LIST_TYPE   shift, and go to state 333
    IDENTIFIER  shift, and go to state 334


State 307

   25 for_statement: RW_FOR • '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    '('  shift, and go to state 335


State 308

   34 return_statement: RW_RETURN • expression ';'

    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    IDENTIFIER             shift, and go to state 32
    UNARY_LIST_OP          shift, and go to state 38
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    expression                 go to state 336
    function_call_expression   go to state 53
    or_expression              go to state 54
    and_expression             go to state 55
    equality_expression        go to state 56
    relational_expression      go to state 57
    list_expression            go to state 58
    addition_expression        go to state 59
    multiplication_expression  go to state 60
    simple_value               go to state 61
    constant                   go to state 63


State 309

   26 if_else_statement: RW_IF • '(' expression ')' statement
   27                  | RW_IF • '(' expression ')' statement RW_ELSE statement

    '('  shift, and go to state 337


State 310

   31 input_statement: IO_READ • '(' IDENTIFIER ')' ';'

    '('  shift, and go to state 338


State 311

   32 output_statement: IO_WRITE • '(' expression ')' ';'
   33                 | IO_WRITE • '(' LIT_STRING ')' ';'

    '('  shift, and go to state 339


State 312

    6 block: '{' • statements '}'

    error                  shift, and go to state 133
    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    SIMPLE_TYPE            shift, and go to state 134
    IDENTIFIER             shift, and go to state 32
    RW_FOR                 shift, and go to state 135
    RW_RETURN              shift, and go to state 136
    RW_IF                  shift, and go to state 137
    IO_READ                shift, and go to state 138
    IO_WRITE               shift, and go to state 139
    UNARY_LIST_OP          shift, and go to state 38
    '{'                    shift, and go to state 140
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    block                           go to state 141
    statements                      go to state 340
    statement                       go to state 78
    for_statement                   go to state 142
    if_else_statement               go to state 143
    expression_statement            go to state 144
    io_statement                    go to state 145
    input_statement                 go to state 146
    output_statement                go to state 147
    return_statement                go to state 148
    expression                      go to state 149
    function_call_expression        go to state 53
    or_expression                   go to state 54
    and_expression                  go to state 55
    equality_expression             go to state 56
    relational_expression           go to state 57
    list_expression                 go to state 58
    addition_expression             go to state 59
    multiplication_expression       go to state 60
    simple_value                    go to state 61
    variable_declaration_statement  go to state 150
    constant                        go to state 63


State 313

   15 statement: block •

    error                  reduce using rule 15 (statement)
    C_INTEGER              reduce using rule 15 (statement)
    C_FLOAT                reduce using rule 15 (statement)
    C_NIL                  reduce using rule 15 (statement)
    SIMPLE_TYPE            reduce using rule 15 (statement)
    IDENTIFIER             reduce using rule 15 (statement)
    RW_FOR                 reduce using rule 15 (statement)
    RW_RETURN              reduce using rule 15 (statement)
    RW_IF                  reduce using rule 15 (statement)
    RW_ELSE                reduce using rule 15 (statement)
    IO_READ                reduce using rule 15 (statement)
    IO_WRITE               reduce using rule 15 (statement)
    UNARY_LIST_OP          reduce using rule 15 (statement)
    '{'                    reduce using rule 15 (statement)
    '}'                    reduce using rule 15 (statement)
    '('                    reduce using rule 15 (statement)
    '!'                    reduce using rule 15 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 15 (statement)


State 314

   26 if_else_statement: RW_IF '(' expression ')' statement •
   27                  | RW_IF '(' expression ')' statement • RW_ELSE statement

    RW_ELSE  shift, and go to state 341

    error                  reduce using rule 26 (if_else_statement)
    C_INTEGER              reduce using rule 26 (if_else_statement)
    C_FLOAT                reduce using rule 26 (if_else_statement)
    C_NIL                  reduce using rule 26 (if_else_statement)
    SIMPLE_TYPE            reduce using rule 26 (if_else_statement)
    IDENTIFIER             reduce using rule 26 (if_else_statement)
    RW_FOR                 reduce using rule 26 (if_else_statement)
    RW_RETURN              reduce using rule 26 (if_else_statement)
    RW_IF                  reduce using rule 26 (if_else_statement)
    IO_READ                reduce using rule 26 (if_else_statement)
    IO_WRITE               reduce using rule 26 (if_else_statement)
    UNARY_LIST_OP          reduce using rule 26 (if_else_statement)
    '{'                    reduce using rule 26 (if_else_statement)
    '}'                    reduce using rule 26 (if_else_statement)
    '('                    reduce using rule 26 (if_else_statement)
    '!'                    reduce using rule 26 (if_else_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 26 (if_else_statement)


State 315

   13 statement: for_statement •

    error                  reduce using rule 13 (statement)
    C_INTEGER              reduce using rule 13 (statement)
    C_FLOAT                reduce using rule 13 (statement)
    C_NIL                  reduce using rule 13 (statement)
    SIMPLE_TYPE            reduce using rule 13 (statement)
    IDENTIFIER             reduce using rule 13 (statement)
    RW_FOR                 reduce using rule 13 (statement)
    RW_RETURN              reduce using rule 13 (statement)
    RW_IF                  reduce using rule 13 (statement)
    RW_ELSE                reduce using rule 13 (statement)
    IO_READ                reduce using rule 13 (statement)
    IO_WRITE               reduce using rule 13 (statement)
    UNARY_LIST_OP          reduce using rule 13 (statement)
    '{'                    reduce using rule 13 (statement)
    '}'                    reduce using rule 13 (statement)
    '('                    reduce using rule 13 (statement)
    '!'                    reduce using rule 13 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 13 (statement)


State 316

   14 statement: if_else_statement •

    error                  reduce using rule 14 (statement)
    C_INTEGER              reduce using rule 14 (statement)
    C_FLOAT                reduce using rule 14 (statement)
    C_NIL                  reduce using rule 14 (statement)
    SIMPLE_TYPE            reduce using rule 14 (statement)
    IDENTIFIER             reduce using rule 14 (statement)
    RW_FOR                 reduce using rule 14 (statement)
    RW_RETURN              reduce using rule 14 (statement)
    RW_IF                  reduce using rule 14 (statement)
    RW_ELSE                reduce using rule 14 (statement)
    IO_READ                reduce using rule 14 (statement)
    IO_WRITE               reduce using rule 14 (statement)
    UNARY_LIST_OP          reduce using rule 14 (statement)
    '{'                    reduce using rule 14 (statement)
    '}'                    reduce using rule 14 (statement)
    '('                    reduce using rule 14 (statement)
    '!'                    reduce using rule 14 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 14 (statement)


State 317

    9 statement: expression_statement •

    error                  reduce using rule 9 (statement)
    C_INTEGER              reduce using rule 9 (statement)
    C_FLOAT                reduce using rule 9 (statement)
    C_NIL                  reduce using rule 9 (statement)
    SIMPLE_TYPE            reduce using rule 9 (statement)
    IDENTIFIER             reduce using rule 9 (statement)
    RW_FOR                 reduce using rule 9 (statement)
    RW_RETURN              reduce using rule 9 (statement)
    RW_IF                  reduce using rule 9 (statement)
    RW_ELSE                reduce using rule 9 (statement)
    IO_READ                reduce using rule 9 (statement)
    IO_WRITE               reduce using rule 9 (statement)
    UNARY_LIST_OP          reduce using rule 9 (statement)
    '{'                    reduce using rule 9 (statement)
    '}'                    reduce using rule 9 (statement)
    '('                    reduce using rule 9 (statement)
    '!'                    reduce using rule 9 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 9 (statement)


State 318

   10 statement: io_statement •

    error                  reduce using rule 10 (statement)
    C_INTEGER              reduce using rule 10 (statement)
    C_FLOAT                reduce using rule 10 (statement)
    C_NIL                  reduce using rule 10 (statement)
    SIMPLE_TYPE            reduce using rule 10 (statement)
    IDENTIFIER             reduce using rule 10 (statement)
    RW_FOR                 reduce using rule 10 (statement)
    RW_RETURN              reduce using rule 10 (statement)
    RW_IF                  reduce using rule 10 (statement)
    RW_ELSE                reduce using rule 10 (statement)
    IO_READ                reduce using rule 10 (statement)
    IO_WRITE               reduce using rule 10 (statement)
    UNARY_LIST_OP          reduce using rule 10 (statement)
    '{'                    reduce using rule 10 (statement)
    '}'                    reduce using rule 10 (statement)
    '('                    reduce using rule 10 (statement)
    '!'                    reduce using rule 10 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 10 (statement)


State 319

   29 io_statement: input_statement •

    error                  reduce using rule 29 (io_statement)
    C_INTEGER              reduce using rule 29 (io_statement)
    C_FLOAT                reduce using rule 29 (io_statement)
    C_NIL                  reduce using rule 29 (io_statement)
    SIMPLE_TYPE            reduce using rule 29 (io_statement)
    IDENTIFIER             reduce using rule 29 (io_statement)
    RW_FOR                 reduce using rule 29 (io_statement)
    RW_RETURN              reduce using rule 29 (io_statement)
    RW_IF                  reduce using rule 29 (io_statement)
    RW_ELSE                reduce using rule 29 (io_statement)
    IO_READ                reduce using rule 29 (io_statement)
    IO_WRITE               reduce using rule 29 (io_statement)
    UNARY_LIST_OP          reduce using rule 29 (io_statement)
    '{'                    reduce using rule 29 (io_statement)
    '}'                    reduce using rule 29 (io_statement)
    '('                    reduce using rule 29 (io_statement)
    '!'                    reduce using rule 29 (io_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 29 (io_statement)


State 320

   30 io_statement: output_statement •

    error                  reduce using rule 30 (io_statement)
    C_INTEGER              reduce using rule 30 (io_statement)
    C_FLOAT                reduce using rule 30 (io_statement)
    C_NIL                  reduce using rule 30 (io_statement)
    SIMPLE_TYPE            reduce using rule 30 (io_statement)
    IDENTIFIER             reduce using rule 30 (io_statement)
    RW_FOR                 reduce using rule 30 (io_statement)
    RW_RETURN              reduce using rule 30 (io_statement)
    RW_IF                  reduce using rule 30 (io_statement)
    RW_ELSE                reduce using rule 30 (io_statement)
    IO_READ                reduce using rule 30 (io_statement)
    IO_WRITE               reduce using rule 30 (io_statement)
    UNARY_LIST_OP          reduce using rule 30 (io_statement)
    '{'                    reduce using rule 30 (io_statement)
    '}'                    reduce using rule 30 (io_statement)
    '('                    reduce using rule 30 (io_statement)
    '!'                    reduce using rule 30 (io_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 30 (io_statement)


State 321

   11 statement: return_statement •

    error                  reduce using rule 11 (statement)
    C_INTEGER              reduce using rule 11 (statement)
    C_FLOAT                reduce using rule 11 (statement)
    C_NIL                  reduce using rule 11 (statement)
    SIMPLE_TYPE            reduce using rule 11 (statement)
    IDENTIFIER             reduce using rule 11 (statement)
    RW_FOR                 reduce using rule 11 (statement)
    RW_RETURN              reduce using rule 11 (statement)
    RW_IF                  reduce using rule 11 (statement)
    RW_ELSE                reduce using rule 11 (statement)
    IO_READ                reduce using rule 11 (statement)
    IO_WRITE               reduce using rule 11 (statement)
    UNARY_LIST_OP          reduce using rule 11 (statement)
    '{'                    reduce using rule 11 (statement)
    '}'                    reduce using rule 11 (statement)
    '('                    reduce using rule 11 (statement)
    '!'                    reduce using rule 11 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 11 (statement)


State 322

   28 expression_statement: expression • ';'

    ';'  shift, and go to state 342


State 323

   12 statement: variable_declaration_statement •

    error                  reduce using rule 12 (statement)
    C_INTEGER              reduce using rule 12 (statement)
    C_FLOAT                reduce using rule 12 (statement)
    C_NIL                  reduce using rule 12 (statement)
    SIMPLE_TYPE            reduce using rule 12 (statement)
    IDENTIFIER             reduce using rule 12 (statement)
    RW_FOR                 reduce using rule 12 (statement)
    RW_RETURN              reduce using rule 12 (statement)
    RW_IF                  reduce using rule 12 (statement)
    RW_ELSE                reduce using rule 12 (statement)
    IO_READ                reduce using rule 12 (statement)
    IO_WRITE               reduce using rule 12 (statement)
    UNARY_LIST_OP          reduce using rule 12 (statement)
    '{'                    reduce using rule 12 (statement)
    '}'                    reduce using rule 12 (statement)
    '('                    reduce using rule 12 (statement)
    '!'                    reduce using rule 12 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 12 (statement)


State 324

   31 input_statement: IO_READ '(' IDENTIFIER ')' ';' •

    error                  reduce using rule 31 (input_statement)
    C_INTEGER              reduce using rule 31 (input_statement)
    C_FLOAT                reduce using rule 31 (input_statement)
    C_NIL                  reduce using rule 31 (input_statement)
    SIMPLE_TYPE            reduce using rule 31 (input_statement)
    IDENTIFIER             reduce using rule 31 (input_statement)
    RW_FOR                 reduce using rule 31 (input_statement)
    RW_RETURN              reduce using rule 31 (input_statement)
    RW_IF                  reduce using rule 31 (input_statement)
    IO_READ                reduce using rule 31 (input_statement)
    IO_WRITE               reduce using rule 31 (input_statement)
    UNARY_LIST_OP          reduce using rule 31 (input_statement)
    '{'                    reduce using rule 31 (input_statement)
    '}'                    reduce using rule 31 (input_statement)
    '('                    reduce using rule 31 (input_statement)
    '!'                    reduce using rule 31 (input_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 31 (input_statement)


State 325

   33 output_statement: IO_WRITE '(' LIT_STRING ')' ';' •

    error                  reduce using rule 33 (output_statement)
    C_INTEGER              reduce using rule 33 (output_statement)
    C_FLOAT                reduce using rule 33 (output_statement)
    C_NIL                  reduce using rule 33 (output_statement)
    SIMPLE_TYPE            reduce using rule 33 (output_statement)
    IDENTIFIER             reduce using rule 33 (output_statement)
    RW_FOR                 reduce using rule 33 (output_statement)
    RW_RETURN              reduce using rule 33 (output_statement)
    RW_IF                  reduce using rule 33 (output_statement)
    IO_READ                reduce using rule 33 (output_statement)
    IO_WRITE               reduce using rule 33 (output_statement)
    UNARY_LIST_OP          reduce using rule 33 (output_statement)
    '{'                    reduce using rule 33 (output_statement)
    '}'                    reduce using rule 33 (output_statement)
    '('                    reduce using rule 33 (output_statement)
    '!'                    reduce using rule 33 (output_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 33 (output_statement)


State 326

   32 output_statement: IO_WRITE '(' expression ')' ';' •

    error                  reduce using rule 32 (output_statement)
    C_INTEGER              reduce using rule 32 (output_statement)
    C_FLOAT                reduce using rule 32 (output_statement)
    C_NIL                  reduce using rule 32 (output_statement)
    SIMPLE_TYPE            reduce using rule 32 (output_statement)
    IDENTIFIER             reduce using rule 32 (output_statement)
    RW_FOR                 reduce using rule 32 (output_statement)
    RW_RETURN              reduce using rule 32 (output_statement)
    RW_IF                  reduce using rule 32 (output_statement)
    IO_READ                reduce using rule 32 (output_statement)
    IO_WRITE               reduce using rule 32 (output_statement)
    UNARY_LIST_OP          reduce using rule 32 (output_statement)
    '{'                    reduce using rule 32 (output_statement)
    '}'                    reduce using rule 32 (output_statement)
    '('                    reduce using rule 32 (output_statement)
    '!'                    reduce using rule 32 (output_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 32 (output_statement)


State 327

   25 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative • ';' expression_optative ')' statement

    ';'  shift, and go to state 343


State 328

   26 if_else_statement: RW_IF '(' expression ')' statement •
   27                  | RW_IF '(' expression ')' statement • RW_ELSE statement

    RW_ELSE  shift, and go to state 344

    $end         reduce using rule 26 (if_else_statement)
    SIMPLE_TYPE  reduce using rule 26 (if_else_statement)


State 329

   31 input_statement: IO_READ '(' IDENTIFIER ')' ';' •

    $end         reduce using rule 31 (input_statement)
    SIMPLE_TYPE  reduce using rule 31 (input_statement)
    RW_ELSE      reduce using rule 31 (input_statement)


State 330

   33 output_statement: IO_WRITE '(' LIT_STRING ')' ';' •

    $end         reduce using rule 33 (output_statement)
    SIMPLE_TYPE  reduce using rule 33 (output_statement)
    RW_ELSE      reduce using rule 33 (output_statement)


State 331

   32 output_statement: IO_WRITE '(' expression ')' ';' •

    $end         reduce using rule 32 (output_statement)
    SIMPLE_TYPE  reduce using rule 32 (output_statement)
    RW_ELSE      reduce using rule 32 (output_statement)


State 332

   25 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' • expression_optative ')' statement

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    IDENTIFIER             shift, and go to state 154
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    ')'  reduce using rule 44 (expression_optative)

    expression                 go to state 205
    function_call_expression   go to state 159
    expression_optative        go to state 345
    or_expression              go to state 160
    and_expression             go to state 161
    equality_expression        go to state 162
    relational_expression      go to state 163
    list_expression            go to state 164
    addition_expression        go to state 165
    multiplication_expression  go to state 166
    simple_value               go to state 167
    constant                   go to state 168


State 333

   69 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE • IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 346


State 334

   68 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 347


State 335

   25 for_statement: RW_FOR '(' • expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    IDENTIFIER             shift, and go to state 32
    UNARY_LIST_OP          shift, and go to state 38
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    ';'  reduce using rule 44 (expression_optative)

    expression                 go to state 96
    function_call_expression   go to state 53
    expression_optative        go to state 348
    or_expression              go to state 54
    and_expression             go to state 55
    equality_expression        go to state 56
    relational_expression      go to state 57
    list_expression            go to state 58
    addition_expression        go to state 59
    multiplication_expression  go to state 60
    simple_value               go to state 61
    constant                   go to state 63


State 336

   34 return_statement: RW_RETURN expression • ';'

    ';'  shift, and go to state 349


State 337

   26 if_else_statement: RW_IF '(' • expression ')' statement
   27                  | RW_IF '(' • expression ')' statement RW_ELSE statement

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    IDENTIFIER             shift, and go to state 154
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    expression                 go to state 350
    function_call_expression   go to state 159
    or_expression              go to state 160
    and_expression             go to state 161
    equality_expression        go to state 162
    relational_expression      go to state 163
    list_expression            go to state 164
    addition_expression        go to state 165
    multiplication_expression  go to state 166
    simple_value               go to state 167
    constant                   go to state 168


State 338

   31 input_statement: IO_READ '(' • IDENTIFIER ')' ';'

    IDENTIFIER  shift, and go to state 351


State 339

   32 output_statement: IO_WRITE '(' • expression ')' ';'
   33                 | IO_WRITE '(' • LIT_STRING ')' ';'

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    LIT_STRING             shift, and go to state 352
    IDENTIFIER             shift, and go to state 154
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    expression                 go to state 353
    function_call_expression   go to state 159
    or_expression              go to state 160
    and_expression             go to state 161
    equality_expression        go to state 162
    relational_expression      go to state 163
    list_expression            go to state 164
    addition_expression        go to state 165
    multiplication_expression  go to state 166
    simple_value               go to state 167
    constant                   go to state 168


State 340

    6 block: '{' statements • '}'
    7 statements: statements • statement

    error                  shift, and go to state 133
    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    SIMPLE_TYPE            shift, and go to state 134
    IDENTIFIER             shift, and go to state 32
    RW_FOR                 shift, and go to state 135
    RW_RETURN              shift, and go to state 136
    RW_IF                  shift, and go to state 137
    IO_READ                shift, and go to state 138
    IO_WRITE               shift, and go to state 139
    UNARY_LIST_OP          shift, and go to state 38
    '{'                    shift, and go to state 140
    '}'                    shift, and go to state 354
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    block                           go to state 141
    statement                       go to state 104
    for_statement                   go to state 142
    if_else_statement               go to state 143
    expression_statement            go to state 144
    io_statement                    go to state 145
    input_statement                 go to state 146
    output_statement                go to state 147
    return_statement                go to state 148
    expression                      go to state 149
    function_call_expression        go to state 53
    or_expression                   go to state 54
    and_expression                  go to state 55
    equality_expression             go to state 56
    relational_expression           go to state 57
    list_expression                 go to state 58
    addition_expression             go to state 59
    multiplication_expression       go to state 60
    simple_value                    go to state 61
    variable_declaration_statement  go to state 150
    constant                        go to state 63


State 341

   27 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE • statement

    error                  shift, and go to state 133
    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    SIMPLE_TYPE            shift, and go to state 134
    IDENTIFIER             shift, and go to state 32
    RW_FOR                 shift, and go to state 135
    RW_RETURN              shift, and go to state 136
    RW_IF                  shift, and go to state 137
    IO_READ                shift, and go to state 138
    IO_WRITE               shift, and go to state 139
    UNARY_LIST_OP          shift, and go to state 38
    '{'                    shift, and go to state 140
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    block                           go to state 141
    statement                       go to state 355
    for_statement                   go to state 142
    if_else_statement               go to state 143
    expression_statement            go to state 144
    io_statement                    go to state 145
    input_statement                 go to state 146
    output_statement                go to state 147
    return_statement                go to state 148
    expression                      go to state 149
    function_call_expression        go to state 53
    or_expression                   go to state 54
    and_expression                  go to state 55
    equality_expression             go to state 56
    relational_expression           go to state 57
    list_expression                 go to state 58
    addition_expression             go to state 59
    multiplication_expression       go to state 60
    simple_value                    go to state 61
    variable_declaration_statement  go to state 150
    constant                        go to state 63


State 342

   28 expression_statement: expression ';' •

    error                  reduce using rule 28 (expression_statement)
    C_INTEGER              reduce using rule 28 (expression_statement)
    C_FLOAT                reduce using rule 28 (expression_statement)
    C_NIL                  reduce using rule 28 (expression_statement)
    SIMPLE_TYPE            reduce using rule 28 (expression_statement)
    IDENTIFIER             reduce using rule 28 (expression_statement)
    RW_FOR                 reduce using rule 28 (expression_statement)
    RW_RETURN              reduce using rule 28 (expression_statement)
    RW_IF                  reduce using rule 28 (expression_statement)
    RW_ELSE                reduce using rule 28 (expression_statement)
    IO_READ                reduce using rule 28 (expression_statement)
    IO_WRITE               reduce using rule 28 (expression_statement)
    UNARY_LIST_OP          reduce using rule 28 (expression_statement)
    '{'                    reduce using rule 28 (expression_statement)
    '}'                    reduce using rule 28 (expression_statement)
    '('                    reduce using rule 28 (expression_statement)
    '!'                    reduce using rule 28 (expression_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 28 (expression_statement)


State 343

   25 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' • expression_optative ')' statement

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    IDENTIFIER             shift, and go to state 154
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    ')'  reduce using rule 44 (expression_optative)

    expression                 go to state 205
    function_call_expression   go to state 159
    expression_optative        go to state 356
    or_expression              go to state 160
    and_expression             go to state 161
    equality_expression        go to state 162
    relational_expression      go to state 163
    list_expression            go to state 164
    addition_expression        go to state 165
    multiplication_expression  go to state 166
    simple_value               go to state 167
    constant                   go to state 168


State 344

   27 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE • statement

    error                  shift, and go to state 187
    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    SIMPLE_TYPE            shift, and go to state 188
    IDENTIFIER             shift, and go to state 32
    RW_FOR                 shift, and go to state 189
    RW_RETURN              shift, and go to state 190
    RW_IF                  shift, and go to state 191
    IO_READ                shift, and go to state 192
    IO_WRITE               shift, and go to state 193
    UNARY_LIST_OP          shift, and go to state 38
    '{'                    shift, and go to state 194
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    block                           go to state 195
    statement                       go to state 357
    for_statement                   go to state 196
    if_else_statement               go to state 197
    expression_statement            go to state 198
    io_statement                    go to state 199
    input_statement                 go to state 200
    output_statement                go to state 201
    return_statement                go to state 202
    expression                      go to state 203
    function_call_expression        go to state 53
    or_expression                   go to state 54
    and_expression                  go to state 55
    equality_expression             go to state 56
    relational_expression           go to state 57
    list_expression                 go to state 58
    addition_expression             go to state 59
    multiplication_expression       go to state 60
    simple_value                    go to state 61
    variable_declaration_statement  go to state 204
    constant                        go to state 63


State 345

   25 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative • ')' statement

    ')'  shift, and go to state 358


State 346

   69 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 359


State 347

   68 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER ';' •

    error                  reduce using rule 68 (variable_declaration_statement)
    C_INTEGER              reduce using rule 68 (variable_declaration_statement)
    C_FLOAT                reduce using rule 68 (variable_declaration_statement)
    C_NIL                  reduce using rule 68 (variable_declaration_statement)
    SIMPLE_TYPE            reduce using rule 68 (variable_declaration_statement)
    IDENTIFIER             reduce using rule 68 (variable_declaration_statement)
    RW_FOR                 reduce using rule 68 (variable_declaration_statement)
    RW_RETURN              reduce using rule 68 (variable_declaration_statement)
    RW_IF                  reduce using rule 68 (variable_declaration_statement)
    RW_ELSE                reduce using rule 68 (variable_declaration_statement)
    IO_READ                reduce using rule 68 (variable_declaration_statement)
    IO_WRITE               reduce using rule 68 (variable_declaration_statement)
    UNARY_LIST_OP          reduce using rule 68 (variable_declaration_statement)
    '{'                    reduce using rule 68 (variable_declaration_statement)
    '}'                    reduce using rule 68 (variable_declaration_statement)
    '('                    reduce using rule 68 (variable_declaration_statement)
    '!'                    reduce using rule 68 (variable_declaration_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 68 (variable_declaration_statement)


State 348

   25 for_statement: RW_FOR '(' expression_optative • ';' or_expression_optative ';' expression_optative ')' statement

    ';'  shift, and go to state 360


State 349

   34 return_statement: RW_RETURN expression ';' •

    error                  reduce using rule 34 (return_statement)
    C_INTEGER              reduce using rule 34 (return_statement)
    C_FLOAT                reduce using rule 34 (return_statement)
    C_NIL                  reduce using rule 34 (return_statement)
    SIMPLE_TYPE            reduce using rule 34 (return_statement)
    IDENTIFIER             reduce using rule 34 (return_statement)
    RW_FOR                 reduce using rule 34 (return_statement)
    RW_RETURN              reduce using rule 34 (return_statement)
    RW_IF                  reduce using rule 34 (return_statement)
    RW_ELSE                reduce using rule 34 (return_statement)
    IO_READ                reduce using rule 34 (return_statement)
    IO_WRITE               reduce using rule 34 (return_statement)
    UNARY_LIST_OP          reduce using rule 34 (return_statement)
    '{'                    reduce using rule 34 (return_statement)
    '}'                    reduce using rule 34 (return_statement)
    '('                    reduce using rule 34 (return_statement)
    '!'                    reduce using rule 34 (return_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 34 (return_statement)


State 350

   26 if_else_statement: RW_IF '(' expression • ')' statement
   27                  | RW_IF '(' expression • ')' statement RW_ELSE statement

    ')'  shift, and go to state 361


State 351

   31 input_statement: IO_READ '(' IDENTIFIER • ')' ';'

    ')'  shift, and go to state 362


State 352

   33 output_statement: IO_WRITE '(' LIT_STRING • ')' ';'

    ')'  shift, and go to state 363


State 353

   32 output_statement: IO_WRITE '(' expression • ')' ';'

    ')'  shift, and go to state 364


State 354

    6 block: '{' statements '}' •

    error                  reduce using rule 6 (block)
    C_INTEGER              reduce using rule 6 (block)
    C_FLOAT                reduce using rule 6 (block)
    C_NIL                  reduce using rule 6 (block)
    SIMPLE_TYPE            reduce using rule 6 (block)
    IDENTIFIER             reduce using rule 6 (block)
    RW_FOR                 reduce using rule 6 (block)
    RW_RETURN              reduce using rule 6 (block)
    RW_IF                  reduce using rule 6 (block)
    RW_ELSE                reduce using rule 6 (block)
    IO_READ                reduce using rule 6 (block)
    IO_WRITE               reduce using rule 6 (block)
    UNARY_LIST_OP          reduce using rule 6 (block)
    '{'                    reduce using rule 6 (block)
    '}'                    reduce using rule 6 (block)
    '('                    reduce using rule 6 (block)
    '!'                    reduce using rule 6 (block)
    ARITMETIC_OP_ADDITIVE  reduce using rule 6 (block)


State 355

   27 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE statement •

    error                  reduce using rule 27 (if_else_statement)
    C_INTEGER              reduce using rule 27 (if_else_statement)
    C_FLOAT                reduce using rule 27 (if_else_statement)
    C_NIL                  reduce using rule 27 (if_else_statement)
    SIMPLE_TYPE            reduce using rule 27 (if_else_statement)
    IDENTIFIER             reduce using rule 27 (if_else_statement)
    RW_FOR                 reduce using rule 27 (if_else_statement)
    RW_RETURN              reduce using rule 27 (if_else_statement)
    RW_IF                  reduce using rule 27 (if_else_statement)
    IO_READ                reduce using rule 27 (if_else_statement)
    IO_WRITE               reduce using rule 27 (if_else_statement)
    UNARY_LIST_OP          reduce using rule 27 (if_else_statement)
    '{'                    reduce using rule 27 (if_else_statement)
    '}'                    reduce using rule 27 (if_else_statement)
    '('                    reduce using rule 27 (if_else_statement)
    '!'                    reduce using rule 27 (if_else_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 27 (if_else_statement)


State 356

   25 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative • ')' statement

    ')'  shift, and go to state 365


State 357

   27 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE statement •

    $end         reduce using rule 27 (if_else_statement)
    SIMPLE_TYPE  reduce using rule 27 (if_else_statement)
    RW_ELSE      reduce using rule 27 (if_else_statement)


State 358

   25 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' • statement

    error                  shift, and go to state 133
    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    SIMPLE_TYPE            shift, and go to state 134
    IDENTIFIER             shift, and go to state 32
    RW_FOR                 shift, and go to state 135
    RW_RETURN              shift, and go to state 136
    RW_IF                  shift, and go to state 137
    IO_READ                shift, and go to state 138
    IO_WRITE               shift, and go to state 139
    UNARY_LIST_OP          shift, and go to state 38
    '{'                    shift, and go to state 140
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    block                           go to state 141
    statement                       go to state 366
    for_statement                   go to state 142
    if_else_statement               go to state 143
    expression_statement            go to state 144
    io_statement                    go to state 145
    input_statement                 go to state 146
    output_statement                go to state 147
    return_statement                go to state 148
    expression                      go to state 149
    function_call_expression        go to state 53
    or_expression                   go to state 54
    and_expression                  go to state 55
    equality_expression             go to state 56
    relational_expression           go to state 57
    list_expression                 go to state 58
    addition_expression             go to state 59
    multiplication_expression       go to state 60
    simple_value                    go to state 61
    variable_declaration_statement  go to state 150
    constant                        go to state 63


State 359

   69 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER ';' •

    error                  reduce using rule 69 (variable_declaration_statement)
    C_INTEGER              reduce using rule 69 (variable_declaration_statement)
    C_FLOAT                reduce using rule 69 (variable_declaration_statement)
    C_NIL                  reduce using rule 69 (variable_declaration_statement)
    SIMPLE_TYPE            reduce using rule 69 (variable_declaration_statement)
    IDENTIFIER             reduce using rule 69 (variable_declaration_statement)
    RW_FOR                 reduce using rule 69 (variable_declaration_statement)
    RW_RETURN              reduce using rule 69 (variable_declaration_statement)
    RW_IF                  reduce using rule 69 (variable_declaration_statement)
    RW_ELSE                reduce using rule 69 (variable_declaration_statement)
    IO_READ                reduce using rule 69 (variable_declaration_statement)
    IO_WRITE               reduce using rule 69 (variable_declaration_statement)
    UNARY_LIST_OP          reduce using rule 69 (variable_declaration_statement)
    '{'                    reduce using rule 69 (variable_declaration_statement)
    '}'                    reduce using rule 69 (variable_declaration_statement)
    '('                    reduce using rule 69 (variable_declaration_statement)
    '!'                    reduce using rule 69 (variable_declaration_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 69 (variable_declaration_statement)


State 360

   25 for_statement: RW_FOR '(' expression_optative ';' • or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    IDENTIFIER             shift, and go to state 75
    UNARY_LIST_OP          shift, and go to state 38
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    ';'  reduce using rule 46 (or_expression_optative)

    or_expression_optative     go to state 367
    or_expression              go to state 122
    and_expression             go to state 55
    equality_expression        go to state 56
    relational_expression      go to state 57
    list_expression            go to state 58
    addition_expression        go to state 59
    multiplication_expression  go to state 60
    simple_value               go to state 61
    constant                   go to state 63


State 361

   26 if_else_statement: RW_IF '(' expression ')' • statement
   27                  | RW_IF '(' expression ')' • statement RW_ELSE statement

    error                  shift, and go to state 305
    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    SIMPLE_TYPE            shift, and go to state 306
    IDENTIFIER             shift, and go to state 32
    RW_FOR                 shift, and go to state 307
    RW_RETURN              shift, and go to state 308
    RW_IF                  shift, and go to state 309
    IO_READ                shift, and go to state 310
    IO_WRITE               shift, and go to state 311
    UNARY_LIST_OP          shift, and go to state 38
    '{'                    shift, and go to state 312
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    block                           go to state 313
    statement                       go to state 368
    for_statement                   go to state 315
    if_else_statement               go to state 316
    expression_statement            go to state 317
    io_statement                    go to state 318
    input_statement                 go to state 319
    output_statement                go to state 320
    return_statement                go to state 321
    expression                      go to state 322
    function_call_expression        go to state 53
    or_expression                   go to state 54
    and_expression                  go to state 55
    equality_expression             go to state 56
    relational_expression           go to state 57
    list_expression                 go to state 58
    addition_expression             go to state 59
    multiplication_expression       go to state 60
    simple_value                    go to state 61
    variable_declaration_statement  go to state 323
    constant                        go to state 63


State 362

   31 input_statement: IO_READ '(' IDENTIFIER ')' • ';'

    ';'  shift, and go to state 369


State 363

   33 output_statement: IO_WRITE '(' LIT_STRING ')' • ';'

    ';'  shift, and go to state 370


State 364

   32 output_statement: IO_WRITE '(' expression ')' • ';'

    ';'  shift, and go to state 371


State 365

   25 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' • statement

    error                  shift, and go to state 187
    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    SIMPLE_TYPE            shift, and go to state 188
    IDENTIFIER             shift, and go to state 32
    RW_FOR                 shift, and go to state 189
    RW_RETURN              shift, and go to state 190
    RW_IF                  shift, and go to state 191
    IO_READ                shift, and go to state 192
    IO_WRITE               shift, and go to state 193
    UNARY_LIST_OP          shift, and go to state 38
    '{'                    shift, and go to state 194
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    block                           go to state 195
    statement                       go to state 372
    for_statement                   go to state 196
    if_else_statement               go to state 197
    expression_statement            go to state 198
    io_statement                    go to state 199
    input_statement                 go to state 200
    output_statement                go to state 201
    return_statement                go to state 202
    expression                      go to state 203
    function_call_expression        go to state 53
    or_expression                   go to state 54
    and_expression                  go to state 55
    equality_expression             go to state 56
    relational_expression           go to state 57
    list_expression                 go to state 58
    addition_expression             go to state 59
    multiplication_expression       go to state 60
    simple_value                    go to state 61
    variable_declaration_statement  go to state 204
    constant                        go to state 63


State 366

   25 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement •

    error                  reduce using rule 25 (for_statement)
    C_INTEGER              reduce using rule 25 (for_statement)
    C_FLOAT                reduce using rule 25 (for_statement)
    C_NIL                  reduce using rule 25 (for_statement)
    SIMPLE_TYPE            reduce using rule 25 (for_statement)
    IDENTIFIER             reduce using rule 25 (for_statement)
    RW_FOR                 reduce using rule 25 (for_statement)
    RW_RETURN              reduce using rule 25 (for_statement)
    RW_IF                  reduce using rule 25 (for_statement)
    IO_READ                reduce using rule 25 (for_statement)
    IO_WRITE               reduce using rule 25 (for_statement)
    UNARY_LIST_OP          reduce using rule 25 (for_statement)
    '{'                    reduce using rule 25 (for_statement)
    '}'                    reduce using rule 25 (for_statement)
    '('                    reduce using rule 25 (for_statement)
    '!'                    reduce using rule 25 (for_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 25 (for_statement)


State 367

   25 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative • ';' expression_optative ')' statement

    ';'  shift, and go to state 373


State 368

   26 if_else_statement: RW_IF '(' expression ')' statement •
   27                  | RW_IF '(' expression ')' statement • RW_ELSE statement

    RW_ELSE  shift, and go to state 374

    error                  reduce using rule 26 (if_else_statement)
    C_INTEGER              reduce using rule 26 (if_else_statement)
    C_FLOAT                reduce using rule 26 (if_else_statement)
    C_NIL                  reduce using rule 26 (if_else_statement)
    SIMPLE_TYPE            reduce using rule 26 (if_else_statement)
    IDENTIFIER             reduce using rule 26 (if_else_statement)
    RW_FOR                 reduce using rule 26 (if_else_statement)
    RW_RETURN              reduce using rule 26 (if_else_statement)
    RW_IF                  reduce using rule 26 (if_else_statement)
    IO_READ                reduce using rule 26 (if_else_statement)
    IO_WRITE               reduce using rule 26 (if_else_statement)
    UNARY_LIST_OP          reduce using rule 26 (if_else_statement)
    '{'                    reduce using rule 26 (if_else_statement)
    '}'                    reduce using rule 26 (if_else_statement)
    '('                    reduce using rule 26 (if_else_statement)
    '!'                    reduce using rule 26 (if_else_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 26 (if_else_statement)


State 369

   31 input_statement: IO_READ '(' IDENTIFIER ')' ';' •

    error                  reduce using rule 31 (input_statement)
    C_INTEGER              reduce using rule 31 (input_statement)
    C_FLOAT                reduce using rule 31 (input_statement)
    C_NIL                  reduce using rule 31 (input_statement)
    SIMPLE_TYPE            reduce using rule 31 (input_statement)
    IDENTIFIER             reduce using rule 31 (input_statement)
    RW_FOR                 reduce using rule 31 (input_statement)
    RW_RETURN              reduce using rule 31 (input_statement)
    RW_IF                  reduce using rule 31 (input_statement)
    RW_ELSE                reduce using rule 31 (input_statement)
    IO_READ                reduce using rule 31 (input_statement)
    IO_WRITE               reduce using rule 31 (input_statement)
    UNARY_LIST_OP          reduce using rule 31 (input_statement)
    '{'                    reduce using rule 31 (input_statement)
    '}'                    reduce using rule 31 (input_statement)
    '('                    reduce using rule 31 (input_statement)
    '!'                    reduce using rule 31 (input_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 31 (input_statement)


State 370

   33 output_statement: IO_WRITE '(' LIT_STRING ')' ';' •

    error                  reduce using rule 33 (output_statement)
    C_INTEGER              reduce using rule 33 (output_statement)
    C_FLOAT                reduce using rule 33 (output_statement)
    C_NIL                  reduce using rule 33 (output_statement)
    SIMPLE_TYPE            reduce using rule 33 (output_statement)
    IDENTIFIER             reduce using rule 33 (output_statement)
    RW_FOR                 reduce using rule 33 (output_statement)
    RW_RETURN              reduce using rule 33 (output_statement)
    RW_IF                  reduce using rule 33 (output_statement)
    RW_ELSE                reduce using rule 33 (output_statement)
    IO_READ                reduce using rule 33 (output_statement)
    IO_WRITE               reduce using rule 33 (output_statement)
    UNARY_LIST_OP          reduce using rule 33 (output_statement)
    '{'                    reduce using rule 33 (output_statement)
    '}'                    reduce using rule 33 (output_statement)
    '('                    reduce using rule 33 (output_statement)
    '!'                    reduce using rule 33 (output_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 33 (output_statement)


State 371

   32 output_statement: IO_WRITE '(' expression ')' ';' •

    error                  reduce using rule 32 (output_statement)
    C_INTEGER              reduce using rule 32 (output_statement)
    C_FLOAT                reduce using rule 32 (output_statement)
    C_NIL                  reduce using rule 32 (output_statement)
    SIMPLE_TYPE            reduce using rule 32 (output_statement)
    IDENTIFIER             reduce using rule 32 (output_statement)
    RW_FOR                 reduce using rule 32 (output_statement)
    RW_RETURN              reduce using rule 32 (output_statement)
    RW_IF                  reduce using rule 32 (output_statement)
    RW_ELSE                reduce using rule 32 (output_statement)
    IO_READ                reduce using rule 32 (output_statement)
    IO_WRITE               reduce using rule 32 (output_statement)
    UNARY_LIST_OP          reduce using rule 32 (output_statement)
    '{'                    reduce using rule 32 (output_statement)
    '}'                    reduce using rule 32 (output_statement)
    '('                    reduce using rule 32 (output_statement)
    '!'                    reduce using rule 32 (output_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 32 (output_statement)


State 372

   25 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement •

    $end         reduce using rule 25 (for_statement)
    SIMPLE_TYPE  reduce using rule 25 (for_statement)
    RW_ELSE      reduce using rule 25 (for_statement)


State 373

   25 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' • expression_optative ')' statement

    C_INTEGER              shift, and go to state 151
    C_FLOAT                shift, and go to state 152
    C_NIL                  shift, and go to state 153
    IDENTIFIER             shift, and go to state 154
    UNARY_LIST_OP          shift, and go to state 155
    '('                    shift, and go to state 156
    '!'                    shift, and go to state 157
    ARITMETIC_OP_ADDITIVE  shift, and go to state 158

    ')'  reduce using rule 44 (expression_optative)

    expression                 go to state 205
    function_call_expression   go to state 159
    expression_optative        go to state 375
    or_expression              go to state 160
    and_expression             go to state 161
    equality_expression        go to state 162
    relational_expression      go to state 163
    list_expression            go to state 164
    addition_expression        go to state 165
    multiplication_expression  go to state 166
    simple_value               go to state 167
    constant                   go to state 168


State 374

   27 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE • statement

    error                  shift, and go to state 305
    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    SIMPLE_TYPE            shift, and go to state 306
    IDENTIFIER             shift, and go to state 32
    RW_FOR                 shift, and go to state 307
    RW_RETURN              shift, and go to state 308
    RW_IF                  shift, and go to state 309
    IO_READ                shift, and go to state 310
    IO_WRITE               shift, and go to state 311
    UNARY_LIST_OP          shift, and go to state 38
    '{'                    shift, and go to state 312
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    block                           go to state 313
    statement                       go to state 376
    for_statement                   go to state 315
    if_else_statement               go to state 316
    expression_statement            go to state 317
    io_statement                    go to state 318
    input_statement                 go to state 319
    output_statement                go to state 320
    return_statement                go to state 321
    expression                      go to state 322
    function_call_expression        go to state 53
    or_expression                   go to state 54
    and_expression                  go to state 55
    equality_expression             go to state 56
    relational_expression           go to state 57
    list_expression                 go to state 58
    addition_expression             go to state 59
    multiplication_expression       go to state 60
    simple_value                    go to state 61
    variable_declaration_statement  go to state 323
    constant                        go to state 63


State 375

   25 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative • ')' statement

    ')'  shift, and go to state 377


State 376

   27 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE statement •

    error                  reduce using rule 27 (if_else_statement)
    C_INTEGER              reduce using rule 27 (if_else_statement)
    C_FLOAT                reduce using rule 27 (if_else_statement)
    C_NIL                  reduce using rule 27 (if_else_statement)
    SIMPLE_TYPE            reduce using rule 27 (if_else_statement)
    IDENTIFIER             reduce using rule 27 (if_else_statement)
    RW_FOR                 reduce using rule 27 (if_else_statement)
    RW_RETURN              reduce using rule 27 (if_else_statement)
    RW_IF                  reduce using rule 27 (if_else_statement)
    RW_ELSE                reduce using rule 27 (if_else_statement)
    IO_READ                reduce using rule 27 (if_else_statement)
    IO_WRITE               reduce using rule 27 (if_else_statement)
    UNARY_LIST_OP          reduce using rule 27 (if_else_statement)
    '{'                    reduce using rule 27 (if_else_statement)
    '}'                    reduce using rule 27 (if_else_statement)
    '('                    reduce using rule 27 (if_else_statement)
    '!'                    reduce using rule 27 (if_else_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 27 (if_else_statement)


State 377

   25 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' • statement

    error                  shift, and go to state 305
    C_INTEGER              shift, and go to state 28
    C_FLOAT                shift, and go to state 29
    C_NIL                  shift, and go to state 30
    SIMPLE_TYPE            shift, and go to state 306
    IDENTIFIER             shift, and go to state 32
    RW_FOR                 shift, and go to state 307
    RW_RETURN              shift, and go to state 308
    RW_IF                  shift, and go to state 309
    IO_READ                shift, and go to state 310
    IO_WRITE               shift, and go to state 311
    UNARY_LIST_OP          shift, and go to state 38
    '{'                    shift, and go to state 312
    '('                    shift, and go to state 40
    '!'                    shift, and go to state 41
    ARITMETIC_OP_ADDITIVE  shift, and go to state 42

    block                           go to state 313
    statement                       go to state 378
    for_statement                   go to state 315
    if_else_statement               go to state 316
    expression_statement            go to state 317
    io_statement                    go to state 318
    input_statement                 go to state 319
    output_statement                go to state 320
    return_statement                go to state 321
    expression                      go to state 322
    function_call_expression        go to state 53
    or_expression                   go to state 54
    and_expression                  go to state 55
    equality_expression             go to state 56
    relational_expression           go to state 57
    list_expression                 go to state 58
    addition_expression             go to state 59
    multiplication_expression       go to state 60
    simple_value                    go to state 61
    variable_declaration_statement  go to state 323
    constant                        go to state 63


State 378

   25 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement •

    error                  reduce using rule 25 (for_statement)
    C_INTEGER              reduce using rule 25 (for_statement)
    C_FLOAT                reduce using rule 25 (for_statement)
    C_NIL                  reduce using rule 25 (for_statement)
    SIMPLE_TYPE            reduce using rule 25 (for_statement)
    IDENTIFIER             reduce using rule 25 (for_statement)
    RW_FOR                 reduce using rule 25 (for_statement)
    RW_RETURN              reduce using rule 25 (for_statement)
    RW_IF                  reduce using rule 25 (for_statement)
    RW_ELSE                reduce using rule 25 (for_statement)
    IO_READ                reduce using rule 25 (for_statement)
    IO_WRITE               reduce using rule 25 (for_statement)
    UNARY_LIST_OP          reduce using rule 25 (for_statement)
    '{'                    reduce using rule 25 (for_statement)
    '}'                    reduce using rule 25 (for_statement)
    '('                    reduce using rule 25 (for_statement)
    '!'                    reduce using rule 25 (for_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 25 (for_statement)
