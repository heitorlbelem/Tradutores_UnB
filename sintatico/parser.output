Grammar

    0 $accept: program $end

    1 program: declarations

    2 declarations: declarations declaration
    3             | declaration
    4             | error

    5 declaration: function_declaration_statement
    6            | variable_declaration_statement

    7 block: '{' statements '}'

    8 statements: statements statement
    9           | statement

   10 statement: expression_statement
   11          | io_statement
   12          | return_statement
   13          | variable_declaration_statement
   14          | for_statement
   15          | if_else_statement
   16          | block
   17          | error

   18 function_declaration_statement: SIMPLE_TYPE IDENTIFIER '(' parameters_optative ')' statement
   19                               | SIMPLE_TYPE LIST_TYPE IDENTIFIER '(' parameters_optative ')' statement

   20 parameters_optative: %empty
   21                    | parameters

   22 parameters: parameters ',' parameter
   23           | parameter

   24 parameter: SIMPLE_TYPE IDENTIFIER
   25          | SIMPLE_TYPE LIST_TYPE IDENTIFIER

   26 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement

   27 if_else_statement: RW_IF '(' expression ')' statement
   28                  | RW_IF '(' expression ')' statement RW_ELSE statement

   29 expression_statement: expression ';'

   30 io_statement: input_statement
   31             | output_statement

   32 input_statement: IO_READ '(' IDENTIFIER ')' ';'

   33 output_statement: IO_WRITE '(' expression ')' ';'
   34                 | IO_WRITE '(' LIT_STRING ')' ';'

   35 return_statement: RW_RETURN expression ';'

   36 expression: IDENTIFIER '=' expression
   37           | or_expression
   38           | function_call_expression

   39 function_call_expression: IDENTIFIER '(' function_arguments_optative ')'

   40 function_arguments_optative: %empty
   41                            | function_arguments

   42 function_arguments: function_arguments ',' function_argument
   43                   | function_argument

   44 function_argument: expression

   45 expression_optative: %empty
   46                    | expression

   47 or_expression_optative: %empty
   48                       | or_expression

   49 or_expression: or_expression LOGICAL_OP_OR and_expression
   50              | and_expression

   51 and_expression: and_expression LOGICAL_OP_AND equality_expression
   52               | equality_expression

   53 equality_expression: equality_expression EQUALITY_OP relational_expression
   54                    | relational_expression

   55 relational_expression: relational_expression RELATIONAL_OP list_expression
   56                      | list_expression

   57 list_expression: list_expression BINARY_LIST_OP addition_expression
   58                | addition_expression

   59 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE multiplication_expression
   60                    | multiplication_expression

   61 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE simple_value
   62                          | simple_value

   63 simple_value: constant
   64             | IDENTIFIER
   65             | ARITMETIC_OP_ADDITIVE simple_value
   66             | '!' simple_value
   67             | UNARY_LIST_OP simple_value
   68             | '(' expression ')'

   69 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER ';'
   70                               | SIMPLE_TYPE LIST_TYPE IDENTIFIER ';'

   71 constant: C_INTEGER
   72         | C_FLOAT
   73         | C_NIL


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 66
    '(' (40) 18 19 26 27 28 32 33 34 39 68
    ')' (41) 18 19 26 27 28 32 33 34 39 68
    ',' (44) 22 42
    ';' (59) 26 29 32 33 34 35 69 70
    '=' (61) 36
    '{' (123) 7
    '}' (125) 7
    error (256) 4 17
    C_INTEGER <token> (258) 71
    C_FLOAT <token> (259) 72
    C_NIL <token> (260) 73
    LIT_STRING <token> (261) 34
    SIMPLE_TYPE <token> (262) 18 19 24 25 69 70
    LIST_TYPE <token> (263) 19 25 70
    IDENTIFIER <token> (264) 18 19 24 25 32 36 39 64 69 70
    RW_FOR <token> (265) 26
    RW_RETURN <token> (266) 35
    RW_IF <token> (267) 27 28
    RW_ELSE <token> (268) 28
    IO_READ <token> (269) 32
    IO_WRITE <token> (270) 33 34
    BINARY_LIST_OP <token> (271) 57
    UNARY_LIST_OP <token> (272) 67
    ARITMETIC_OP_ADDITIVE <token> (273) 59 65
    ARITMETIC_OP_MULTIPLICATIVE <token> (274) 61
    RELATIONAL_OP <token> (275) 55
    EQUALITY_OP <token> (276) 53
    LOGICAL_OP_OR <token> (277) 49
    LOGICAL_OP_AND <token> (278) 51
    THEN (279)


Nonterminals, with rules where they appear

    $accept (33)
        on left: 0
    program <node> (34)
        on left: 1
        on right: 0
    declarations <node> (35)
        on left: 2 3 4
        on right: 1 2
    declaration <node> (36)
        on left: 5 6
        on right: 2 3
    block <node> (37)
        on left: 7
        on right: 16
    statements <node> (38)
        on left: 8 9
        on right: 7 8
    statement <node> (39)
        on left: 10 11 12 13 14 15 16 17
        on right: 8 9 18 19 26 27 28
    function_declaration_statement <node> (40)
        on left: 18 19
        on right: 5
    parameters_optative <node> (41)
        on left: 20 21
        on right: 18 19
    parameters <node> (42)
        on left: 22 23
        on right: 21 22
    parameter <node> (43)
        on left: 24 25
        on right: 22 23
    for_statement <node> (44)
        on left: 26
        on right: 14
    if_else_statement <node> (45)
        on left: 27 28
        on right: 15
    expression_statement <node> (46)
        on left: 29
        on right: 10
    io_statement <node> (47)
        on left: 30 31
        on right: 11
    input_statement <node> (48)
        on left: 32
        on right: 30
    output_statement <node> (49)
        on left: 33 34
        on right: 31
    return_statement <node> (50)
        on left: 35
        on right: 12
    expression <node> (51)
        on left: 36 37 38
        on right: 27 28 29 33 35 36 44 46 68
    function_call_expression <node> (52)
        on left: 39
        on right: 38
    function_arguments_optative <node> (53)
        on left: 40 41
        on right: 39
    function_arguments <node> (54)
        on left: 42 43
        on right: 41 42
    function_argument <node> (55)
        on left: 44
        on right: 42 43
    expression_optative <node> (56)
        on left: 45 46
        on right: 26
    or_expression_optative <node> (57)
        on left: 47 48
        on right: 26
    or_expression <node> (58)
        on left: 49 50
        on right: 37 48 49
    and_expression <node> (59)
        on left: 51 52
        on right: 49 50 51
    equality_expression <node> (60)
        on left: 53 54
        on right: 51 52 53
    relational_expression <node> (61)
        on left: 55 56
        on right: 53 54 55
    list_expression <node> (62)
        on left: 57 58
        on right: 55 56 57
    addition_expression <node> (63)
        on left: 59 60
        on right: 57 58 59
    multiplication_expression <node> (64)
        on left: 61 62
        on right: 59 60 61
    simple_value <node> (65)
        on left: 63 64 65 66 67 68
        on right: 61 62 65 66 67
    variable_declaration_statement <node> (66)
        on left: 69 70
        on right: 6 13
    constant <node> (67)
        on left: 71 72 73
        on right: 63


State 0

    0 $accept: • program $end

    error        shift, and go to state 1
    SIMPLE_TYPE  shift, and go to state 2

    program                         go to state 3
    declarations                    go to state 4
    declaration                     go to state 5
    function_declaration_statement  go to state 6
    variable_declaration_statement  go to state 7


State 1

    4 declarations: error •

    $end         reduce using rule 4 (declarations)
    SIMPLE_TYPE  reduce using rule 4 (declarations)


State 2

   18 function_declaration_statement: SIMPLE_TYPE • IDENTIFIER '(' parameters_optative ')' statement
   19                               | SIMPLE_TYPE • LIST_TYPE IDENTIFIER '(' parameters_optative ')' statement
   69 variable_declaration_statement: SIMPLE_TYPE • IDENTIFIER ';'
   70                               | SIMPLE_TYPE • LIST_TYPE IDENTIFIER ';'

    LIST_TYPE   shift, and go to state 8
    IDENTIFIER  shift, and go to state 9


State 3

    0 $accept: program • $end

    $end  shift, and go to state 10


State 4

    1 program: declarations •
    2 declarations: declarations • declaration

    SIMPLE_TYPE  shift, and go to state 2

    $end  reduce using rule 1 (program)

    declaration                     go to state 11
    function_declaration_statement  go to state 6
    variable_declaration_statement  go to state 7


State 5

    3 declarations: declaration •

    $end         reduce using rule 3 (declarations)
    SIMPLE_TYPE  reduce using rule 3 (declarations)


State 6

    5 declaration: function_declaration_statement •

    $end         reduce using rule 5 (declaration)
    SIMPLE_TYPE  reduce using rule 5 (declaration)


State 7

    6 declaration: variable_declaration_statement •

    $end         reduce using rule 6 (declaration)
    SIMPLE_TYPE  reduce using rule 6 (declaration)


State 8

   19 function_declaration_statement: SIMPLE_TYPE LIST_TYPE • IDENTIFIER '(' parameters_optative ')' statement
   70 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE • IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 12


State 9

   18 function_declaration_statement: SIMPLE_TYPE IDENTIFIER • '(' parameters_optative ')' statement
   69 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER • ';'

    '('  shift, and go to state 13
    ';'  shift, and go to state 14


State 10

    0 $accept: program $end •

    $default  accept


State 11

    2 declarations: declarations declaration •

    $end         reduce using rule 2 (declarations)
    SIMPLE_TYPE  reduce using rule 2 (declarations)


State 12

   19 function_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER • '(' parameters_optative ')' statement
   70 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER • ';'

    '('  shift, and go to state 15
    ';'  shift, and go to state 16


State 13

   18 function_declaration_statement: SIMPLE_TYPE IDENTIFIER '(' • parameters_optative ')' statement

    SIMPLE_TYPE  shift, and go to state 17

    ')'  reduce using rule 20 (parameters_optative)

    parameters_optative  go to state 18
    parameters           go to state 19
    parameter            go to state 20


State 14

   69 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER ';' •

    $end         reduce using rule 69 (variable_declaration_statement)
    SIMPLE_TYPE  reduce using rule 69 (variable_declaration_statement)


State 15

   19 function_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER '(' • parameters_optative ')' statement

    SIMPLE_TYPE  shift, and go to state 17

    ')'  reduce using rule 20 (parameters_optative)

    parameters_optative  go to state 21
    parameters           go to state 19
    parameter            go to state 20


State 16

   70 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER ';' •

    $end         reduce using rule 70 (variable_declaration_statement)
    SIMPLE_TYPE  reduce using rule 70 (variable_declaration_statement)


State 17

   24 parameter: SIMPLE_TYPE • IDENTIFIER
   25          | SIMPLE_TYPE • LIST_TYPE IDENTIFIER

    LIST_TYPE   shift, and go to state 22
    IDENTIFIER  shift, and go to state 23


State 18

   18 function_declaration_statement: SIMPLE_TYPE IDENTIFIER '(' parameters_optative • ')' statement

    ')'  shift, and go to state 24


State 19

   21 parameters_optative: parameters •
   22 parameters: parameters • ',' parameter

    ','  shift, and go to state 25

    ')'  reduce using rule 21 (parameters_optative)


State 20

   23 parameters: parameter •

    ')'  reduce using rule 23 (parameters)
    ','  reduce using rule 23 (parameters)


State 21

   19 function_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER '(' parameters_optative • ')' statement

    ')'  shift, and go to state 26


State 22

   25 parameter: SIMPLE_TYPE LIST_TYPE • IDENTIFIER

    IDENTIFIER  shift, and go to state 27


State 23

   24 parameter: SIMPLE_TYPE IDENTIFIER •

    ')'  reduce using rule 24 (parameter)
    ','  reduce using rule 24 (parameter)


State 24

   18 function_declaration_statement: SIMPLE_TYPE IDENTIFIER '(' parameters_optative ')' • statement

    error                  shift, and go to state 28
    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    SIMPLE_TYPE            shift, and go to state 32
    IDENTIFIER             shift, and go to state 33
    RW_FOR                 shift, and go to state 34
    RW_RETURN              shift, and go to state 35
    RW_IF                  shift, and go to state 36
    IO_READ                shift, and go to state 37
    IO_WRITE               shift, and go to state 38
    UNARY_LIST_OP          shift, and go to state 39
    '{'                    shift, and go to state 40
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    block                           go to state 44
    statement                       go to state 45
    for_statement                   go to state 46
    if_else_statement               go to state 47
    expression_statement            go to state 48
    io_statement                    go to state 49
    input_statement                 go to state 50
    output_statement                go to state 51
    return_statement                go to state 52
    expression                      go to state 53
    function_call_expression        go to state 54
    or_expression                   go to state 55
    and_expression                  go to state 56
    equality_expression             go to state 57
    relational_expression           go to state 58
    list_expression                 go to state 59
    addition_expression             go to state 60
    multiplication_expression       go to state 61
    simple_value                    go to state 62
    variable_declaration_statement  go to state 63
    constant                        go to state 64


State 25

   22 parameters: parameters ',' • parameter

    SIMPLE_TYPE  shift, and go to state 17

    parameter  go to state 65


State 26

   19 function_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER '(' parameters_optative ')' • statement

    error                  shift, and go to state 28
    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    SIMPLE_TYPE            shift, and go to state 32
    IDENTIFIER             shift, and go to state 33
    RW_FOR                 shift, and go to state 34
    RW_RETURN              shift, and go to state 35
    RW_IF                  shift, and go to state 36
    IO_READ                shift, and go to state 37
    IO_WRITE               shift, and go to state 38
    UNARY_LIST_OP          shift, and go to state 39
    '{'                    shift, and go to state 40
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    block                           go to state 44
    statement                       go to state 66
    for_statement                   go to state 46
    if_else_statement               go to state 47
    expression_statement            go to state 48
    io_statement                    go to state 49
    input_statement                 go to state 50
    output_statement                go to state 51
    return_statement                go to state 52
    expression                      go to state 53
    function_call_expression        go to state 54
    or_expression                   go to state 55
    and_expression                  go to state 56
    equality_expression             go to state 57
    relational_expression           go to state 58
    list_expression                 go to state 59
    addition_expression             go to state 60
    multiplication_expression       go to state 61
    simple_value                    go to state 62
    variable_declaration_statement  go to state 63
    constant                        go to state 64


State 27

   25 parameter: SIMPLE_TYPE LIST_TYPE IDENTIFIER •

    ')'  reduce using rule 25 (parameter)
    ','  reduce using rule 25 (parameter)


State 28

   17 statement: error •

    $end         reduce using rule 17 (statement)
    SIMPLE_TYPE  reduce using rule 17 (statement)


State 29

   71 constant: C_INTEGER •

    BINARY_LIST_OP               reduce using rule 71 (constant)
    ';'                          reduce using rule 71 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 71 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 71 (constant)
    RELATIONAL_OP                reduce using rule 71 (constant)
    EQUALITY_OP                  reduce using rule 71 (constant)
    LOGICAL_OP_OR                reduce using rule 71 (constant)
    LOGICAL_OP_AND               reduce using rule 71 (constant)


State 30

   72 constant: C_FLOAT •

    BINARY_LIST_OP               reduce using rule 72 (constant)
    ';'                          reduce using rule 72 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 72 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 72 (constant)
    RELATIONAL_OP                reduce using rule 72 (constant)
    EQUALITY_OP                  reduce using rule 72 (constant)
    LOGICAL_OP_OR                reduce using rule 72 (constant)
    LOGICAL_OP_AND               reduce using rule 72 (constant)


State 31

   73 constant: C_NIL •

    BINARY_LIST_OP               reduce using rule 73 (constant)
    ';'                          reduce using rule 73 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 73 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 73 (constant)
    RELATIONAL_OP                reduce using rule 73 (constant)
    EQUALITY_OP                  reduce using rule 73 (constant)
    LOGICAL_OP_OR                reduce using rule 73 (constant)
    LOGICAL_OP_AND               reduce using rule 73 (constant)


State 32

   69 variable_declaration_statement: SIMPLE_TYPE • IDENTIFIER ';'
   70                               | SIMPLE_TYPE • LIST_TYPE IDENTIFIER ';'

    LIST_TYPE   shift, and go to state 67
    IDENTIFIER  shift, and go to state 68


State 33

   36 expression: IDENTIFIER • '=' expression
   39 function_call_expression: IDENTIFIER • '(' function_arguments_optative ')'
   64 simple_value: IDENTIFIER •

    '('  shift, and go to state 69
    '='  shift, and go to state 70

    BINARY_LIST_OP               reduce using rule 64 (simple_value)
    ';'                          reduce using rule 64 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 64 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 64 (simple_value)
    RELATIONAL_OP                reduce using rule 64 (simple_value)
    EQUALITY_OP                  reduce using rule 64 (simple_value)
    LOGICAL_OP_OR                reduce using rule 64 (simple_value)
    LOGICAL_OP_AND               reduce using rule 64 (simple_value)


State 34

   26 for_statement: RW_FOR • '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    '('  shift, and go to state 71


State 35

   35 return_statement: RW_RETURN • expression ';'

    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    IDENTIFIER             shift, and go to state 33
    UNARY_LIST_OP          shift, and go to state 39
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    expression                 go to state 72
    function_call_expression   go to state 54
    or_expression              go to state 55
    and_expression             go to state 56
    equality_expression        go to state 57
    relational_expression      go to state 58
    list_expression            go to state 59
    addition_expression        go to state 60
    multiplication_expression  go to state 61
    simple_value               go to state 62
    constant                   go to state 64


State 36

   27 if_else_statement: RW_IF • '(' expression ')' statement
   28                  | RW_IF • '(' expression ')' statement RW_ELSE statement

    '('  shift, and go to state 73


State 37

   32 input_statement: IO_READ • '(' IDENTIFIER ')' ';'

    '('  shift, and go to state 74


State 38

   33 output_statement: IO_WRITE • '(' expression ')' ';'
   34                 | IO_WRITE • '(' LIT_STRING ')' ';'

    '('  shift, and go to state 75


State 39

   67 simple_value: UNARY_LIST_OP • simple_value

    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    IDENTIFIER             shift, and go to state 76
    UNARY_LIST_OP          shift, and go to state 39
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    simple_value  go to state 77
    constant      go to state 64


State 40

    7 block: '{' • statements '}'

    error                  shift, and go to state 134
    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    SIMPLE_TYPE            shift, and go to state 135
    IDENTIFIER             shift, and go to state 33
    RW_FOR                 shift, and go to state 136
    RW_RETURN              shift, and go to state 137
    RW_IF                  shift, and go to state 138
    IO_READ                shift, and go to state 139
    IO_WRITE               shift, and go to state 140
    UNARY_LIST_OP          shift, and go to state 39
    '{'                    shift, and go to state 141
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    block                           go to state 142
    statements                      go to state 78
    statement                       go to state 79
    for_statement                   go to state 143
    if_else_statement               go to state 144
    expression_statement            go to state 145
    io_statement                    go to state 146
    input_statement                 go to state 147
    output_statement                go to state 148
    return_statement                go to state 149
    expression                      go to state 150
    function_call_expression        go to state 54
    or_expression                   go to state 55
    and_expression                  go to state 56
    equality_expression             go to state 57
    relational_expression           go to state 58
    list_expression                 go to state 59
    addition_expression             go to state 60
    multiplication_expression       go to state 61
    simple_value                    go to state 62
    variable_declaration_statement  go to state 151
    constant                        go to state 64


State 41

   68 simple_value: '(' • expression ')'

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    IDENTIFIER             shift, and go to state 155
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    expression                 go to state 80
    function_call_expression   go to state 160
    or_expression              go to state 161
    and_expression             go to state 162
    equality_expression        go to state 163
    relational_expression      go to state 164
    list_expression            go to state 165
    addition_expression        go to state 166
    multiplication_expression  go to state 167
    simple_value               go to state 168
    constant                   go to state 169


State 42

   66 simple_value: '!' • simple_value

    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    IDENTIFIER             shift, and go to state 76
    UNARY_LIST_OP          shift, and go to state 39
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    simple_value  go to state 81
    constant      go to state 64


State 43

   65 simple_value: ARITMETIC_OP_ADDITIVE • simple_value

    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    IDENTIFIER             shift, and go to state 76
    UNARY_LIST_OP          shift, and go to state 39
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    simple_value  go to state 82
    constant      go to state 64


State 44

   16 statement: block •

    $end         reduce using rule 16 (statement)
    SIMPLE_TYPE  reduce using rule 16 (statement)


State 45

   18 function_declaration_statement: SIMPLE_TYPE IDENTIFIER '(' parameters_optative ')' statement •

    $end         reduce using rule 18 (function_declaration_statement)
    SIMPLE_TYPE  reduce using rule 18 (function_declaration_statement)


State 46

   14 statement: for_statement •

    $end         reduce using rule 14 (statement)
    SIMPLE_TYPE  reduce using rule 14 (statement)


State 47

   15 statement: if_else_statement •

    $end         reduce using rule 15 (statement)
    SIMPLE_TYPE  reduce using rule 15 (statement)


State 48

   10 statement: expression_statement •

    $end         reduce using rule 10 (statement)
    SIMPLE_TYPE  reduce using rule 10 (statement)


State 49

   11 statement: io_statement •

    $end         reduce using rule 11 (statement)
    SIMPLE_TYPE  reduce using rule 11 (statement)


State 50

   30 io_statement: input_statement •

    $end         reduce using rule 30 (io_statement)
    SIMPLE_TYPE  reduce using rule 30 (io_statement)


State 51

   31 io_statement: output_statement •

    $end         reduce using rule 31 (io_statement)
    SIMPLE_TYPE  reduce using rule 31 (io_statement)


State 52

   12 statement: return_statement •

    $end         reduce using rule 12 (statement)
    SIMPLE_TYPE  reduce using rule 12 (statement)


State 53

   29 expression_statement: expression • ';'

    ';'  shift, and go to state 83


State 54

   38 expression: function_call_expression •

    ';'  reduce using rule 38 (expression)


State 55

   37 expression: or_expression •
   49 or_expression: or_expression • LOGICAL_OP_OR and_expression

    LOGICAL_OP_OR  shift, and go to state 84

    ';'  reduce using rule 37 (expression)


State 56

   50 or_expression: and_expression •
   51 and_expression: and_expression • LOGICAL_OP_AND equality_expression

    LOGICAL_OP_AND  shift, and go to state 85

    ';'            reduce using rule 50 (or_expression)
    LOGICAL_OP_OR  reduce using rule 50 (or_expression)


State 57

   52 and_expression: equality_expression •
   53 equality_expression: equality_expression • EQUALITY_OP relational_expression

    EQUALITY_OP  shift, and go to state 86

    ';'             reduce using rule 52 (and_expression)
    LOGICAL_OP_OR   reduce using rule 52 (and_expression)
    LOGICAL_OP_AND  reduce using rule 52 (and_expression)


State 58

   54 equality_expression: relational_expression •
   55 relational_expression: relational_expression • RELATIONAL_OP list_expression

    RELATIONAL_OP  shift, and go to state 87

    ';'             reduce using rule 54 (equality_expression)
    EQUALITY_OP     reduce using rule 54 (equality_expression)
    LOGICAL_OP_OR   reduce using rule 54 (equality_expression)
    LOGICAL_OP_AND  reduce using rule 54 (equality_expression)


State 59

   56 relational_expression: list_expression •
   57 list_expression: list_expression • BINARY_LIST_OP addition_expression

    BINARY_LIST_OP  shift, and go to state 88

    ';'             reduce using rule 56 (relational_expression)
    RELATIONAL_OP   reduce using rule 56 (relational_expression)
    EQUALITY_OP     reduce using rule 56 (relational_expression)
    LOGICAL_OP_OR   reduce using rule 56 (relational_expression)
    LOGICAL_OP_AND  reduce using rule 56 (relational_expression)


State 60

   58 list_expression: addition_expression •
   59 addition_expression: addition_expression • ARITMETIC_OP_ADDITIVE multiplication_expression

    ARITMETIC_OP_ADDITIVE  shift, and go to state 89

    BINARY_LIST_OP  reduce using rule 58 (list_expression)
    ';'             reduce using rule 58 (list_expression)
    RELATIONAL_OP   reduce using rule 58 (list_expression)
    EQUALITY_OP     reduce using rule 58 (list_expression)
    LOGICAL_OP_OR   reduce using rule 58 (list_expression)
    LOGICAL_OP_AND  reduce using rule 58 (list_expression)


State 61

   60 addition_expression: multiplication_expression •
   61 multiplication_expression: multiplication_expression • ARITMETIC_OP_MULTIPLICATIVE simple_value

    ARITMETIC_OP_MULTIPLICATIVE  shift, and go to state 90

    BINARY_LIST_OP         reduce using rule 60 (addition_expression)
    ';'                    reduce using rule 60 (addition_expression)
    ARITMETIC_OP_ADDITIVE  reduce using rule 60 (addition_expression)
    RELATIONAL_OP          reduce using rule 60 (addition_expression)
    EQUALITY_OP            reduce using rule 60 (addition_expression)
    LOGICAL_OP_OR          reduce using rule 60 (addition_expression)
    LOGICAL_OP_AND         reduce using rule 60 (addition_expression)


State 62

   62 multiplication_expression: simple_value •

    BINARY_LIST_OP               reduce using rule 62 (multiplication_expression)
    ';'                          reduce using rule 62 (multiplication_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 62 (multiplication_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 62 (multiplication_expression)
    RELATIONAL_OP                reduce using rule 62 (multiplication_expression)
    EQUALITY_OP                  reduce using rule 62 (multiplication_expression)
    LOGICAL_OP_OR                reduce using rule 62 (multiplication_expression)
    LOGICAL_OP_AND               reduce using rule 62 (multiplication_expression)


State 63

   13 statement: variable_declaration_statement •

    $end         reduce using rule 13 (statement)
    SIMPLE_TYPE  reduce using rule 13 (statement)


State 64

   63 simple_value: constant •

    BINARY_LIST_OP               reduce using rule 63 (simple_value)
    ';'                          reduce using rule 63 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 63 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 63 (simple_value)
    RELATIONAL_OP                reduce using rule 63 (simple_value)
    EQUALITY_OP                  reduce using rule 63 (simple_value)
    LOGICAL_OP_OR                reduce using rule 63 (simple_value)
    LOGICAL_OP_AND               reduce using rule 63 (simple_value)


State 65

   22 parameters: parameters ',' parameter •

    ')'  reduce using rule 22 (parameters)
    ','  reduce using rule 22 (parameters)


State 66

   19 function_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER '(' parameters_optative ')' statement •

    $end         reduce using rule 19 (function_declaration_statement)
    SIMPLE_TYPE  reduce using rule 19 (function_declaration_statement)


State 67

   70 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE • IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 91


State 68

   69 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 14


State 69

   39 function_call_expression: IDENTIFIER '(' • function_arguments_optative ')'

    C_INTEGER              shift, and go to state 170
    C_FLOAT                shift, and go to state 171
    C_NIL                  shift, and go to state 172
    IDENTIFIER             shift, and go to state 173
    UNARY_LIST_OP          shift, and go to state 174
    '('                    shift, and go to state 175
    '!'                    shift, and go to state 176
    ARITMETIC_OP_ADDITIVE  shift, and go to state 177

    ')'  reduce using rule 40 (function_arguments_optative)

    expression                   go to state 92
    function_call_expression     go to state 178
    function_arguments_optative  go to state 93
    function_arguments           go to state 94
    function_argument            go to state 95
    or_expression                go to state 179
    and_expression               go to state 180
    equality_expression          go to state 181
    relational_expression        go to state 182
    list_expression              go to state 183
    addition_expression          go to state 184
    multiplication_expression    go to state 185
    simple_value                 go to state 186
    constant                     go to state 187


State 70

   36 expression: IDENTIFIER '=' • expression

    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    IDENTIFIER             shift, and go to state 33
    UNARY_LIST_OP          shift, and go to state 39
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    expression                 go to state 96
    function_call_expression   go to state 54
    or_expression              go to state 55
    and_expression             go to state 56
    equality_expression        go to state 57
    relational_expression      go to state 58
    list_expression            go to state 59
    addition_expression        go to state 60
    multiplication_expression  go to state 61
    simple_value               go to state 62
    constant                   go to state 64


State 71

   26 for_statement: RW_FOR '(' • expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    IDENTIFIER             shift, and go to state 33
    UNARY_LIST_OP          shift, and go to state 39
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    ';'  reduce using rule 45 (expression_optative)

    expression                 go to state 97
    function_call_expression   go to state 54
    expression_optative        go to state 98
    or_expression              go to state 55
    and_expression             go to state 56
    equality_expression        go to state 57
    relational_expression      go to state 58
    list_expression            go to state 59
    addition_expression        go to state 60
    multiplication_expression  go to state 61
    simple_value               go to state 62
    constant                   go to state 64


State 72

   35 return_statement: RW_RETURN expression • ';'

    ';'  shift, and go to state 99


State 73

   27 if_else_statement: RW_IF '(' • expression ')' statement
   28                  | RW_IF '(' • expression ')' statement RW_ELSE statement

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    IDENTIFIER             shift, and go to state 155
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    expression                 go to state 100
    function_call_expression   go to state 160
    or_expression              go to state 161
    and_expression             go to state 162
    equality_expression        go to state 163
    relational_expression      go to state 164
    list_expression            go to state 165
    addition_expression        go to state 166
    multiplication_expression  go to state 167
    simple_value               go to state 168
    constant                   go to state 169


State 74

   32 input_statement: IO_READ '(' • IDENTIFIER ')' ';'

    IDENTIFIER  shift, and go to state 101


State 75

   33 output_statement: IO_WRITE '(' • expression ')' ';'
   34                 | IO_WRITE '(' • LIT_STRING ')' ';'

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    LIT_STRING             shift, and go to state 102
    IDENTIFIER             shift, and go to state 155
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    expression                 go to state 103
    function_call_expression   go to state 160
    or_expression              go to state 161
    and_expression             go to state 162
    equality_expression        go to state 163
    relational_expression      go to state 164
    list_expression            go to state 165
    addition_expression        go to state 166
    multiplication_expression  go to state 167
    simple_value               go to state 168
    constant                   go to state 169


State 76

   64 simple_value: IDENTIFIER •

    BINARY_LIST_OP               reduce using rule 64 (simple_value)
    ';'                          reduce using rule 64 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 64 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 64 (simple_value)
    RELATIONAL_OP                reduce using rule 64 (simple_value)
    EQUALITY_OP                  reduce using rule 64 (simple_value)
    LOGICAL_OP_OR                reduce using rule 64 (simple_value)
    LOGICAL_OP_AND               reduce using rule 64 (simple_value)


State 77

   67 simple_value: UNARY_LIST_OP simple_value •

    BINARY_LIST_OP               reduce using rule 67 (simple_value)
    ';'                          reduce using rule 67 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 67 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 67 (simple_value)
    RELATIONAL_OP                reduce using rule 67 (simple_value)
    EQUALITY_OP                  reduce using rule 67 (simple_value)
    LOGICAL_OP_OR                reduce using rule 67 (simple_value)
    LOGICAL_OP_AND               reduce using rule 67 (simple_value)


State 78

    7 block: '{' statements • '}'
    8 statements: statements • statement

    error                  shift, and go to state 134
    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    SIMPLE_TYPE            shift, and go to state 135
    IDENTIFIER             shift, and go to state 33
    RW_FOR                 shift, and go to state 136
    RW_RETURN              shift, and go to state 137
    RW_IF                  shift, and go to state 138
    IO_READ                shift, and go to state 139
    IO_WRITE               shift, and go to state 140
    UNARY_LIST_OP          shift, and go to state 39
    '{'                    shift, and go to state 141
    '}'                    shift, and go to state 104
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    block                           go to state 142
    statement                       go to state 105
    for_statement                   go to state 143
    if_else_statement               go to state 144
    expression_statement            go to state 145
    io_statement                    go to state 146
    input_statement                 go to state 147
    output_statement                go to state 148
    return_statement                go to state 149
    expression                      go to state 150
    function_call_expression        go to state 54
    or_expression                   go to state 55
    and_expression                  go to state 56
    equality_expression             go to state 57
    relational_expression           go to state 58
    list_expression                 go to state 59
    addition_expression             go to state 60
    multiplication_expression       go to state 61
    simple_value                    go to state 62
    variable_declaration_statement  go to state 151
    constant                        go to state 64


State 79

    9 statements: statement •

    error                  reduce using rule 9 (statements)
    C_INTEGER              reduce using rule 9 (statements)
    C_FLOAT                reduce using rule 9 (statements)
    C_NIL                  reduce using rule 9 (statements)
    SIMPLE_TYPE            reduce using rule 9 (statements)
    IDENTIFIER             reduce using rule 9 (statements)
    RW_FOR                 reduce using rule 9 (statements)
    RW_RETURN              reduce using rule 9 (statements)
    RW_IF                  reduce using rule 9 (statements)
    IO_READ                reduce using rule 9 (statements)
    IO_WRITE               reduce using rule 9 (statements)
    UNARY_LIST_OP          reduce using rule 9 (statements)
    '{'                    reduce using rule 9 (statements)
    '}'                    reduce using rule 9 (statements)
    '('                    reduce using rule 9 (statements)
    '!'                    reduce using rule 9 (statements)
    ARITMETIC_OP_ADDITIVE  reduce using rule 9 (statements)


State 80

   68 simple_value: '(' expression • ')'

    ')'  shift, and go to state 106


State 81

   66 simple_value: '!' simple_value •

    BINARY_LIST_OP               reduce using rule 66 (simple_value)
    ';'                          reduce using rule 66 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 66 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 66 (simple_value)
    RELATIONAL_OP                reduce using rule 66 (simple_value)
    EQUALITY_OP                  reduce using rule 66 (simple_value)
    LOGICAL_OP_OR                reduce using rule 66 (simple_value)
    LOGICAL_OP_AND               reduce using rule 66 (simple_value)


State 82

   65 simple_value: ARITMETIC_OP_ADDITIVE simple_value •

    BINARY_LIST_OP               reduce using rule 65 (simple_value)
    ';'                          reduce using rule 65 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 65 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 65 (simple_value)
    RELATIONAL_OP                reduce using rule 65 (simple_value)
    EQUALITY_OP                  reduce using rule 65 (simple_value)
    LOGICAL_OP_OR                reduce using rule 65 (simple_value)
    LOGICAL_OP_AND               reduce using rule 65 (simple_value)


State 83

   29 expression_statement: expression ';' •

    $end         reduce using rule 29 (expression_statement)
    SIMPLE_TYPE  reduce using rule 29 (expression_statement)


State 84

   49 or_expression: or_expression LOGICAL_OP_OR • and_expression

    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    IDENTIFIER             shift, and go to state 76
    UNARY_LIST_OP          shift, and go to state 39
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    and_expression             go to state 107
    equality_expression        go to state 57
    relational_expression      go to state 58
    list_expression            go to state 59
    addition_expression        go to state 60
    multiplication_expression  go to state 61
    simple_value               go to state 62
    constant                   go to state 64


State 85

   51 and_expression: and_expression LOGICAL_OP_AND • equality_expression

    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    IDENTIFIER             shift, and go to state 76
    UNARY_LIST_OP          shift, and go to state 39
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    equality_expression        go to state 108
    relational_expression      go to state 58
    list_expression            go to state 59
    addition_expression        go to state 60
    multiplication_expression  go to state 61
    simple_value               go to state 62
    constant                   go to state 64


State 86

   53 equality_expression: equality_expression EQUALITY_OP • relational_expression

    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    IDENTIFIER             shift, and go to state 76
    UNARY_LIST_OP          shift, and go to state 39
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    relational_expression      go to state 109
    list_expression            go to state 59
    addition_expression        go to state 60
    multiplication_expression  go to state 61
    simple_value               go to state 62
    constant                   go to state 64


State 87

   55 relational_expression: relational_expression RELATIONAL_OP • list_expression

    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    IDENTIFIER             shift, and go to state 76
    UNARY_LIST_OP          shift, and go to state 39
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    list_expression            go to state 110
    addition_expression        go to state 60
    multiplication_expression  go to state 61
    simple_value               go to state 62
    constant                   go to state 64


State 88

   57 list_expression: list_expression BINARY_LIST_OP • addition_expression

    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    IDENTIFIER             shift, and go to state 76
    UNARY_LIST_OP          shift, and go to state 39
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    addition_expression        go to state 111
    multiplication_expression  go to state 61
    simple_value               go to state 62
    constant                   go to state 64


State 89

   59 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE • multiplication_expression

    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    IDENTIFIER             shift, and go to state 76
    UNARY_LIST_OP          shift, and go to state 39
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    multiplication_expression  go to state 112
    simple_value               go to state 62
    constant                   go to state 64


State 90

   61 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE • simple_value

    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    IDENTIFIER             shift, and go to state 76
    UNARY_LIST_OP          shift, and go to state 39
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    simple_value  go to state 113
    constant      go to state 64


State 91

   70 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 16


State 92

   44 function_argument: expression •

    ')'  reduce using rule 44 (function_argument)
    ','  reduce using rule 44 (function_argument)


State 93

   39 function_call_expression: IDENTIFIER '(' function_arguments_optative • ')'

    ')'  shift, and go to state 114


State 94

   41 function_arguments_optative: function_arguments •
   42 function_arguments: function_arguments • ',' function_argument

    ','  shift, and go to state 115

    ')'  reduce using rule 41 (function_arguments_optative)


State 95

   43 function_arguments: function_argument •

    ')'  reduce using rule 43 (function_arguments)
    ','  reduce using rule 43 (function_arguments)


State 96

   36 expression: IDENTIFIER '=' expression •

    ';'  reduce using rule 36 (expression)


State 97

   46 expression_optative: expression •

    ';'  reduce using rule 46 (expression_optative)


State 98

   26 for_statement: RW_FOR '(' expression_optative • ';' or_expression_optative ';' expression_optative ')' statement

    ';'  shift, and go to state 116


State 99

   35 return_statement: RW_RETURN expression ';' •

    $end         reduce using rule 35 (return_statement)
    SIMPLE_TYPE  reduce using rule 35 (return_statement)


State 100

   27 if_else_statement: RW_IF '(' expression • ')' statement
   28                  | RW_IF '(' expression • ')' statement RW_ELSE statement

    ')'  shift, and go to state 117


State 101

   32 input_statement: IO_READ '(' IDENTIFIER • ')' ';'

    ')'  shift, and go to state 118


State 102

   34 output_statement: IO_WRITE '(' LIT_STRING • ')' ';'

    ')'  shift, and go to state 119


State 103

   33 output_statement: IO_WRITE '(' expression • ')' ';'

    ')'  shift, and go to state 120


State 104

    7 block: '{' statements '}' •

    $end         reduce using rule 7 (block)
    SIMPLE_TYPE  reduce using rule 7 (block)


State 105

    8 statements: statements statement •

    error                  reduce using rule 8 (statements)
    C_INTEGER              reduce using rule 8 (statements)
    C_FLOAT                reduce using rule 8 (statements)
    C_NIL                  reduce using rule 8 (statements)
    SIMPLE_TYPE            reduce using rule 8 (statements)
    IDENTIFIER             reduce using rule 8 (statements)
    RW_FOR                 reduce using rule 8 (statements)
    RW_RETURN              reduce using rule 8 (statements)
    RW_IF                  reduce using rule 8 (statements)
    IO_READ                reduce using rule 8 (statements)
    IO_WRITE               reduce using rule 8 (statements)
    UNARY_LIST_OP          reduce using rule 8 (statements)
    '{'                    reduce using rule 8 (statements)
    '}'                    reduce using rule 8 (statements)
    '('                    reduce using rule 8 (statements)
    '!'                    reduce using rule 8 (statements)
    ARITMETIC_OP_ADDITIVE  reduce using rule 8 (statements)


State 106

   68 simple_value: '(' expression ')' •

    BINARY_LIST_OP               reduce using rule 68 (simple_value)
    ';'                          reduce using rule 68 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 68 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 68 (simple_value)
    RELATIONAL_OP                reduce using rule 68 (simple_value)
    EQUALITY_OP                  reduce using rule 68 (simple_value)
    LOGICAL_OP_OR                reduce using rule 68 (simple_value)
    LOGICAL_OP_AND               reduce using rule 68 (simple_value)


State 107

   49 or_expression: or_expression LOGICAL_OP_OR and_expression •
   51 and_expression: and_expression • LOGICAL_OP_AND equality_expression

    LOGICAL_OP_AND  shift, and go to state 85

    ';'            reduce using rule 49 (or_expression)
    LOGICAL_OP_OR  reduce using rule 49 (or_expression)


State 108

   51 and_expression: and_expression LOGICAL_OP_AND equality_expression •
   53 equality_expression: equality_expression • EQUALITY_OP relational_expression

    EQUALITY_OP  shift, and go to state 86

    ';'             reduce using rule 51 (and_expression)
    LOGICAL_OP_OR   reduce using rule 51 (and_expression)
    LOGICAL_OP_AND  reduce using rule 51 (and_expression)


State 109

   53 equality_expression: equality_expression EQUALITY_OP relational_expression •
   55 relational_expression: relational_expression • RELATIONAL_OP list_expression

    RELATIONAL_OP  shift, and go to state 87

    ';'             reduce using rule 53 (equality_expression)
    EQUALITY_OP     reduce using rule 53 (equality_expression)
    LOGICAL_OP_OR   reduce using rule 53 (equality_expression)
    LOGICAL_OP_AND  reduce using rule 53 (equality_expression)


State 110

   55 relational_expression: relational_expression RELATIONAL_OP list_expression •
   57 list_expression: list_expression • BINARY_LIST_OP addition_expression

    BINARY_LIST_OP  shift, and go to state 88

    ';'             reduce using rule 55 (relational_expression)
    RELATIONAL_OP   reduce using rule 55 (relational_expression)
    EQUALITY_OP     reduce using rule 55 (relational_expression)
    LOGICAL_OP_OR   reduce using rule 55 (relational_expression)
    LOGICAL_OP_AND  reduce using rule 55 (relational_expression)


State 111

   57 list_expression: list_expression BINARY_LIST_OP addition_expression •
   59 addition_expression: addition_expression • ARITMETIC_OP_ADDITIVE multiplication_expression

    ARITMETIC_OP_ADDITIVE  shift, and go to state 89

    BINARY_LIST_OP  reduce using rule 57 (list_expression)
    ';'             reduce using rule 57 (list_expression)
    RELATIONAL_OP   reduce using rule 57 (list_expression)
    EQUALITY_OP     reduce using rule 57 (list_expression)
    LOGICAL_OP_OR   reduce using rule 57 (list_expression)
    LOGICAL_OP_AND  reduce using rule 57 (list_expression)


State 112

   59 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE multiplication_expression •
   61 multiplication_expression: multiplication_expression • ARITMETIC_OP_MULTIPLICATIVE simple_value

    ARITMETIC_OP_MULTIPLICATIVE  shift, and go to state 90

    BINARY_LIST_OP         reduce using rule 59 (addition_expression)
    ';'                    reduce using rule 59 (addition_expression)
    ARITMETIC_OP_ADDITIVE  reduce using rule 59 (addition_expression)
    RELATIONAL_OP          reduce using rule 59 (addition_expression)
    EQUALITY_OP            reduce using rule 59 (addition_expression)
    LOGICAL_OP_OR          reduce using rule 59 (addition_expression)
    LOGICAL_OP_AND         reduce using rule 59 (addition_expression)


State 113

   61 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE simple_value •

    BINARY_LIST_OP               reduce using rule 61 (multiplication_expression)
    ';'                          reduce using rule 61 (multiplication_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 61 (multiplication_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 61 (multiplication_expression)
    RELATIONAL_OP                reduce using rule 61 (multiplication_expression)
    EQUALITY_OP                  reduce using rule 61 (multiplication_expression)
    LOGICAL_OP_OR                reduce using rule 61 (multiplication_expression)
    LOGICAL_OP_AND               reduce using rule 61 (multiplication_expression)


State 114

   39 function_call_expression: IDENTIFIER '(' function_arguments_optative ')' •

    ';'  reduce using rule 39 (function_call_expression)


State 115

   42 function_arguments: function_arguments ',' • function_argument

    C_INTEGER              shift, and go to state 170
    C_FLOAT                shift, and go to state 171
    C_NIL                  shift, and go to state 172
    IDENTIFIER             shift, and go to state 173
    UNARY_LIST_OP          shift, and go to state 174
    '('                    shift, and go to state 175
    '!'                    shift, and go to state 176
    ARITMETIC_OP_ADDITIVE  shift, and go to state 177

    expression                 go to state 92
    function_call_expression   go to state 178
    function_argument          go to state 121
    or_expression              go to state 179
    and_expression             go to state 180
    equality_expression        go to state 181
    relational_expression      go to state 182
    list_expression            go to state 183
    addition_expression        go to state 184
    multiplication_expression  go to state 185
    simple_value               go to state 186
    constant                   go to state 187


State 116

   26 for_statement: RW_FOR '(' expression_optative ';' • or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    IDENTIFIER             shift, and go to state 76
    UNARY_LIST_OP          shift, and go to state 39
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    ';'  reduce using rule 47 (or_expression_optative)

    or_expression_optative     go to state 122
    or_expression              go to state 123
    and_expression             go to state 56
    equality_expression        go to state 57
    relational_expression      go to state 58
    list_expression            go to state 59
    addition_expression        go to state 60
    multiplication_expression  go to state 61
    simple_value               go to state 62
    constant                   go to state 64


State 117

   27 if_else_statement: RW_IF '(' expression ')' • statement
   28                  | RW_IF '(' expression ')' • statement RW_ELSE statement

    error                  shift, and go to state 188
    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    SIMPLE_TYPE            shift, and go to state 189
    IDENTIFIER             shift, and go to state 33
    RW_FOR                 shift, and go to state 190
    RW_RETURN              shift, and go to state 191
    RW_IF                  shift, and go to state 192
    IO_READ                shift, and go to state 193
    IO_WRITE               shift, and go to state 194
    UNARY_LIST_OP          shift, and go to state 39
    '{'                    shift, and go to state 195
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    block                           go to state 196
    statement                       go to state 124
    for_statement                   go to state 197
    if_else_statement               go to state 198
    expression_statement            go to state 199
    io_statement                    go to state 200
    input_statement                 go to state 201
    output_statement                go to state 202
    return_statement                go to state 203
    expression                      go to state 204
    function_call_expression        go to state 54
    or_expression                   go to state 55
    and_expression                  go to state 56
    equality_expression             go to state 57
    relational_expression           go to state 58
    list_expression                 go to state 59
    addition_expression             go to state 60
    multiplication_expression       go to state 61
    simple_value                    go to state 62
    variable_declaration_statement  go to state 205
    constant                        go to state 64


State 118

   32 input_statement: IO_READ '(' IDENTIFIER ')' • ';'

    ';'  shift, and go to state 125


State 119

   34 output_statement: IO_WRITE '(' LIT_STRING ')' • ';'

    ';'  shift, and go to state 126


State 120

   33 output_statement: IO_WRITE '(' expression ')' • ';'

    ';'  shift, and go to state 127


State 121

   42 function_arguments: function_arguments ',' function_argument •

    ')'  reduce using rule 42 (function_arguments)
    ','  reduce using rule 42 (function_arguments)


State 122

   26 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative • ';' expression_optative ')' statement

    ';'  shift, and go to state 128


State 123

   48 or_expression_optative: or_expression •
   49 or_expression: or_expression • LOGICAL_OP_OR and_expression

    LOGICAL_OP_OR  shift, and go to state 84

    ';'  reduce using rule 48 (or_expression_optative)


State 124

   27 if_else_statement: RW_IF '(' expression ')' statement •
   28                  | RW_IF '(' expression ')' statement • RW_ELSE statement

    RW_ELSE  shift, and go to state 129

    $end         reduce using rule 27 (if_else_statement)
    SIMPLE_TYPE  reduce using rule 27 (if_else_statement)


State 125

   32 input_statement: IO_READ '(' IDENTIFIER ')' ';' •

    $end         reduce using rule 32 (input_statement)
    SIMPLE_TYPE  reduce using rule 32 (input_statement)


State 126

   34 output_statement: IO_WRITE '(' LIT_STRING ')' ';' •

    $end         reduce using rule 34 (output_statement)
    SIMPLE_TYPE  reduce using rule 34 (output_statement)


State 127

   33 output_statement: IO_WRITE '(' expression ')' ';' •

    $end         reduce using rule 33 (output_statement)
    SIMPLE_TYPE  reduce using rule 33 (output_statement)


State 128

   26 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' • expression_optative ')' statement

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    IDENTIFIER             shift, and go to state 155
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    ')'  reduce using rule 45 (expression_optative)

    expression                 go to state 206
    function_call_expression   go to state 160
    expression_optative        go to state 130
    or_expression              go to state 161
    and_expression             go to state 162
    equality_expression        go to state 163
    relational_expression      go to state 164
    list_expression            go to state 165
    addition_expression        go to state 166
    multiplication_expression  go to state 167
    simple_value               go to state 168
    constant                   go to state 169


State 129

   28 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE • statement

    error                  shift, and go to state 28
    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    SIMPLE_TYPE            shift, and go to state 32
    IDENTIFIER             shift, and go to state 33
    RW_FOR                 shift, and go to state 34
    RW_RETURN              shift, and go to state 35
    RW_IF                  shift, and go to state 36
    IO_READ                shift, and go to state 37
    IO_WRITE               shift, and go to state 38
    UNARY_LIST_OP          shift, and go to state 39
    '{'                    shift, and go to state 40
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    block                           go to state 44
    statement                       go to state 131
    for_statement                   go to state 46
    if_else_statement               go to state 47
    expression_statement            go to state 48
    io_statement                    go to state 49
    input_statement                 go to state 50
    output_statement                go to state 51
    return_statement                go to state 52
    expression                      go to state 53
    function_call_expression        go to state 54
    or_expression                   go to state 55
    and_expression                  go to state 56
    equality_expression             go to state 57
    relational_expression           go to state 58
    list_expression                 go to state 59
    addition_expression             go to state 60
    multiplication_expression       go to state 61
    simple_value                    go to state 62
    variable_declaration_statement  go to state 63
    constant                        go to state 64


State 130

   26 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative • ')' statement

    ')'  shift, and go to state 132


State 131

   28 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE statement •

    $end         reduce using rule 28 (if_else_statement)
    SIMPLE_TYPE  reduce using rule 28 (if_else_statement)


State 132

   26 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' • statement

    error                  shift, and go to state 28
    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    SIMPLE_TYPE            shift, and go to state 32
    IDENTIFIER             shift, and go to state 33
    RW_FOR                 shift, and go to state 34
    RW_RETURN              shift, and go to state 35
    RW_IF                  shift, and go to state 36
    IO_READ                shift, and go to state 37
    IO_WRITE               shift, and go to state 38
    UNARY_LIST_OP          shift, and go to state 39
    '{'                    shift, and go to state 40
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    block                           go to state 44
    statement                       go to state 133
    for_statement                   go to state 46
    if_else_statement               go to state 47
    expression_statement            go to state 48
    io_statement                    go to state 49
    input_statement                 go to state 50
    output_statement                go to state 51
    return_statement                go to state 52
    expression                      go to state 53
    function_call_expression        go to state 54
    or_expression                   go to state 55
    and_expression                  go to state 56
    equality_expression             go to state 57
    relational_expression           go to state 58
    list_expression                 go to state 59
    addition_expression             go to state 60
    multiplication_expression       go to state 61
    simple_value                    go to state 62
    variable_declaration_statement  go to state 63
    constant                        go to state 64


State 133

   26 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement •

    $end         reduce using rule 26 (for_statement)
    SIMPLE_TYPE  reduce using rule 26 (for_statement)


State 134

   17 statement: error •

    error                  reduce using rule 17 (statement)
    C_INTEGER              reduce using rule 17 (statement)
    C_FLOAT                reduce using rule 17 (statement)
    C_NIL                  reduce using rule 17 (statement)
    SIMPLE_TYPE            reduce using rule 17 (statement)
    IDENTIFIER             reduce using rule 17 (statement)
    RW_FOR                 reduce using rule 17 (statement)
    RW_RETURN              reduce using rule 17 (statement)
    RW_IF                  reduce using rule 17 (statement)
    IO_READ                reduce using rule 17 (statement)
    IO_WRITE               reduce using rule 17 (statement)
    UNARY_LIST_OP          reduce using rule 17 (statement)
    '{'                    reduce using rule 17 (statement)
    '}'                    reduce using rule 17 (statement)
    '('                    reduce using rule 17 (statement)
    '!'                    reduce using rule 17 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 17 (statement)


State 135

   69 variable_declaration_statement: SIMPLE_TYPE • IDENTIFIER ';'
   70                               | SIMPLE_TYPE • LIST_TYPE IDENTIFIER ';'

    LIST_TYPE   shift, and go to state 207
    IDENTIFIER  shift, and go to state 208


State 136

   26 for_statement: RW_FOR • '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    '('  shift, and go to state 209


State 137

   35 return_statement: RW_RETURN • expression ';'

    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    IDENTIFIER             shift, and go to state 33
    UNARY_LIST_OP          shift, and go to state 39
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    expression                 go to state 210
    function_call_expression   go to state 54
    or_expression              go to state 55
    and_expression             go to state 56
    equality_expression        go to state 57
    relational_expression      go to state 58
    list_expression            go to state 59
    addition_expression        go to state 60
    multiplication_expression  go to state 61
    simple_value               go to state 62
    constant                   go to state 64


State 138

   27 if_else_statement: RW_IF • '(' expression ')' statement
   28                  | RW_IF • '(' expression ')' statement RW_ELSE statement

    '('  shift, and go to state 211


State 139

   32 input_statement: IO_READ • '(' IDENTIFIER ')' ';'

    '('  shift, and go to state 212


State 140

   33 output_statement: IO_WRITE • '(' expression ')' ';'
   34                 | IO_WRITE • '(' LIT_STRING ')' ';'

    '('  shift, and go to state 213


State 141

    7 block: '{' • statements '}'

    error                  shift, and go to state 134
    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    SIMPLE_TYPE            shift, and go to state 135
    IDENTIFIER             shift, and go to state 33
    RW_FOR                 shift, and go to state 136
    RW_RETURN              shift, and go to state 137
    RW_IF                  shift, and go to state 138
    IO_READ                shift, and go to state 139
    IO_WRITE               shift, and go to state 140
    UNARY_LIST_OP          shift, and go to state 39
    '{'                    shift, and go to state 141
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    block                           go to state 142
    statements                      go to state 214
    statement                       go to state 79
    for_statement                   go to state 143
    if_else_statement               go to state 144
    expression_statement            go to state 145
    io_statement                    go to state 146
    input_statement                 go to state 147
    output_statement                go to state 148
    return_statement                go to state 149
    expression                      go to state 150
    function_call_expression        go to state 54
    or_expression                   go to state 55
    and_expression                  go to state 56
    equality_expression             go to state 57
    relational_expression           go to state 58
    list_expression                 go to state 59
    addition_expression             go to state 60
    multiplication_expression       go to state 61
    simple_value                    go to state 62
    variable_declaration_statement  go to state 151
    constant                        go to state 64


State 142

   16 statement: block •

    error                  reduce using rule 16 (statement)
    C_INTEGER              reduce using rule 16 (statement)
    C_FLOAT                reduce using rule 16 (statement)
    C_NIL                  reduce using rule 16 (statement)
    SIMPLE_TYPE            reduce using rule 16 (statement)
    IDENTIFIER             reduce using rule 16 (statement)
    RW_FOR                 reduce using rule 16 (statement)
    RW_RETURN              reduce using rule 16 (statement)
    RW_IF                  reduce using rule 16 (statement)
    IO_READ                reduce using rule 16 (statement)
    IO_WRITE               reduce using rule 16 (statement)
    UNARY_LIST_OP          reduce using rule 16 (statement)
    '{'                    reduce using rule 16 (statement)
    '}'                    reduce using rule 16 (statement)
    '('                    reduce using rule 16 (statement)
    '!'                    reduce using rule 16 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 16 (statement)


State 143

   14 statement: for_statement •

    error                  reduce using rule 14 (statement)
    C_INTEGER              reduce using rule 14 (statement)
    C_FLOAT                reduce using rule 14 (statement)
    C_NIL                  reduce using rule 14 (statement)
    SIMPLE_TYPE            reduce using rule 14 (statement)
    IDENTIFIER             reduce using rule 14 (statement)
    RW_FOR                 reduce using rule 14 (statement)
    RW_RETURN              reduce using rule 14 (statement)
    RW_IF                  reduce using rule 14 (statement)
    IO_READ                reduce using rule 14 (statement)
    IO_WRITE               reduce using rule 14 (statement)
    UNARY_LIST_OP          reduce using rule 14 (statement)
    '{'                    reduce using rule 14 (statement)
    '}'                    reduce using rule 14 (statement)
    '('                    reduce using rule 14 (statement)
    '!'                    reduce using rule 14 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 14 (statement)


State 144

   15 statement: if_else_statement •

    error                  reduce using rule 15 (statement)
    C_INTEGER              reduce using rule 15 (statement)
    C_FLOAT                reduce using rule 15 (statement)
    C_NIL                  reduce using rule 15 (statement)
    SIMPLE_TYPE            reduce using rule 15 (statement)
    IDENTIFIER             reduce using rule 15 (statement)
    RW_FOR                 reduce using rule 15 (statement)
    RW_RETURN              reduce using rule 15 (statement)
    RW_IF                  reduce using rule 15 (statement)
    IO_READ                reduce using rule 15 (statement)
    IO_WRITE               reduce using rule 15 (statement)
    UNARY_LIST_OP          reduce using rule 15 (statement)
    '{'                    reduce using rule 15 (statement)
    '}'                    reduce using rule 15 (statement)
    '('                    reduce using rule 15 (statement)
    '!'                    reduce using rule 15 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 15 (statement)


State 145

   10 statement: expression_statement •

    error                  reduce using rule 10 (statement)
    C_INTEGER              reduce using rule 10 (statement)
    C_FLOAT                reduce using rule 10 (statement)
    C_NIL                  reduce using rule 10 (statement)
    SIMPLE_TYPE            reduce using rule 10 (statement)
    IDENTIFIER             reduce using rule 10 (statement)
    RW_FOR                 reduce using rule 10 (statement)
    RW_RETURN              reduce using rule 10 (statement)
    RW_IF                  reduce using rule 10 (statement)
    IO_READ                reduce using rule 10 (statement)
    IO_WRITE               reduce using rule 10 (statement)
    UNARY_LIST_OP          reduce using rule 10 (statement)
    '{'                    reduce using rule 10 (statement)
    '}'                    reduce using rule 10 (statement)
    '('                    reduce using rule 10 (statement)
    '!'                    reduce using rule 10 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 10 (statement)


State 146

   11 statement: io_statement •

    error                  reduce using rule 11 (statement)
    C_INTEGER              reduce using rule 11 (statement)
    C_FLOAT                reduce using rule 11 (statement)
    C_NIL                  reduce using rule 11 (statement)
    SIMPLE_TYPE            reduce using rule 11 (statement)
    IDENTIFIER             reduce using rule 11 (statement)
    RW_FOR                 reduce using rule 11 (statement)
    RW_RETURN              reduce using rule 11 (statement)
    RW_IF                  reduce using rule 11 (statement)
    IO_READ                reduce using rule 11 (statement)
    IO_WRITE               reduce using rule 11 (statement)
    UNARY_LIST_OP          reduce using rule 11 (statement)
    '{'                    reduce using rule 11 (statement)
    '}'                    reduce using rule 11 (statement)
    '('                    reduce using rule 11 (statement)
    '!'                    reduce using rule 11 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 11 (statement)


State 147

   30 io_statement: input_statement •

    error                  reduce using rule 30 (io_statement)
    C_INTEGER              reduce using rule 30 (io_statement)
    C_FLOAT                reduce using rule 30 (io_statement)
    C_NIL                  reduce using rule 30 (io_statement)
    SIMPLE_TYPE            reduce using rule 30 (io_statement)
    IDENTIFIER             reduce using rule 30 (io_statement)
    RW_FOR                 reduce using rule 30 (io_statement)
    RW_RETURN              reduce using rule 30 (io_statement)
    RW_IF                  reduce using rule 30 (io_statement)
    IO_READ                reduce using rule 30 (io_statement)
    IO_WRITE               reduce using rule 30 (io_statement)
    UNARY_LIST_OP          reduce using rule 30 (io_statement)
    '{'                    reduce using rule 30 (io_statement)
    '}'                    reduce using rule 30 (io_statement)
    '('                    reduce using rule 30 (io_statement)
    '!'                    reduce using rule 30 (io_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 30 (io_statement)


State 148

   31 io_statement: output_statement •

    error                  reduce using rule 31 (io_statement)
    C_INTEGER              reduce using rule 31 (io_statement)
    C_FLOAT                reduce using rule 31 (io_statement)
    C_NIL                  reduce using rule 31 (io_statement)
    SIMPLE_TYPE            reduce using rule 31 (io_statement)
    IDENTIFIER             reduce using rule 31 (io_statement)
    RW_FOR                 reduce using rule 31 (io_statement)
    RW_RETURN              reduce using rule 31 (io_statement)
    RW_IF                  reduce using rule 31 (io_statement)
    IO_READ                reduce using rule 31 (io_statement)
    IO_WRITE               reduce using rule 31 (io_statement)
    UNARY_LIST_OP          reduce using rule 31 (io_statement)
    '{'                    reduce using rule 31 (io_statement)
    '}'                    reduce using rule 31 (io_statement)
    '('                    reduce using rule 31 (io_statement)
    '!'                    reduce using rule 31 (io_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 31 (io_statement)


State 149

   12 statement: return_statement •

    error                  reduce using rule 12 (statement)
    C_INTEGER              reduce using rule 12 (statement)
    C_FLOAT                reduce using rule 12 (statement)
    C_NIL                  reduce using rule 12 (statement)
    SIMPLE_TYPE            reduce using rule 12 (statement)
    IDENTIFIER             reduce using rule 12 (statement)
    RW_FOR                 reduce using rule 12 (statement)
    RW_RETURN              reduce using rule 12 (statement)
    RW_IF                  reduce using rule 12 (statement)
    IO_READ                reduce using rule 12 (statement)
    IO_WRITE               reduce using rule 12 (statement)
    UNARY_LIST_OP          reduce using rule 12 (statement)
    '{'                    reduce using rule 12 (statement)
    '}'                    reduce using rule 12 (statement)
    '('                    reduce using rule 12 (statement)
    '!'                    reduce using rule 12 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 12 (statement)


State 150

   29 expression_statement: expression • ';'

    ';'  shift, and go to state 215


State 151

   13 statement: variable_declaration_statement •

    error                  reduce using rule 13 (statement)
    C_INTEGER              reduce using rule 13 (statement)
    C_FLOAT                reduce using rule 13 (statement)
    C_NIL                  reduce using rule 13 (statement)
    SIMPLE_TYPE            reduce using rule 13 (statement)
    IDENTIFIER             reduce using rule 13 (statement)
    RW_FOR                 reduce using rule 13 (statement)
    RW_RETURN              reduce using rule 13 (statement)
    RW_IF                  reduce using rule 13 (statement)
    IO_READ                reduce using rule 13 (statement)
    IO_WRITE               reduce using rule 13 (statement)
    UNARY_LIST_OP          reduce using rule 13 (statement)
    '{'                    reduce using rule 13 (statement)
    '}'                    reduce using rule 13 (statement)
    '('                    reduce using rule 13 (statement)
    '!'                    reduce using rule 13 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 13 (statement)


State 152

   71 constant: C_INTEGER •

    BINARY_LIST_OP               reduce using rule 71 (constant)
    ')'                          reduce using rule 71 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 71 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 71 (constant)
    RELATIONAL_OP                reduce using rule 71 (constant)
    EQUALITY_OP                  reduce using rule 71 (constant)
    LOGICAL_OP_OR                reduce using rule 71 (constant)
    LOGICAL_OP_AND               reduce using rule 71 (constant)


State 153

   72 constant: C_FLOAT •

    BINARY_LIST_OP               reduce using rule 72 (constant)
    ')'                          reduce using rule 72 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 72 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 72 (constant)
    RELATIONAL_OP                reduce using rule 72 (constant)
    EQUALITY_OP                  reduce using rule 72 (constant)
    LOGICAL_OP_OR                reduce using rule 72 (constant)
    LOGICAL_OP_AND               reduce using rule 72 (constant)


State 154

   73 constant: C_NIL •

    BINARY_LIST_OP               reduce using rule 73 (constant)
    ')'                          reduce using rule 73 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 73 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 73 (constant)
    RELATIONAL_OP                reduce using rule 73 (constant)
    EQUALITY_OP                  reduce using rule 73 (constant)
    LOGICAL_OP_OR                reduce using rule 73 (constant)
    LOGICAL_OP_AND               reduce using rule 73 (constant)


State 155

   36 expression: IDENTIFIER • '=' expression
   39 function_call_expression: IDENTIFIER • '(' function_arguments_optative ')'
   64 simple_value: IDENTIFIER •

    '('  shift, and go to state 216
    '='  shift, and go to state 217

    BINARY_LIST_OP               reduce using rule 64 (simple_value)
    ')'                          reduce using rule 64 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 64 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 64 (simple_value)
    RELATIONAL_OP                reduce using rule 64 (simple_value)
    EQUALITY_OP                  reduce using rule 64 (simple_value)
    LOGICAL_OP_OR                reduce using rule 64 (simple_value)
    LOGICAL_OP_AND               reduce using rule 64 (simple_value)


State 156

   67 simple_value: UNARY_LIST_OP • simple_value

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    IDENTIFIER             shift, and go to state 218
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    simple_value  go to state 219
    constant      go to state 169


State 157

   68 simple_value: '(' • expression ')'

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    IDENTIFIER             shift, and go to state 155
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    expression                 go to state 220
    function_call_expression   go to state 160
    or_expression              go to state 161
    and_expression             go to state 162
    equality_expression        go to state 163
    relational_expression      go to state 164
    list_expression            go to state 165
    addition_expression        go to state 166
    multiplication_expression  go to state 167
    simple_value               go to state 168
    constant                   go to state 169


State 158

   66 simple_value: '!' • simple_value

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    IDENTIFIER             shift, and go to state 218
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    simple_value  go to state 221
    constant      go to state 169


State 159

   65 simple_value: ARITMETIC_OP_ADDITIVE • simple_value

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    IDENTIFIER             shift, and go to state 218
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    simple_value  go to state 222
    constant      go to state 169


State 160

   38 expression: function_call_expression •

    ')'  reduce using rule 38 (expression)


State 161

   37 expression: or_expression •
   49 or_expression: or_expression • LOGICAL_OP_OR and_expression

    LOGICAL_OP_OR  shift, and go to state 223

    ')'  reduce using rule 37 (expression)


State 162

   50 or_expression: and_expression •
   51 and_expression: and_expression • LOGICAL_OP_AND equality_expression

    LOGICAL_OP_AND  shift, and go to state 224

    ')'            reduce using rule 50 (or_expression)
    LOGICAL_OP_OR  reduce using rule 50 (or_expression)


State 163

   52 and_expression: equality_expression •
   53 equality_expression: equality_expression • EQUALITY_OP relational_expression

    EQUALITY_OP  shift, and go to state 225

    ')'             reduce using rule 52 (and_expression)
    LOGICAL_OP_OR   reduce using rule 52 (and_expression)
    LOGICAL_OP_AND  reduce using rule 52 (and_expression)


State 164

   54 equality_expression: relational_expression •
   55 relational_expression: relational_expression • RELATIONAL_OP list_expression

    RELATIONAL_OP  shift, and go to state 226

    ')'             reduce using rule 54 (equality_expression)
    EQUALITY_OP     reduce using rule 54 (equality_expression)
    LOGICAL_OP_OR   reduce using rule 54 (equality_expression)
    LOGICAL_OP_AND  reduce using rule 54 (equality_expression)


State 165

   56 relational_expression: list_expression •
   57 list_expression: list_expression • BINARY_LIST_OP addition_expression

    BINARY_LIST_OP  shift, and go to state 227

    ')'             reduce using rule 56 (relational_expression)
    RELATIONAL_OP   reduce using rule 56 (relational_expression)
    EQUALITY_OP     reduce using rule 56 (relational_expression)
    LOGICAL_OP_OR   reduce using rule 56 (relational_expression)
    LOGICAL_OP_AND  reduce using rule 56 (relational_expression)


State 166

   58 list_expression: addition_expression •
   59 addition_expression: addition_expression • ARITMETIC_OP_ADDITIVE multiplication_expression

    ARITMETIC_OP_ADDITIVE  shift, and go to state 228

    BINARY_LIST_OP  reduce using rule 58 (list_expression)
    ')'             reduce using rule 58 (list_expression)
    RELATIONAL_OP   reduce using rule 58 (list_expression)
    EQUALITY_OP     reduce using rule 58 (list_expression)
    LOGICAL_OP_OR   reduce using rule 58 (list_expression)
    LOGICAL_OP_AND  reduce using rule 58 (list_expression)


State 167

   60 addition_expression: multiplication_expression •
   61 multiplication_expression: multiplication_expression • ARITMETIC_OP_MULTIPLICATIVE simple_value

    ARITMETIC_OP_MULTIPLICATIVE  shift, and go to state 229

    BINARY_LIST_OP         reduce using rule 60 (addition_expression)
    ')'                    reduce using rule 60 (addition_expression)
    ARITMETIC_OP_ADDITIVE  reduce using rule 60 (addition_expression)
    RELATIONAL_OP          reduce using rule 60 (addition_expression)
    EQUALITY_OP            reduce using rule 60 (addition_expression)
    LOGICAL_OP_OR          reduce using rule 60 (addition_expression)
    LOGICAL_OP_AND         reduce using rule 60 (addition_expression)


State 168

   62 multiplication_expression: simple_value •

    BINARY_LIST_OP               reduce using rule 62 (multiplication_expression)
    ')'                          reduce using rule 62 (multiplication_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 62 (multiplication_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 62 (multiplication_expression)
    RELATIONAL_OP                reduce using rule 62 (multiplication_expression)
    EQUALITY_OP                  reduce using rule 62 (multiplication_expression)
    LOGICAL_OP_OR                reduce using rule 62 (multiplication_expression)
    LOGICAL_OP_AND               reduce using rule 62 (multiplication_expression)


State 169

   63 simple_value: constant •

    BINARY_LIST_OP               reduce using rule 63 (simple_value)
    ')'                          reduce using rule 63 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 63 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 63 (simple_value)
    RELATIONAL_OP                reduce using rule 63 (simple_value)
    EQUALITY_OP                  reduce using rule 63 (simple_value)
    LOGICAL_OP_OR                reduce using rule 63 (simple_value)
    LOGICAL_OP_AND               reduce using rule 63 (simple_value)


State 170

   71 constant: C_INTEGER •

    BINARY_LIST_OP               reduce using rule 71 (constant)
    ')'                          reduce using rule 71 (constant)
    ','                          reduce using rule 71 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 71 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 71 (constant)
    RELATIONAL_OP                reduce using rule 71 (constant)
    EQUALITY_OP                  reduce using rule 71 (constant)
    LOGICAL_OP_OR                reduce using rule 71 (constant)
    LOGICAL_OP_AND               reduce using rule 71 (constant)


State 171

   72 constant: C_FLOAT •

    BINARY_LIST_OP               reduce using rule 72 (constant)
    ')'                          reduce using rule 72 (constant)
    ','                          reduce using rule 72 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 72 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 72 (constant)
    RELATIONAL_OP                reduce using rule 72 (constant)
    EQUALITY_OP                  reduce using rule 72 (constant)
    LOGICAL_OP_OR                reduce using rule 72 (constant)
    LOGICAL_OP_AND               reduce using rule 72 (constant)


State 172

   73 constant: C_NIL •

    BINARY_LIST_OP               reduce using rule 73 (constant)
    ')'                          reduce using rule 73 (constant)
    ','                          reduce using rule 73 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 73 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 73 (constant)
    RELATIONAL_OP                reduce using rule 73 (constant)
    EQUALITY_OP                  reduce using rule 73 (constant)
    LOGICAL_OP_OR                reduce using rule 73 (constant)
    LOGICAL_OP_AND               reduce using rule 73 (constant)


State 173

   36 expression: IDENTIFIER • '=' expression
   39 function_call_expression: IDENTIFIER • '(' function_arguments_optative ')'
   64 simple_value: IDENTIFIER •

    '('  shift, and go to state 230
    '='  shift, and go to state 231

    BINARY_LIST_OP               reduce using rule 64 (simple_value)
    ')'                          reduce using rule 64 (simple_value)
    ','                          reduce using rule 64 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 64 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 64 (simple_value)
    RELATIONAL_OP                reduce using rule 64 (simple_value)
    EQUALITY_OP                  reduce using rule 64 (simple_value)
    LOGICAL_OP_OR                reduce using rule 64 (simple_value)
    LOGICAL_OP_AND               reduce using rule 64 (simple_value)


State 174

   67 simple_value: UNARY_LIST_OP • simple_value

    C_INTEGER              shift, and go to state 170
    C_FLOAT                shift, and go to state 171
    C_NIL                  shift, and go to state 172
    IDENTIFIER             shift, and go to state 232
    UNARY_LIST_OP          shift, and go to state 174
    '('                    shift, and go to state 175
    '!'                    shift, and go to state 176
    ARITMETIC_OP_ADDITIVE  shift, and go to state 177

    simple_value  go to state 233
    constant      go to state 187


State 175

   68 simple_value: '(' • expression ')'

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    IDENTIFIER             shift, and go to state 155
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    expression                 go to state 234
    function_call_expression   go to state 160
    or_expression              go to state 161
    and_expression             go to state 162
    equality_expression        go to state 163
    relational_expression      go to state 164
    list_expression            go to state 165
    addition_expression        go to state 166
    multiplication_expression  go to state 167
    simple_value               go to state 168
    constant                   go to state 169


State 176

   66 simple_value: '!' • simple_value

    C_INTEGER              shift, and go to state 170
    C_FLOAT                shift, and go to state 171
    C_NIL                  shift, and go to state 172
    IDENTIFIER             shift, and go to state 232
    UNARY_LIST_OP          shift, and go to state 174
    '('                    shift, and go to state 175
    '!'                    shift, and go to state 176
    ARITMETIC_OP_ADDITIVE  shift, and go to state 177

    simple_value  go to state 235
    constant      go to state 187


State 177

   65 simple_value: ARITMETIC_OP_ADDITIVE • simple_value

    C_INTEGER              shift, and go to state 170
    C_FLOAT                shift, and go to state 171
    C_NIL                  shift, and go to state 172
    IDENTIFIER             shift, and go to state 232
    UNARY_LIST_OP          shift, and go to state 174
    '('                    shift, and go to state 175
    '!'                    shift, and go to state 176
    ARITMETIC_OP_ADDITIVE  shift, and go to state 177

    simple_value  go to state 236
    constant      go to state 187


State 178

   38 expression: function_call_expression •

    ')'  reduce using rule 38 (expression)
    ','  reduce using rule 38 (expression)


State 179

   37 expression: or_expression •
   49 or_expression: or_expression • LOGICAL_OP_OR and_expression

    LOGICAL_OP_OR  shift, and go to state 237

    ')'  reduce using rule 37 (expression)
    ','  reduce using rule 37 (expression)


State 180

   50 or_expression: and_expression •
   51 and_expression: and_expression • LOGICAL_OP_AND equality_expression

    LOGICAL_OP_AND  shift, and go to state 238

    ')'            reduce using rule 50 (or_expression)
    ','            reduce using rule 50 (or_expression)
    LOGICAL_OP_OR  reduce using rule 50 (or_expression)


State 181

   52 and_expression: equality_expression •
   53 equality_expression: equality_expression • EQUALITY_OP relational_expression

    EQUALITY_OP  shift, and go to state 239

    ')'             reduce using rule 52 (and_expression)
    ','             reduce using rule 52 (and_expression)
    LOGICAL_OP_OR   reduce using rule 52 (and_expression)
    LOGICAL_OP_AND  reduce using rule 52 (and_expression)


State 182

   54 equality_expression: relational_expression •
   55 relational_expression: relational_expression • RELATIONAL_OP list_expression

    RELATIONAL_OP  shift, and go to state 240

    ')'             reduce using rule 54 (equality_expression)
    ','             reduce using rule 54 (equality_expression)
    EQUALITY_OP     reduce using rule 54 (equality_expression)
    LOGICAL_OP_OR   reduce using rule 54 (equality_expression)
    LOGICAL_OP_AND  reduce using rule 54 (equality_expression)


State 183

   56 relational_expression: list_expression •
   57 list_expression: list_expression • BINARY_LIST_OP addition_expression

    BINARY_LIST_OP  shift, and go to state 241

    ')'             reduce using rule 56 (relational_expression)
    ','             reduce using rule 56 (relational_expression)
    RELATIONAL_OP   reduce using rule 56 (relational_expression)
    EQUALITY_OP     reduce using rule 56 (relational_expression)
    LOGICAL_OP_OR   reduce using rule 56 (relational_expression)
    LOGICAL_OP_AND  reduce using rule 56 (relational_expression)


State 184

   58 list_expression: addition_expression •
   59 addition_expression: addition_expression • ARITMETIC_OP_ADDITIVE multiplication_expression

    ARITMETIC_OP_ADDITIVE  shift, and go to state 242

    BINARY_LIST_OP  reduce using rule 58 (list_expression)
    ')'             reduce using rule 58 (list_expression)
    ','             reduce using rule 58 (list_expression)
    RELATIONAL_OP   reduce using rule 58 (list_expression)
    EQUALITY_OP     reduce using rule 58 (list_expression)
    LOGICAL_OP_OR   reduce using rule 58 (list_expression)
    LOGICAL_OP_AND  reduce using rule 58 (list_expression)


State 185

   60 addition_expression: multiplication_expression •
   61 multiplication_expression: multiplication_expression • ARITMETIC_OP_MULTIPLICATIVE simple_value

    ARITMETIC_OP_MULTIPLICATIVE  shift, and go to state 243

    BINARY_LIST_OP         reduce using rule 60 (addition_expression)
    ')'                    reduce using rule 60 (addition_expression)
    ','                    reduce using rule 60 (addition_expression)
    ARITMETIC_OP_ADDITIVE  reduce using rule 60 (addition_expression)
    RELATIONAL_OP          reduce using rule 60 (addition_expression)
    EQUALITY_OP            reduce using rule 60 (addition_expression)
    LOGICAL_OP_OR          reduce using rule 60 (addition_expression)
    LOGICAL_OP_AND         reduce using rule 60 (addition_expression)


State 186

   62 multiplication_expression: simple_value •

    BINARY_LIST_OP               reduce using rule 62 (multiplication_expression)
    ')'                          reduce using rule 62 (multiplication_expression)
    ','                          reduce using rule 62 (multiplication_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 62 (multiplication_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 62 (multiplication_expression)
    RELATIONAL_OP                reduce using rule 62 (multiplication_expression)
    EQUALITY_OP                  reduce using rule 62 (multiplication_expression)
    LOGICAL_OP_OR                reduce using rule 62 (multiplication_expression)
    LOGICAL_OP_AND               reduce using rule 62 (multiplication_expression)


State 187

   63 simple_value: constant •

    BINARY_LIST_OP               reduce using rule 63 (simple_value)
    ')'                          reduce using rule 63 (simple_value)
    ','                          reduce using rule 63 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 63 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 63 (simple_value)
    RELATIONAL_OP                reduce using rule 63 (simple_value)
    EQUALITY_OP                  reduce using rule 63 (simple_value)
    LOGICAL_OP_OR                reduce using rule 63 (simple_value)
    LOGICAL_OP_AND               reduce using rule 63 (simple_value)


State 188

   17 statement: error •

    $end         reduce using rule 17 (statement)
    SIMPLE_TYPE  reduce using rule 17 (statement)
    RW_ELSE      reduce using rule 17 (statement)


State 189

   69 variable_declaration_statement: SIMPLE_TYPE • IDENTIFIER ';'
   70                               | SIMPLE_TYPE • LIST_TYPE IDENTIFIER ';'

    LIST_TYPE   shift, and go to state 244
    IDENTIFIER  shift, and go to state 245


State 190

   26 for_statement: RW_FOR • '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    '('  shift, and go to state 246


State 191

   35 return_statement: RW_RETURN • expression ';'

    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    IDENTIFIER             shift, and go to state 33
    UNARY_LIST_OP          shift, and go to state 39
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    expression                 go to state 247
    function_call_expression   go to state 54
    or_expression              go to state 55
    and_expression             go to state 56
    equality_expression        go to state 57
    relational_expression      go to state 58
    list_expression            go to state 59
    addition_expression        go to state 60
    multiplication_expression  go to state 61
    simple_value               go to state 62
    constant                   go to state 64


State 192

   27 if_else_statement: RW_IF • '(' expression ')' statement
   28                  | RW_IF • '(' expression ')' statement RW_ELSE statement

    '('  shift, and go to state 248


State 193

   32 input_statement: IO_READ • '(' IDENTIFIER ')' ';'

    '('  shift, and go to state 249


State 194

   33 output_statement: IO_WRITE • '(' expression ')' ';'
   34                 | IO_WRITE • '(' LIT_STRING ')' ';'

    '('  shift, and go to state 250


State 195

    7 block: '{' • statements '}'

    error                  shift, and go to state 134
    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    SIMPLE_TYPE            shift, and go to state 135
    IDENTIFIER             shift, and go to state 33
    RW_FOR                 shift, and go to state 136
    RW_RETURN              shift, and go to state 137
    RW_IF                  shift, and go to state 138
    IO_READ                shift, and go to state 139
    IO_WRITE               shift, and go to state 140
    UNARY_LIST_OP          shift, and go to state 39
    '{'                    shift, and go to state 141
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    block                           go to state 142
    statements                      go to state 251
    statement                       go to state 79
    for_statement                   go to state 143
    if_else_statement               go to state 144
    expression_statement            go to state 145
    io_statement                    go to state 146
    input_statement                 go to state 147
    output_statement                go to state 148
    return_statement                go to state 149
    expression                      go to state 150
    function_call_expression        go to state 54
    or_expression                   go to state 55
    and_expression                  go to state 56
    equality_expression             go to state 57
    relational_expression           go to state 58
    list_expression                 go to state 59
    addition_expression             go to state 60
    multiplication_expression       go to state 61
    simple_value                    go to state 62
    variable_declaration_statement  go to state 151
    constant                        go to state 64


State 196

   16 statement: block •

    $end         reduce using rule 16 (statement)
    SIMPLE_TYPE  reduce using rule 16 (statement)
    RW_ELSE      reduce using rule 16 (statement)


State 197

   14 statement: for_statement •

    $end         reduce using rule 14 (statement)
    SIMPLE_TYPE  reduce using rule 14 (statement)
    RW_ELSE      reduce using rule 14 (statement)


State 198

   15 statement: if_else_statement •

    $end         reduce using rule 15 (statement)
    SIMPLE_TYPE  reduce using rule 15 (statement)
    RW_ELSE      reduce using rule 15 (statement)


State 199

   10 statement: expression_statement •

    $end         reduce using rule 10 (statement)
    SIMPLE_TYPE  reduce using rule 10 (statement)
    RW_ELSE      reduce using rule 10 (statement)


State 200

   11 statement: io_statement •

    $end         reduce using rule 11 (statement)
    SIMPLE_TYPE  reduce using rule 11 (statement)
    RW_ELSE      reduce using rule 11 (statement)


State 201

   30 io_statement: input_statement •

    $end         reduce using rule 30 (io_statement)
    SIMPLE_TYPE  reduce using rule 30 (io_statement)
    RW_ELSE      reduce using rule 30 (io_statement)


State 202

   31 io_statement: output_statement •

    $end         reduce using rule 31 (io_statement)
    SIMPLE_TYPE  reduce using rule 31 (io_statement)
    RW_ELSE      reduce using rule 31 (io_statement)


State 203

   12 statement: return_statement •

    $end         reduce using rule 12 (statement)
    SIMPLE_TYPE  reduce using rule 12 (statement)
    RW_ELSE      reduce using rule 12 (statement)


State 204

   29 expression_statement: expression • ';'

    ';'  shift, and go to state 252


State 205

   13 statement: variable_declaration_statement •

    $end         reduce using rule 13 (statement)
    SIMPLE_TYPE  reduce using rule 13 (statement)
    RW_ELSE      reduce using rule 13 (statement)


State 206

   46 expression_optative: expression •

    ')'  reduce using rule 46 (expression_optative)


State 207

   70 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE • IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 253


State 208

   69 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 254


State 209

   26 for_statement: RW_FOR '(' • expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    IDENTIFIER             shift, and go to state 33
    UNARY_LIST_OP          shift, and go to state 39
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    ';'  reduce using rule 45 (expression_optative)

    expression                 go to state 97
    function_call_expression   go to state 54
    expression_optative        go to state 255
    or_expression              go to state 55
    and_expression             go to state 56
    equality_expression        go to state 57
    relational_expression      go to state 58
    list_expression            go to state 59
    addition_expression        go to state 60
    multiplication_expression  go to state 61
    simple_value               go to state 62
    constant                   go to state 64


State 210

   35 return_statement: RW_RETURN expression • ';'

    ';'  shift, and go to state 256


State 211

   27 if_else_statement: RW_IF '(' • expression ')' statement
   28                  | RW_IF '(' • expression ')' statement RW_ELSE statement

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    IDENTIFIER             shift, and go to state 155
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    expression                 go to state 257
    function_call_expression   go to state 160
    or_expression              go to state 161
    and_expression             go to state 162
    equality_expression        go to state 163
    relational_expression      go to state 164
    list_expression            go to state 165
    addition_expression        go to state 166
    multiplication_expression  go to state 167
    simple_value               go to state 168
    constant                   go to state 169


State 212

   32 input_statement: IO_READ '(' • IDENTIFIER ')' ';'

    IDENTIFIER  shift, and go to state 258


State 213

   33 output_statement: IO_WRITE '(' • expression ')' ';'
   34                 | IO_WRITE '(' • LIT_STRING ')' ';'

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    LIT_STRING             shift, and go to state 259
    IDENTIFIER             shift, and go to state 155
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    expression                 go to state 260
    function_call_expression   go to state 160
    or_expression              go to state 161
    and_expression             go to state 162
    equality_expression        go to state 163
    relational_expression      go to state 164
    list_expression            go to state 165
    addition_expression        go to state 166
    multiplication_expression  go to state 167
    simple_value               go to state 168
    constant                   go to state 169


State 214

    7 block: '{' statements • '}'
    8 statements: statements • statement

    error                  shift, and go to state 134
    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    SIMPLE_TYPE            shift, and go to state 135
    IDENTIFIER             shift, and go to state 33
    RW_FOR                 shift, and go to state 136
    RW_RETURN              shift, and go to state 137
    RW_IF                  shift, and go to state 138
    IO_READ                shift, and go to state 139
    IO_WRITE               shift, and go to state 140
    UNARY_LIST_OP          shift, and go to state 39
    '{'                    shift, and go to state 141
    '}'                    shift, and go to state 261
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    block                           go to state 142
    statement                       go to state 105
    for_statement                   go to state 143
    if_else_statement               go to state 144
    expression_statement            go to state 145
    io_statement                    go to state 146
    input_statement                 go to state 147
    output_statement                go to state 148
    return_statement                go to state 149
    expression                      go to state 150
    function_call_expression        go to state 54
    or_expression                   go to state 55
    and_expression                  go to state 56
    equality_expression             go to state 57
    relational_expression           go to state 58
    list_expression                 go to state 59
    addition_expression             go to state 60
    multiplication_expression       go to state 61
    simple_value                    go to state 62
    variable_declaration_statement  go to state 151
    constant                        go to state 64


State 215

   29 expression_statement: expression ';' •

    error                  reduce using rule 29 (expression_statement)
    C_INTEGER              reduce using rule 29 (expression_statement)
    C_FLOAT                reduce using rule 29 (expression_statement)
    C_NIL                  reduce using rule 29 (expression_statement)
    SIMPLE_TYPE            reduce using rule 29 (expression_statement)
    IDENTIFIER             reduce using rule 29 (expression_statement)
    RW_FOR                 reduce using rule 29 (expression_statement)
    RW_RETURN              reduce using rule 29 (expression_statement)
    RW_IF                  reduce using rule 29 (expression_statement)
    IO_READ                reduce using rule 29 (expression_statement)
    IO_WRITE               reduce using rule 29 (expression_statement)
    UNARY_LIST_OP          reduce using rule 29 (expression_statement)
    '{'                    reduce using rule 29 (expression_statement)
    '}'                    reduce using rule 29 (expression_statement)
    '('                    reduce using rule 29 (expression_statement)
    '!'                    reduce using rule 29 (expression_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 29 (expression_statement)


State 216

   39 function_call_expression: IDENTIFIER '(' • function_arguments_optative ')'

    C_INTEGER              shift, and go to state 170
    C_FLOAT                shift, and go to state 171
    C_NIL                  shift, and go to state 172
    IDENTIFIER             shift, and go to state 173
    UNARY_LIST_OP          shift, and go to state 174
    '('                    shift, and go to state 175
    '!'                    shift, and go to state 176
    ARITMETIC_OP_ADDITIVE  shift, and go to state 177

    ')'  reduce using rule 40 (function_arguments_optative)

    expression                   go to state 92
    function_call_expression     go to state 178
    function_arguments_optative  go to state 262
    function_arguments           go to state 94
    function_argument            go to state 95
    or_expression                go to state 179
    and_expression               go to state 180
    equality_expression          go to state 181
    relational_expression        go to state 182
    list_expression              go to state 183
    addition_expression          go to state 184
    multiplication_expression    go to state 185
    simple_value                 go to state 186
    constant                     go to state 187


State 217

   36 expression: IDENTIFIER '=' • expression

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    IDENTIFIER             shift, and go to state 155
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    expression                 go to state 263
    function_call_expression   go to state 160
    or_expression              go to state 161
    and_expression             go to state 162
    equality_expression        go to state 163
    relational_expression      go to state 164
    list_expression            go to state 165
    addition_expression        go to state 166
    multiplication_expression  go to state 167
    simple_value               go to state 168
    constant                   go to state 169


State 218

   64 simple_value: IDENTIFIER •

    BINARY_LIST_OP               reduce using rule 64 (simple_value)
    ')'                          reduce using rule 64 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 64 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 64 (simple_value)
    RELATIONAL_OP                reduce using rule 64 (simple_value)
    EQUALITY_OP                  reduce using rule 64 (simple_value)
    LOGICAL_OP_OR                reduce using rule 64 (simple_value)
    LOGICAL_OP_AND               reduce using rule 64 (simple_value)


State 219

   67 simple_value: UNARY_LIST_OP simple_value •

    BINARY_LIST_OP               reduce using rule 67 (simple_value)
    ')'                          reduce using rule 67 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 67 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 67 (simple_value)
    RELATIONAL_OP                reduce using rule 67 (simple_value)
    EQUALITY_OP                  reduce using rule 67 (simple_value)
    LOGICAL_OP_OR                reduce using rule 67 (simple_value)
    LOGICAL_OP_AND               reduce using rule 67 (simple_value)


State 220

   68 simple_value: '(' expression • ')'

    ')'  shift, and go to state 264


State 221

   66 simple_value: '!' simple_value •

    BINARY_LIST_OP               reduce using rule 66 (simple_value)
    ')'                          reduce using rule 66 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 66 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 66 (simple_value)
    RELATIONAL_OP                reduce using rule 66 (simple_value)
    EQUALITY_OP                  reduce using rule 66 (simple_value)
    LOGICAL_OP_OR                reduce using rule 66 (simple_value)
    LOGICAL_OP_AND               reduce using rule 66 (simple_value)


State 222

   65 simple_value: ARITMETIC_OP_ADDITIVE simple_value •

    BINARY_LIST_OP               reduce using rule 65 (simple_value)
    ')'                          reduce using rule 65 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 65 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 65 (simple_value)
    RELATIONAL_OP                reduce using rule 65 (simple_value)
    EQUALITY_OP                  reduce using rule 65 (simple_value)
    LOGICAL_OP_OR                reduce using rule 65 (simple_value)
    LOGICAL_OP_AND               reduce using rule 65 (simple_value)


State 223

   49 or_expression: or_expression LOGICAL_OP_OR • and_expression

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    IDENTIFIER             shift, and go to state 218
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    and_expression             go to state 265
    equality_expression        go to state 163
    relational_expression      go to state 164
    list_expression            go to state 165
    addition_expression        go to state 166
    multiplication_expression  go to state 167
    simple_value               go to state 168
    constant                   go to state 169


State 224

   51 and_expression: and_expression LOGICAL_OP_AND • equality_expression

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    IDENTIFIER             shift, and go to state 218
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    equality_expression        go to state 266
    relational_expression      go to state 164
    list_expression            go to state 165
    addition_expression        go to state 166
    multiplication_expression  go to state 167
    simple_value               go to state 168
    constant                   go to state 169


State 225

   53 equality_expression: equality_expression EQUALITY_OP • relational_expression

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    IDENTIFIER             shift, and go to state 218
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    relational_expression      go to state 267
    list_expression            go to state 165
    addition_expression        go to state 166
    multiplication_expression  go to state 167
    simple_value               go to state 168
    constant                   go to state 169


State 226

   55 relational_expression: relational_expression RELATIONAL_OP • list_expression

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    IDENTIFIER             shift, and go to state 218
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    list_expression            go to state 268
    addition_expression        go to state 166
    multiplication_expression  go to state 167
    simple_value               go to state 168
    constant                   go to state 169


State 227

   57 list_expression: list_expression BINARY_LIST_OP • addition_expression

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    IDENTIFIER             shift, and go to state 218
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    addition_expression        go to state 269
    multiplication_expression  go to state 167
    simple_value               go to state 168
    constant                   go to state 169


State 228

   59 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE • multiplication_expression

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    IDENTIFIER             shift, and go to state 218
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    multiplication_expression  go to state 270
    simple_value               go to state 168
    constant                   go to state 169


State 229

   61 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE • simple_value

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    IDENTIFIER             shift, and go to state 218
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    simple_value  go to state 271
    constant      go to state 169


State 230

   39 function_call_expression: IDENTIFIER '(' • function_arguments_optative ')'

    C_INTEGER              shift, and go to state 170
    C_FLOAT                shift, and go to state 171
    C_NIL                  shift, and go to state 172
    IDENTIFIER             shift, and go to state 173
    UNARY_LIST_OP          shift, and go to state 174
    '('                    shift, and go to state 175
    '!'                    shift, and go to state 176
    ARITMETIC_OP_ADDITIVE  shift, and go to state 177

    ')'  reduce using rule 40 (function_arguments_optative)

    expression                   go to state 92
    function_call_expression     go to state 178
    function_arguments_optative  go to state 272
    function_arguments           go to state 94
    function_argument            go to state 95
    or_expression                go to state 179
    and_expression               go to state 180
    equality_expression          go to state 181
    relational_expression        go to state 182
    list_expression              go to state 183
    addition_expression          go to state 184
    multiplication_expression    go to state 185
    simple_value                 go to state 186
    constant                     go to state 187


State 231

   36 expression: IDENTIFIER '=' • expression

    C_INTEGER              shift, and go to state 170
    C_FLOAT                shift, and go to state 171
    C_NIL                  shift, and go to state 172
    IDENTIFIER             shift, and go to state 173
    UNARY_LIST_OP          shift, and go to state 174
    '('                    shift, and go to state 175
    '!'                    shift, and go to state 176
    ARITMETIC_OP_ADDITIVE  shift, and go to state 177

    expression                 go to state 273
    function_call_expression   go to state 178
    or_expression              go to state 179
    and_expression             go to state 180
    equality_expression        go to state 181
    relational_expression      go to state 182
    list_expression            go to state 183
    addition_expression        go to state 184
    multiplication_expression  go to state 185
    simple_value               go to state 186
    constant                   go to state 187


State 232

   64 simple_value: IDENTIFIER •

    BINARY_LIST_OP               reduce using rule 64 (simple_value)
    ')'                          reduce using rule 64 (simple_value)
    ','                          reduce using rule 64 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 64 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 64 (simple_value)
    RELATIONAL_OP                reduce using rule 64 (simple_value)
    EQUALITY_OP                  reduce using rule 64 (simple_value)
    LOGICAL_OP_OR                reduce using rule 64 (simple_value)
    LOGICAL_OP_AND               reduce using rule 64 (simple_value)


State 233

   67 simple_value: UNARY_LIST_OP simple_value •

    BINARY_LIST_OP               reduce using rule 67 (simple_value)
    ')'                          reduce using rule 67 (simple_value)
    ','                          reduce using rule 67 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 67 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 67 (simple_value)
    RELATIONAL_OP                reduce using rule 67 (simple_value)
    EQUALITY_OP                  reduce using rule 67 (simple_value)
    LOGICAL_OP_OR                reduce using rule 67 (simple_value)
    LOGICAL_OP_AND               reduce using rule 67 (simple_value)


State 234

   68 simple_value: '(' expression • ')'

    ')'  shift, and go to state 274


State 235

   66 simple_value: '!' simple_value •

    BINARY_LIST_OP               reduce using rule 66 (simple_value)
    ')'                          reduce using rule 66 (simple_value)
    ','                          reduce using rule 66 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 66 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 66 (simple_value)
    RELATIONAL_OP                reduce using rule 66 (simple_value)
    EQUALITY_OP                  reduce using rule 66 (simple_value)
    LOGICAL_OP_OR                reduce using rule 66 (simple_value)
    LOGICAL_OP_AND               reduce using rule 66 (simple_value)


State 236

   65 simple_value: ARITMETIC_OP_ADDITIVE simple_value •

    BINARY_LIST_OP               reduce using rule 65 (simple_value)
    ')'                          reduce using rule 65 (simple_value)
    ','                          reduce using rule 65 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 65 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 65 (simple_value)
    RELATIONAL_OP                reduce using rule 65 (simple_value)
    EQUALITY_OP                  reduce using rule 65 (simple_value)
    LOGICAL_OP_OR                reduce using rule 65 (simple_value)
    LOGICAL_OP_AND               reduce using rule 65 (simple_value)


State 237

   49 or_expression: or_expression LOGICAL_OP_OR • and_expression

    C_INTEGER              shift, and go to state 170
    C_FLOAT                shift, and go to state 171
    C_NIL                  shift, and go to state 172
    IDENTIFIER             shift, and go to state 232
    UNARY_LIST_OP          shift, and go to state 174
    '('                    shift, and go to state 175
    '!'                    shift, and go to state 176
    ARITMETIC_OP_ADDITIVE  shift, and go to state 177

    and_expression             go to state 275
    equality_expression        go to state 181
    relational_expression      go to state 182
    list_expression            go to state 183
    addition_expression        go to state 184
    multiplication_expression  go to state 185
    simple_value               go to state 186
    constant                   go to state 187


State 238

   51 and_expression: and_expression LOGICAL_OP_AND • equality_expression

    C_INTEGER              shift, and go to state 170
    C_FLOAT                shift, and go to state 171
    C_NIL                  shift, and go to state 172
    IDENTIFIER             shift, and go to state 232
    UNARY_LIST_OP          shift, and go to state 174
    '('                    shift, and go to state 175
    '!'                    shift, and go to state 176
    ARITMETIC_OP_ADDITIVE  shift, and go to state 177

    equality_expression        go to state 276
    relational_expression      go to state 182
    list_expression            go to state 183
    addition_expression        go to state 184
    multiplication_expression  go to state 185
    simple_value               go to state 186
    constant                   go to state 187


State 239

   53 equality_expression: equality_expression EQUALITY_OP • relational_expression

    C_INTEGER              shift, and go to state 170
    C_FLOAT                shift, and go to state 171
    C_NIL                  shift, and go to state 172
    IDENTIFIER             shift, and go to state 232
    UNARY_LIST_OP          shift, and go to state 174
    '('                    shift, and go to state 175
    '!'                    shift, and go to state 176
    ARITMETIC_OP_ADDITIVE  shift, and go to state 177

    relational_expression      go to state 277
    list_expression            go to state 183
    addition_expression        go to state 184
    multiplication_expression  go to state 185
    simple_value               go to state 186
    constant                   go to state 187


State 240

   55 relational_expression: relational_expression RELATIONAL_OP • list_expression

    C_INTEGER              shift, and go to state 170
    C_FLOAT                shift, and go to state 171
    C_NIL                  shift, and go to state 172
    IDENTIFIER             shift, and go to state 232
    UNARY_LIST_OP          shift, and go to state 174
    '('                    shift, and go to state 175
    '!'                    shift, and go to state 176
    ARITMETIC_OP_ADDITIVE  shift, and go to state 177

    list_expression            go to state 278
    addition_expression        go to state 184
    multiplication_expression  go to state 185
    simple_value               go to state 186
    constant                   go to state 187


State 241

   57 list_expression: list_expression BINARY_LIST_OP • addition_expression

    C_INTEGER              shift, and go to state 170
    C_FLOAT                shift, and go to state 171
    C_NIL                  shift, and go to state 172
    IDENTIFIER             shift, and go to state 232
    UNARY_LIST_OP          shift, and go to state 174
    '('                    shift, and go to state 175
    '!'                    shift, and go to state 176
    ARITMETIC_OP_ADDITIVE  shift, and go to state 177

    addition_expression        go to state 279
    multiplication_expression  go to state 185
    simple_value               go to state 186
    constant                   go to state 187


State 242

   59 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE • multiplication_expression

    C_INTEGER              shift, and go to state 170
    C_FLOAT                shift, and go to state 171
    C_NIL                  shift, and go to state 172
    IDENTIFIER             shift, and go to state 232
    UNARY_LIST_OP          shift, and go to state 174
    '('                    shift, and go to state 175
    '!'                    shift, and go to state 176
    ARITMETIC_OP_ADDITIVE  shift, and go to state 177

    multiplication_expression  go to state 280
    simple_value               go to state 186
    constant                   go to state 187


State 243

   61 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE • simple_value

    C_INTEGER              shift, and go to state 170
    C_FLOAT                shift, and go to state 171
    C_NIL                  shift, and go to state 172
    IDENTIFIER             shift, and go to state 232
    UNARY_LIST_OP          shift, and go to state 174
    '('                    shift, and go to state 175
    '!'                    shift, and go to state 176
    ARITMETIC_OP_ADDITIVE  shift, and go to state 177

    simple_value  go to state 281
    constant      go to state 187


State 244

   70 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE • IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 282


State 245

   69 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 283


State 246

   26 for_statement: RW_FOR '(' • expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    IDENTIFIER             shift, and go to state 33
    UNARY_LIST_OP          shift, and go to state 39
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    ';'  reduce using rule 45 (expression_optative)

    expression                 go to state 97
    function_call_expression   go to state 54
    expression_optative        go to state 284
    or_expression              go to state 55
    and_expression             go to state 56
    equality_expression        go to state 57
    relational_expression      go to state 58
    list_expression            go to state 59
    addition_expression        go to state 60
    multiplication_expression  go to state 61
    simple_value               go to state 62
    constant                   go to state 64


State 247

   35 return_statement: RW_RETURN expression • ';'

    ';'  shift, and go to state 285


State 248

   27 if_else_statement: RW_IF '(' • expression ')' statement
   28                  | RW_IF '(' • expression ')' statement RW_ELSE statement

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    IDENTIFIER             shift, and go to state 155
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    expression                 go to state 286
    function_call_expression   go to state 160
    or_expression              go to state 161
    and_expression             go to state 162
    equality_expression        go to state 163
    relational_expression      go to state 164
    list_expression            go to state 165
    addition_expression        go to state 166
    multiplication_expression  go to state 167
    simple_value               go to state 168
    constant                   go to state 169


State 249

   32 input_statement: IO_READ '(' • IDENTIFIER ')' ';'

    IDENTIFIER  shift, and go to state 287


State 250

   33 output_statement: IO_WRITE '(' • expression ')' ';'
   34                 | IO_WRITE '(' • LIT_STRING ')' ';'

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    LIT_STRING             shift, and go to state 288
    IDENTIFIER             shift, and go to state 155
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    expression                 go to state 289
    function_call_expression   go to state 160
    or_expression              go to state 161
    and_expression             go to state 162
    equality_expression        go to state 163
    relational_expression      go to state 164
    list_expression            go to state 165
    addition_expression        go to state 166
    multiplication_expression  go to state 167
    simple_value               go to state 168
    constant                   go to state 169


State 251

    7 block: '{' statements • '}'
    8 statements: statements • statement

    error                  shift, and go to state 134
    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    SIMPLE_TYPE            shift, and go to state 135
    IDENTIFIER             shift, and go to state 33
    RW_FOR                 shift, and go to state 136
    RW_RETURN              shift, and go to state 137
    RW_IF                  shift, and go to state 138
    IO_READ                shift, and go to state 139
    IO_WRITE               shift, and go to state 140
    UNARY_LIST_OP          shift, and go to state 39
    '{'                    shift, and go to state 141
    '}'                    shift, and go to state 290
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    block                           go to state 142
    statement                       go to state 105
    for_statement                   go to state 143
    if_else_statement               go to state 144
    expression_statement            go to state 145
    io_statement                    go to state 146
    input_statement                 go to state 147
    output_statement                go to state 148
    return_statement                go to state 149
    expression                      go to state 150
    function_call_expression        go to state 54
    or_expression                   go to state 55
    and_expression                  go to state 56
    equality_expression             go to state 57
    relational_expression           go to state 58
    list_expression                 go to state 59
    addition_expression             go to state 60
    multiplication_expression       go to state 61
    simple_value                    go to state 62
    variable_declaration_statement  go to state 151
    constant                        go to state 64


State 252

   29 expression_statement: expression ';' •

    $end         reduce using rule 29 (expression_statement)
    SIMPLE_TYPE  reduce using rule 29 (expression_statement)
    RW_ELSE      reduce using rule 29 (expression_statement)


State 253

   70 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 291


State 254

   69 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER ';' •

    error                  reduce using rule 69 (variable_declaration_statement)
    C_INTEGER              reduce using rule 69 (variable_declaration_statement)
    C_FLOAT                reduce using rule 69 (variable_declaration_statement)
    C_NIL                  reduce using rule 69 (variable_declaration_statement)
    SIMPLE_TYPE            reduce using rule 69 (variable_declaration_statement)
    IDENTIFIER             reduce using rule 69 (variable_declaration_statement)
    RW_FOR                 reduce using rule 69 (variable_declaration_statement)
    RW_RETURN              reduce using rule 69 (variable_declaration_statement)
    RW_IF                  reduce using rule 69 (variable_declaration_statement)
    IO_READ                reduce using rule 69 (variable_declaration_statement)
    IO_WRITE               reduce using rule 69 (variable_declaration_statement)
    UNARY_LIST_OP          reduce using rule 69 (variable_declaration_statement)
    '{'                    reduce using rule 69 (variable_declaration_statement)
    '}'                    reduce using rule 69 (variable_declaration_statement)
    '('                    reduce using rule 69 (variable_declaration_statement)
    '!'                    reduce using rule 69 (variable_declaration_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 69 (variable_declaration_statement)


State 255

   26 for_statement: RW_FOR '(' expression_optative • ';' or_expression_optative ';' expression_optative ')' statement

    ';'  shift, and go to state 292


State 256

   35 return_statement: RW_RETURN expression ';' •

    error                  reduce using rule 35 (return_statement)
    C_INTEGER              reduce using rule 35 (return_statement)
    C_FLOAT                reduce using rule 35 (return_statement)
    C_NIL                  reduce using rule 35 (return_statement)
    SIMPLE_TYPE            reduce using rule 35 (return_statement)
    IDENTIFIER             reduce using rule 35 (return_statement)
    RW_FOR                 reduce using rule 35 (return_statement)
    RW_RETURN              reduce using rule 35 (return_statement)
    RW_IF                  reduce using rule 35 (return_statement)
    IO_READ                reduce using rule 35 (return_statement)
    IO_WRITE               reduce using rule 35 (return_statement)
    UNARY_LIST_OP          reduce using rule 35 (return_statement)
    '{'                    reduce using rule 35 (return_statement)
    '}'                    reduce using rule 35 (return_statement)
    '('                    reduce using rule 35 (return_statement)
    '!'                    reduce using rule 35 (return_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 35 (return_statement)


State 257

   27 if_else_statement: RW_IF '(' expression • ')' statement
   28                  | RW_IF '(' expression • ')' statement RW_ELSE statement

    ')'  shift, and go to state 293


State 258

   32 input_statement: IO_READ '(' IDENTIFIER • ')' ';'

    ')'  shift, and go to state 294


State 259

   34 output_statement: IO_WRITE '(' LIT_STRING • ')' ';'

    ')'  shift, and go to state 295


State 260

   33 output_statement: IO_WRITE '(' expression • ')' ';'

    ')'  shift, and go to state 296


State 261

    7 block: '{' statements '}' •

    error                  reduce using rule 7 (block)
    C_INTEGER              reduce using rule 7 (block)
    C_FLOAT                reduce using rule 7 (block)
    C_NIL                  reduce using rule 7 (block)
    SIMPLE_TYPE            reduce using rule 7 (block)
    IDENTIFIER             reduce using rule 7 (block)
    RW_FOR                 reduce using rule 7 (block)
    RW_RETURN              reduce using rule 7 (block)
    RW_IF                  reduce using rule 7 (block)
    IO_READ                reduce using rule 7 (block)
    IO_WRITE               reduce using rule 7 (block)
    UNARY_LIST_OP          reduce using rule 7 (block)
    '{'                    reduce using rule 7 (block)
    '}'                    reduce using rule 7 (block)
    '('                    reduce using rule 7 (block)
    '!'                    reduce using rule 7 (block)
    ARITMETIC_OP_ADDITIVE  reduce using rule 7 (block)


State 262

   39 function_call_expression: IDENTIFIER '(' function_arguments_optative • ')'

    ')'  shift, and go to state 297


State 263

   36 expression: IDENTIFIER '=' expression •

    ')'  reduce using rule 36 (expression)


State 264

   68 simple_value: '(' expression ')' •

    BINARY_LIST_OP               reduce using rule 68 (simple_value)
    ')'                          reduce using rule 68 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 68 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 68 (simple_value)
    RELATIONAL_OP                reduce using rule 68 (simple_value)
    EQUALITY_OP                  reduce using rule 68 (simple_value)
    LOGICAL_OP_OR                reduce using rule 68 (simple_value)
    LOGICAL_OP_AND               reduce using rule 68 (simple_value)


State 265

   49 or_expression: or_expression LOGICAL_OP_OR and_expression •
   51 and_expression: and_expression • LOGICAL_OP_AND equality_expression

    LOGICAL_OP_AND  shift, and go to state 224

    ')'            reduce using rule 49 (or_expression)
    LOGICAL_OP_OR  reduce using rule 49 (or_expression)


State 266

   51 and_expression: and_expression LOGICAL_OP_AND equality_expression •
   53 equality_expression: equality_expression • EQUALITY_OP relational_expression

    EQUALITY_OP  shift, and go to state 225

    ')'             reduce using rule 51 (and_expression)
    LOGICAL_OP_OR   reduce using rule 51 (and_expression)
    LOGICAL_OP_AND  reduce using rule 51 (and_expression)


State 267

   53 equality_expression: equality_expression EQUALITY_OP relational_expression •
   55 relational_expression: relational_expression • RELATIONAL_OP list_expression

    RELATIONAL_OP  shift, and go to state 226

    ')'             reduce using rule 53 (equality_expression)
    EQUALITY_OP     reduce using rule 53 (equality_expression)
    LOGICAL_OP_OR   reduce using rule 53 (equality_expression)
    LOGICAL_OP_AND  reduce using rule 53 (equality_expression)


State 268

   55 relational_expression: relational_expression RELATIONAL_OP list_expression •
   57 list_expression: list_expression • BINARY_LIST_OP addition_expression

    BINARY_LIST_OP  shift, and go to state 227

    ')'             reduce using rule 55 (relational_expression)
    RELATIONAL_OP   reduce using rule 55 (relational_expression)
    EQUALITY_OP     reduce using rule 55 (relational_expression)
    LOGICAL_OP_OR   reduce using rule 55 (relational_expression)
    LOGICAL_OP_AND  reduce using rule 55 (relational_expression)


State 269

   57 list_expression: list_expression BINARY_LIST_OP addition_expression •
   59 addition_expression: addition_expression • ARITMETIC_OP_ADDITIVE multiplication_expression

    ARITMETIC_OP_ADDITIVE  shift, and go to state 228

    BINARY_LIST_OP  reduce using rule 57 (list_expression)
    ')'             reduce using rule 57 (list_expression)
    RELATIONAL_OP   reduce using rule 57 (list_expression)
    EQUALITY_OP     reduce using rule 57 (list_expression)
    LOGICAL_OP_OR   reduce using rule 57 (list_expression)
    LOGICAL_OP_AND  reduce using rule 57 (list_expression)


State 270

   59 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE multiplication_expression •
   61 multiplication_expression: multiplication_expression • ARITMETIC_OP_MULTIPLICATIVE simple_value

    ARITMETIC_OP_MULTIPLICATIVE  shift, and go to state 229

    BINARY_LIST_OP         reduce using rule 59 (addition_expression)
    ')'                    reduce using rule 59 (addition_expression)
    ARITMETIC_OP_ADDITIVE  reduce using rule 59 (addition_expression)
    RELATIONAL_OP          reduce using rule 59 (addition_expression)
    EQUALITY_OP            reduce using rule 59 (addition_expression)
    LOGICAL_OP_OR          reduce using rule 59 (addition_expression)
    LOGICAL_OP_AND         reduce using rule 59 (addition_expression)


State 271

   61 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE simple_value •

    BINARY_LIST_OP               reduce using rule 61 (multiplication_expression)
    ')'                          reduce using rule 61 (multiplication_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 61 (multiplication_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 61 (multiplication_expression)
    RELATIONAL_OP                reduce using rule 61 (multiplication_expression)
    EQUALITY_OP                  reduce using rule 61 (multiplication_expression)
    LOGICAL_OP_OR                reduce using rule 61 (multiplication_expression)
    LOGICAL_OP_AND               reduce using rule 61 (multiplication_expression)


State 272

   39 function_call_expression: IDENTIFIER '(' function_arguments_optative • ')'

    ')'  shift, and go to state 298


State 273

   36 expression: IDENTIFIER '=' expression •

    ')'  reduce using rule 36 (expression)
    ','  reduce using rule 36 (expression)


State 274

   68 simple_value: '(' expression ')' •

    BINARY_LIST_OP               reduce using rule 68 (simple_value)
    ')'                          reduce using rule 68 (simple_value)
    ','                          reduce using rule 68 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 68 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 68 (simple_value)
    RELATIONAL_OP                reduce using rule 68 (simple_value)
    EQUALITY_OP                  reduce using rule 68 (simple_value)
    LOGICAL_OP_OR                reduce using rule 68 (simple_value)
    LOGICAL_OP_AND               reduce using rule 68 (simple_value)


State 275

   49 or_expression: or_expression LOGICAL_OP_OR and_expression •
   51 and_expression: and_expression • LOGICAL_OP_AND equality_expression

    LOGICAL_OP_AND  shift, and go to state 238

    ')'            reduce using rule 49 (or_expression)
    ','            reduce using rule 49 (or_expression)
    LOGICAL_OP_OR  reduce using rule 49 (or_expression)


State 276

   51 and_expression: and_expression LOGICAL_OP_AND equality_expression •
   53 equality_expression: equality_expression • EQUALITY_OP relational_expression

    EQUALITY_OP  shift, and go to state 239

    ')'             reduce using rule 51 (and_expression)
    ','             reduce using rule 51 (and_expression)
    LOGICAL_OP_OR   reduce using rule 51 (and_expression)
    LOGICAL_OP_AND  reduce using rule 51 (and_expression)


State 277

   53 equality_expression: equality_expression EQUALITY_OP relational_expression •
   55 relational_expression: relational_expression • RELATIONAL_OP list_expression

    RELATIONAL_OP  shift, and go to state 240

    ')'             reduce using rule 53 (equality_expression)
    ','             reduce using rule 53 (equality_expression)
    EQUALITY_OP     reduce using rule 53 (equality_expression)
    LOGICAL_OP_OR   reduce using rule 53 (equality_expression)
    LOGICAL_OP_AND  reduce using rule 53 (equality_expression)


State 278

   55 relational_expression: relational_expression RELATIONAL_OP list_expression •
   57 list_expression: list_expression • BINARY_LIST_OP addition_expression

    BINARY_LIST_OP  shift, and go to state 241

    ')'             reduce using rule 55 (relational_expression)
    ','             reduce using rule 55 (relational_expression)
    RELATIONAL_OP   reduce using rule 55 (relational_expression)
    EQUALITY_OP     reduce using rule 55 (relational_expression)
    LOGICAL_OP_OR   reduce using rule 55 (relational_expression)
    LOGICAL_OP_AND  reduce using rule 55 (relational_expression)


State 279

   57 list_expression: list_expression BINARY_LIST_OP addition_expression •
   59 addition_expression: addition_expression • ARITMETIC_OP_ADDITIVE multiplication_expression

    ARITMETIC_OP_ADDITIVE  shift, and go to state 242

    BINARY_LIST_OP  reduce using rule 57 (list_expression)
    ')'             reduce using rule 57 (list_expression)
    ','             reduce using rule 57 (list_expression)
    RELATIONAL_OP   reduce using rule 57 (list_expression)
    EQUALITY_OP     reduce using rule 57 (list_expression)
    LOGICAL_OP_OR   reduce using rule 57 (list_expression)
    LOGICAL_OP_AND  reduce using rule 57 (list_expression)


State 280

   59 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE multiplication_expression •
   61 multiplication_expression: multiplication_expression • ARITMETIC_OP_MULTIPLICATIVE simple_value

    ARITMETIC_OP_MULTIPLICATIVE  shift, and go to state 243

    BINARY_LIST_OP         reduce using rule 59 (addition_expression)
    ')'                    reduce using rule 59 (addition_expression)
    ','                    reduce using rule 59 (addition_expression)
    ARITMETIC_OP_ADDITIVE  reduce using rule 59 (addition_expression)
    RELATIONAL_OP          reduce using rule 59 (addition_expression)
    EQUALITY_OP            reduce using rule 59 (addition_expression)
    LOGICAL_OP_OR          reduce using rule 59 (addition_expression)
    LOGICAL_OP_AND         reduce using rule 59 (addition_expression)


State 281

   61 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE simple_value •

    BINARY_LIST_OP               reduce using rule 61 (multiplication_expression)
    ')'                          reduce using rule 61 (multiplication_expression)
    ','                          reduce using rule 61 (multiplication_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 61 (multiplication_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 61 (multiplication_expression)
    RELATIONAL_OP                reduce using rule 61 (multiplication_expression)
    EQUALITY_OP                  reduce using rule 61 (multiplication_expression)
    LOGICAL_OP_OR                reduce using rule 61 (multiplication_expression)
    LOGICAL_OP_AND               reduce using rule 61 (multiplication_expression)


State 282

   70 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 299


State 283

   69 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER ';' •

    $end         reduce using rule 69 (variable_declaration_statement)
    SIMPLE_TYPE  reduce using rule 69 (variable_declaration_statement)
    RW_ELSE      reduce using rule 69 (variable_declaration_statement)


State 284

   26 for_statement: RW_FOR '(' expression_optative • ';' or_expression_optative ';' expression_optative ')' statement

    ';'  shift, and go to state 300


State 285

   35 return_statement: RW_RETURN expression ';' •

    $end         reduce using rule 35 (return_statement)
    SIMPLE_TYPE  reduce using rule 35 (return_statement)
    RW_ELSE      reduce using rule 35 (return_statement)


State 286

   27 if_else_statement: RW_IF '(' expression • ')' statement
   28                  | RW_IF '(' expression • ')' statement RW_ELSE statement

    ')'  shift, and go to state 301


State 287

   32 input_statement: IO_READ '(' IDENTIFIER • ')' ';'

    ')'  shift, and go to state 302


State 288

   34 output_statement: IO_WRITE '(' LIT_STRING • ')' ';'

    ')'  shift, and go to state 303


State 289

   33 output_statement: IO_WRITE '(' expression • ')' ';'

    ')'  shift, and go to state 304


State 290

    7 block: '{' statements '}' •

    $end         reduce using rule 7 (block)
    SIMPLE_TYPE  reduce using rule 7 (block)
    RW_ELSE      reduce using rule 7 (block)


State 291

   70 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER ';' •

    error                  reduce using rule 70 (variable_declaration_statement)
    C_INTEGER              reduce using rule 70 (variable_declaration_statement)
    C_FLOAT                reduce using rule 70 (variable_declaration_statement)
    C_NIL                  reduce using rule 70 (variable_declaration_statement)
    SIMPLE_TYPE            reduce using rule 70 (variable_declaration_statement)
    IDENTIFIER             reduce using rule 70 (variable_declaration_statement)
    RW_FOR                 reduce using rule 70 (variable_declaration_statement)
    RW_RETURN              reduce using rule 70 (variable_declaration_statement)
    RW_IF                  reduce using rule 70 (variable_declaration_statement)
    IO_READ                reduce using rule 70 (variable_declaration_statement)
    IO_WRITE               reduce using rule 70 (variable_declaration_statement)
    UNARY_LIST_OP          reduce using rule 70 (variable_declaration_statement)
    '{'                    reduce using rule 70 (variable_declaration_statement)
    '}'                    reduce using rule 70 (variable_declaration_statement)
    '('                    reduce using rule 70 (variable_declaration_statement)
    '!'                    reduce using rule 70 (variable_declaration_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 70 (variable_declaration_statement)


State 292

   26 for_statement: RW_FOR '(' expression_optative ';' • or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    IDENTIFIER             shift, and go to state 76
    UNARY_LIST_OP          shift, and go to state 39
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    ';'  reduce using rule 47 (or_expression_optative)

    or_expression_optative     go to state 305
    or_expression              go to state 123
    and_expression             go to state 56
    equality_expression        go to state 57
    relational_expression      go to state 58
    list_expression            go to state 59
    addition_expression        go to state 60
    multiplication_expression  go to state 61
    simple_value               go to state 62
    constant                   go to state 64


State 293

   27 if_else_statement: RW_IF '(' expression ')' • statement
   28                  | RW_IF '(' expression ')' • statement RW_ELSE statement

    error                  shift, and go to state 306
    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    SIMPLE_TYPE            shift, and go to state 307
    IDENTIFIER             shift, and go to state 33
    RW_FOR                 shift, and go to state 308
    RW_RETURN              shift, and go to state 309
    RW_IF                  shift, and go to state 310
    IO_READ                shift, and go to state 311
    IO_WRITE               shift, and go to state 312
    UNARY_LIST_OP          shift, and go to state 39
    '{'                    shift, and go to state 313
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    block                           go to state 314
    statement                       go to state 315
    for_statement                   go to state 316
    if_else_statement               go to state 317
    expression_statement            go to state 318
    io_statement                    go to state 319
    input_statement                 go to state 320
    output_statement                go to state 321
    return_statement                go to state 322
    expression                      go to state 323
    function_call_expression        go to state 54
    or_expression                   go to state 55
    and_expression                  go to state 56
    equality_expression             go to state 57
    relational_expression           go to state 58
    list_expression                 go to state 59
    addition_expression             go to state 60
    multiplication_expression       go to state 61
    simple_value                    go to state 62
    variable_declaration_statement  go to state 324
    constant                        go to state 64


State 294

   32 input_statement: IO_READ '(' IDENTIFIER ')' • ';'

    ';'  shift, and go to state 325


State 295

   34 output_statement: IO_WRITE '(' LIT_STRING ')' • ';'

    ';'  shift, and go to state 326


State 296

   33 output_statement: IO_WRITE '(' expression ')' • ';'

    ';'  shift, and go to state 327


State 297

   39 function_call_expression: IDENTIFIER '(' function_arguments_optative ')' •

    ')'  reduce using rule 39 (function_call_expression)


State 298

   39 function_call_expression: IDENTIFIER '(' function_arguments_optative ')' •

    ')'  reduce using rule 39 (function_call_expression)
    ','  reduce using rule 39 (function_call_expression)


State 299

   70 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER ';' •

    $end         reduce using rule 70 (variable_declaration_statement)
    SIMPLE_TYPE  reduce using rule 70 (variable_declaration_statement)
    RW_ELSE      reduce using rule 70 (variable_declaration_statement)


State 300

   26 for_statement: RW_FOR '(' expression_optative ';' • or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    IDENTIFIER             shift, and go to state 76
    UNARY_LIST_OP          shift, and go to state 39
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    ';'  reduce using rule 47 (or_expression_optative)

    or_expression_optative     go to state 328
    or_expression              go to state 123
    and_expression             go to state 56
    equality_expression        go to state 57
    relational_expression      go to state 58
    list_expression            go to state 59
    addition_expression        go to state 60
    multiplication_expression  go to state 61
    simple_value               go to state 62
    constant                   go to state 64


State 301

   27 if_else_statement: RW_IF '(' expression ')' • statement
   28                  | RW_IF '(' expression ')' • statement RW_ELSE statement

    error                  shift, and go to state 188
    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    SIMPLE_TYPE            shift, and go to state 189
    IDENTIFIER             shift, and go to state 33
    RW_FOR                 shift, and go to state 190
    RW_RETURN              shift, and go to state 191
    RW_IF                  shift, and go to state 192
    IO_READ                shift, and go to state 193
    IO_WRITE               shift, and go to state 194
    UNARY_LIST_OP          shift, and go to state 39
    '{'                    shift, and go to state 195
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    block                           go to state 196
    statement                       go to state 329
    for_statement                   go to state 197
    if_else_statement               go to state 198
    expression_statement            go to state 199
    io_statement                    go to state 200
    input_statement                 go to state 201
    output_statement                go to state 202
    return_statement                go to state 203
    expression                      go to state 204
    function_call_expression        go to state 54
    or_expression                   go to state 55
    and_expression                  go to state 56
    equality_expression             go to state 57
    relational_expression           go to state 58
    list_expression                 go to state 59
    addition_expression             go to state 60
    multiplication_expression       go to state 61
    simple_value                    go to state 62
    variable_declaration_statement  go to state 205
    constant                        go to state 64


State 302

   32 input_statement: IO_READ '(' IDENTIFIER ')' • ';'

    ';'  shift, and go to state 330


State 303

   34 output_statement: IO_WRITE '(' LIT_STRING ')' • ';'

    ';'  shift, and go to state 331


State 304

   33 output_statement: IO_WRITE '(' expression ')' • ';'

    ';'  shift, and go to state 332


State 305

   26 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative • ';' expression_optative ')' statement

    ';'  shift, and go to state 333


State 306

   17 statement: error •

    error                  reduce using rule 17 (statement)
    C_INTEGER              reduce using rule 17 (statement)
    C_FLOAT                reduce using rule 17 (statement)
    C_NIL                  reduce using rule 17 (statement)
    SIMPLE_TYPE            reduce using rule 17 (statement)
    IDENTIFIER             reduce using rule 17 (statement)
    RW_FOR                 reduce using rule 17 (statement)
    RW_RETURN              reduce using rule 17 (statement)
    RW_IF                  reduce using rule 17 (statement)
    RW_ELSE                reduce using rule 17 (statement)
    IO_READ                reduce using rule 17 (statement)
    IO_WRITE               reduce using rule 17 (statement)
    UNARY_LIST_OP          reduce using rule 17 (statement)
    '{'                    reduce using rule 17 (statement)
    '}'                    reduce using rule 17 (statement)
    '('                    reduce using rule 17 (statement)
    '!'                    reduce using rule 17 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 17 (statement)


State 307

   69 variable_declaration_statement: SIMPLE_TYPE • IDENTIFIER ';'
   70                               | SIMPLE_TYPE • LIST_TYPE IDENTIFIER ';'

    LIST_TYPE   shift, and go to state 334
    IDENTIFIER  shift, and go to state 335


State 308

   26 for_statement: RW_FOR • '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    '('  shift, and go to state 336


State 309

   35 return_statement: RW_RETURN • expression ';'

    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    IDENTIFIER             shift, and go to state 33
    UNARY_LIST_OP          shift, and go to state 39
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    expression                 go to state 337
    function_call_expression   go to state 54
    or_expression              go to state 55
    and_expression             go to state 56
    equality_expression        go to state 57
    relational_expression      go to state 58
    list_expression            go to state 59
    addition_expression        go to state 60
    multiplication_expression  go to state 61
    simple_value               go to state 62
    constant                   go to state 64


State 310

   27 if_else_statement: RW_IF • '(' expression ')' statement
   28                  | RW_IF • '(' expression ')' statement RW_ELSE statement

    '('  shift, and go to state 338


State 311

   32 input_statement: IO_READ • '(' IDENTIFIER ')' ';'

    '('  shift, and go to state 339


State 312

   33 output_statement: IO_WRITE • '(' expression ')' ';'
   34                 | IO_WRITE • '(' LIT_STRING ')' ';'

    '('  shift, and go to state 340


State 313

    7 block: '{' • statements '}'

    error                  shift, and go to state 134
    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    SIMPLE_TYPE            shift, and go to state 135
    IDENTIFIER             shift, and go to state 33
    RW_FOR                 shift, and go to state 136
    RW_RETURN              shift, and go to state 137
    RW_IF                  shift, and go to state 138
    IO_READ                shift, and go to state 139
    IO_WRITE               shift, and go to state 140
    UNARY_LIST_OP          shift, and go to state 39
    '{'                    shift, and go to state 141
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    block                           go to state 142
    statements                      go to state 341
    statement                       go to state 79
    for_statement                   go to state 143
    if_else_statement               go to state 144
    expression_statement            go to state 145
    io_statement                    go to state 146
    input_statement                 go to state 147
    output_statement                go to state 148
    return_statement                go to state 149
    expression                      go to state 150
    function_call_expression        go to state 54
    or_expression                   go to state 55
    and_expression                  go to state 56
    equality_expression             go to state 57
    relational_expression           go to state 58
    list_expression                 go to state 59
    addition_expression             go to state 60
    multiplication_expression       go to state 61
    simple_value                    go to state 62
    variable_declaration_statement  go to state 151
    constant                        go to state 64


State 314

   16 statement: block •

    error                  reduce using rule 16 (statement)
    C_INTEGER              reduce using rule 16 (statement)
    C_FLOAT                reduce using rule 16 (statement)
    C_NIL                  reduce using rule 16 (statement)
    SIMPLE_TYPE            reduce using rule 16 (statement)
    IDENTIFIER             reduce using rule 16 (statement)
    RW_FOR                 reduce using rule 16 (statement)
    RW_RETURN              reduce using rule 16 (statement)
    RW_IF                  reduce using rule 16 (statement)
    RW_ELSE                reduce using rule 16 (statement)
    IO_READ                reduce using rule 16 (statement)
    IO_WRITE               reduce using rule 16 (statement)
    UNARY_LIST_OP          reduce using rule 16 (statement)
    '{'                    reduce using rule 16 (statement)
    '}'                    reduce using rule 16 (statement)
    '('                    reduce using rule 16 (statement)
    '!'                    reduce using rule 16 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 16 (statement)


State 315

   27 if_else_statement: RW_IF '(' expression ')' statement •
   28                  | RW_IF '(' expression ')' statement • RW_ELSE statement

    RW_ELSE  shift, and go to state 342

    error                  reduce using rule 27 (if_else_statement)
    C_INTEGER              reduce using rule 27 (if_else_statement)
    C_FLOAT                reduce using rule 27 (if_else_statement)
    C_NIL                  reduce using rule 27 (if_else_statement)
    SIMPLE_TYPE            reduce using rule 27 (if_else_statement)
    IDENTIFIER             reduce using rule 27 (if_else_statement)
    RW_FOR                 reduce using rule 27 (if_else_statement)
    RW_RETURN              reduce using rule 27 (if_else_statement)
    RW_IF                  reduce using rule 27 (if_else_statement)
    IO_READ                reduce using rule 27 (if_else_statement)
    IO_WRITE               reduce using rule 27 (if_else_statement)
    UNARY_LIST_OP          reduce using rule 27 (if_else_statement)
    '{'                    reduce using rule 27 (if_else_statement)
    '}'                    reduce using rule 27 (if_else_statement)
    '('                    reduce using rule 27 (if_else_statement)
    '!'                    reduce using rule 27 (if_else_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 27 (if_else_statement)


State 316

   14 statement: for_statement •

    error                  reduce using rule 14 (statement)
    C_INTEGER              reduce using rule 14 (statement)
    C_FLOAT                reduce using rule 14 (statement)
    C_NIL                  reduce using rule 14 (statement)
    SIMPLE_TYPE            reduce using rule 14 (statement)
    IDENTIFIER             reduce using rule 14 (statement)
    RW_FOR                 reduce using rule 14 (statement)
    RW_RETURN              reduce using rule 14 (statement)
    RW_IF                  reduce using rule 14 (statement)
    RW_ELSE                reduce using rule 14 (statement)
    IO_READ                reduce using rule 14 (statement)
    IO_WRITE               reduce using rule 14 (statement)
    UNARY_LIST_OP          reduce using rule 14 (statement)
    '{'                    reduce using rule 14 (statement)
    '}'                    reduce using rule 14 (statement)
    '('                    reduce using rule 14 (statement)
    '!'                    reduce using rule 14 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 14 (statement)


State 317

   15 statement: if_else_statement •

    error                  reduce using rule 15 (statement)
    C_INTEGER              reduce using rule 15 (statement)
    C_FLOAT                reduce using rule 15 (statement)
    C_NIL                  reduce using rule 15 (statement)
    SIMPLE_TYPE            reduce using rule 15 (statement)
    IDENTIFIER             reduce using rule 15 (statement)
    RW_FOR                 reduce using rule 15 (statement)
    RW_RETURN              reduce using rule 15 (statement)
    RW_IF                  reduce using rule 15 (statement)
    RW_ELSE                reduce using rule 15 (statement)
    IO_READ                reduce using rule 15 (statement)
    IO_WRITE               reduce using rule 15 (statement)
    UNARY_LIST_OP          reduce using rule 15 (statement)
    '{'                    reduce using rule 15 (statement)
    '}'                    reduce using rule 15 (statement)
    '('                    reduce using rule 15 (statement)
    '!'                    reduce using rule 15 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 15 (statement)


State 318

   10 statement: expression_statement •

    error                  reduce using rule 10 (statement)
    C_INTEGER              reduce using rule 10 (statement)
    C_FLOAT                reduce using rule 10 (statement)
    C_NIL                  reduce using rule 10 (statement)
    SIMPLE_TYPE            reduce using rule 10 (statement)
    IDENTIFIER             reduce using rule 10 (statement)
    RW_FOR                 reduce using rule 10 (statement)
    RW_RETURN              reduce using rule 10 (statement)
    RW_IF                  reduce using rule 10 (statement)
    RW_ELSE                reduce using rule 10 (statement)
    IO_READ                reduce using rule 10 (statement)
    IO_WRITE               reduce using rule 10 (statement)
    UNARY_LIST_OP          reduce using rule 10 (statement)
    '{'                    reduce using rule 10 (statement)
    '}'                    reduce using rule 10 (statement)
    '('                    reduce using rule 10 (statement)
    '!'                    reduce using rule 10 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 10 (statement)


State 319

   11 statement: io_statement •

    error                  reduce using rule 11 (statement)
    C_INTEGER              reduce using rule 11 (statement)
    C_FLOAT                reduce using rule 11 (statement)
    C_NIL                  reduce using rule 11 (statement)
    SIMPLE_TYPE            reduce using rule 11 (statement)
    IDENTIFIER             reduce using rule 11 (statement)
    RW_FOR                 reduce using rule 11 (statement)
    RW_RETURN              reduce using rule 11 (statement)
    RW_IF                  reduce using rule 11 (statement)
    RW_ELSE                reduce using rule 11 (statement)
    IO_READ                reduce using rule 11 (statement)
    IO_WRITE               reduce using rule 11 (statement)
    UNARY_LIST_OP          reduce using rule 11 (statement)
    '{'                    reduce using rule 11 (statement)
    '}'                    reduce using rule 11 (statement)
    '('                    reduce using rule 11 (statement)
    '!'                    reduce using rule 11 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 11 (statement)


State 320

   30 io_statement: input_statement •

    error                  reduce using rule 30 (io_statement)
    C_INTEGER              reduce using rule 30 (io_statement)
    C_FLOAT                reduce using rule 30 (io_statement)
    C_NIL                  reduce using rule 30 (io_statement)
    SIMPLE_TYPE            reduce using rule 30 (io_statement)
    IDENTIFIER             reduce using rule 30 (io_statement)
    RW_FOR                 reduce using rule 30 (io_statement)
    RW_RETURN              reduce using rule 30 (io_statement)
    RW_IF                  reduce using rule 30 (io_statement)
    RW_ELSE                reduce using rule 30 (io_statement)
    IO_READ                reduce using rule 30 (io_statement)
    IO_WRITE               reduce using rule 30 (io_statement)
    UNARY_LIST_OP          reduce using rule 30 (io_statement)
    '{'                    reduce using rule 30 (io_statement)
    '}'                    reduce using rule 30 (io_statement)
    '('                    reduce using rule 30 (io_statement)
    '!'                    reduce using rule 30 (io_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 30 (io_statement)


State 321

   31 io_statement: output_statement •

    error                  reduce using rule 31 (io_statement)
    C_INTEGER              reduce using rule 31 (io_statement)
    C_FLOAT                reduce using rule 31 (io_statement)
    C_NIL                  reduce using rule 31 (io_statement)
    SIMPLE_TYPE            reduce using rule 31 (io_statement)
    IDENTIFIER             reduce using rule 31 (io_statement)
    RW_FOR                 reduce using rule 31 (io_statement)
    RW_RETURN              reduce using rule 31 (io_statement)
    RW_IF                  reduce using rule 31 (io_statement)
    RW_ELSE                reduce using rule 31 (io_statement)
    IO_READ                reduce using rule 31 (io_statement)
    IO_WRITE               reduce using rule 31 (io_statement)
    UNARY_LIST_OP          reduce using rule 31 (io_statement)
    '{'                    reduce using rule 31 (io_statement)
    '}'                    reduce using rule 31 (io_statement)
    '('                    reduce using rule 31 (io_statement)
    '!'                    reduce using rule 31 (io_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 31 (io_statement)


State 322

   12 statement: return_statement •

    error                  reduce using rule 12 (statement)
    C_INTEGER              reduce using rule 12 (statement)
    C_FLOAT                reduce using rule 12 (statement)
    C_NIL                  reduce using rule 12 (statement)
    SIMPLE_TYPE            reduce using rule 12 (statement)
    IDENTIFIER             reduce using rule 12 (statement)
    RW_FOR                 reduce using rule 12 (statement)
    RW_RETURN              reduce using rule 12 (statement)
    RW_IF                  reduce using rule 12 (statement)
    RW_ELSE                reduce using rule 12 (statement)
    IO_READ                reduce using rule 12 (statement)
    IO_WRITE               reduce using rule 12 (statement)
    UNARY_LIST_OP          reduce using rule 12 (statement)
    '{'                    reduce using rule 12 (statement)
    '}'                    reduce using rule 12 (statement)
    '('                    reduce using rule 12 (statement)
    '!'                    reduce using rule 12 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 12 (statement)


State 323

   29 expression_statement: expression • ';'

    ';'  shift, and go to state 343


State 324

   13 statement: variable_declaration_statement •

    error                  reduce using rule 13 (statement)
    C_INTEGER              reduce using rule 13 (statement)
    C_FLOAT                reduce using rule 13 (statement)
    C_NIL                  reduce using rule 13 (statement)
    SIMPLE_TYPE            reduce using rule 13 (statement)
    IDENTIFIER             reduce using rule 13 (statement)
    RW_FOR                 reduce using rule 13 (statement)
    RW_RETURN              reduce using rule 13 (statement)
    RW_IF                  reduce using rule 13 (statement)
    RW_ELSE                reduce using rule 13 (statement)
    IO_READ                reduce using rule 13 (statement)
    IO_WRITE               reduce using rule 13 (statement)
    UNARY_LIST_OP          reduce using rule 13 (statement)
    '{'                    reduce using rule 13 (statement)
    '}'                    reduce using rule 13 (statement)
    '('                    reduce using rule 13 (statement)
    '!'                    reduce using rule 13 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 13 (statement)


State 325

   32 input_statement: IO_READ '(' IDENTIFIER ')' ';' •

    error                  reduce using rule 32 (input_statement)
    C_INTEGER              reduce using rule 32 (input_statement)
    C_FLOAT                reduce using rule 32 (input_statement)
    C_NIL                  reduce using rule 32 (input_statement)
    SIMPLE_TYPE            reduce using rule 32 (input_statement)
    IDENTIFIER             reduce using rule 32 (input_statement)
    RW_FOR                 reduce using rule 32 (input_statement)
    RW_RETURN              reduce using rule 32 (input_statement)
    RW_IF                  reduce using rule 32 (input_statement)
    IO_READ                reduce using rule 32 (input_statement)
    IO_WRITE               reduce using rule 32 (input_statement)
    UNARY_LIST_OP          reduce using rule 32 (input_statement)
    '{'                    reduce using rule 32 (input_statement)
    '}'                    reduce using rule 32 (input_statement)
    '('                    reduce using rule 32 (input_statement)
    '!'                    reduce using rule 32 (input_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 32 (input_statement)


State 326

   34 output_statement: IO_WRITE '(' LIT_STRING ')' ';' •

    error                  reduce using rule 34 (output_statement)
    C_INTEGER              reduce using rule 34 (output_statement)
    C_FLOAT                reduce using rule 34 (output_statement)
    C_NIL                  reduce using rule 34 (output_statement)
    SIMPLE_TYPE            reduce using rule 34 (output_statement)
    IDENTIFIER             reduce using rule 34 (output_statement)
    RW_FOR                 reduce using rule 34 (output_statement)
    RW_RETURN              reduce using rule 34 (output_statement)
    RW_IF                  reduce using rule 34 (output_statement)
    IO_READ                reduce using rule 34 (output_statement)
    IO_WRITE               reduce using rule 34 (output_statement)
    UNARY_LIST_OP          reduce using rule 34 (output_statement)
    '{'                    reduce using rule 34 (output_statement)
    '}'                    reduce using rule 34 (output_statement)
    '('                    reduce using rule 34 (output_statement)
    '!'                    reduce using rule 34 (output_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 34 (output_statement)


State 327

   33 output_statement: IO_WRITE '(' expression ')' ';' •

    error                  reduce using rule 33 (output_statement)
    C_INTEGER              reduce using rule 33 (output_statement)
    C_FLOAT                reduce using rule 33 (output_statement)
    C_NIL                  reduce using rule 33 (output_statement)
    SIMPLE_TYPE            reduce using rule 33 (output_statement)
    IDENTIFIER             reduce using rule 33 (output_statement)
    RW_FOR                 reduce using rule 33 (output_statement)
    RW_RETURN              reduce using rule 33 (output_statement)
    RW_IF                  reduce using rule 33 (output_statement)
    IO_READ                reduce using rule 33 (output_statement)
    IO_WRITE               reduce using rule 33 (output_statement)
    UNARY_LIST_OP          reduce using rule 33 (output_statement)
    '{'                    reduce using rule 33 (output_statement)
    '}'                    reduce using rule 33 (output_statement)
    '('                    reduce using rule 33 (output_statement)
    '!'                    reduce using rule 33 (output_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 33 (output_statement)


State 328

   26 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative • ';' expression_optative ')' statement

    ';'  shift, and go to state 344


State 329

   27 if_else_statement: RW_IF '(' expression ')' statement •
   28                  | RW_IF '(' expression ')' statement • RW_ELSE statement

    RW_ELSE  shift, and go to state 345

    $end         reduce using rule 27 (if_else_statement)
    SIMPLE_TYPE  reduce using rule 27 (if_else_statement)


State 330

   32 input_statement: IO_READ '(' IDENTIFIER ')' ';' •

    $end         reduce using rule 32 (input_statement)
    SIMPLE_TYPE  reduce using rule 32 (input_statement)
    RW_ELSE      reduce using rule 32 (input_statement)


State 331

   34 output_statement: IO_WRITE '(' LIT_STRING ')' ';' •

    $end         reduce using rule 34 (output_statement)
    SIMPLE_TYPE  reduce using rule 34 (output_statement)
    RW_ELSE      reduce using rule 34 (output_statement)


State 332

   33 output_statement: IO_WRITE '(' expression ')' ';' •

    $end         reduce using rule 33 (output_statement)
    SIMPLE_TYPE  reduce using rule 33 (output_statement)
    RW_ELSE      reduce using rule 33 (output_statement)


State 333

   26 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' • expression_optative ')' statement

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    IDENTIFIER             shift, and go to state 155
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    ')'  reduce using rule 45 (expression_optative)

    expression                 go to state 206
    function_call_expression   go to state 160
    expression_optative        go to state 346
    or_expression              go to state 161
    and_expression             go to state 162
    equality_expression        go to state 163
    relational_expression      go to state 164
    list_expression            go to state 165
    addition_expression        go to state 166
    multiplication_expression  go to state 167
    simple_value               go to state 168
    constant                   go to state 169


State 334

   70 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE • IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 347


State 335

   69 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 348


State 336

   26 for_statement: RW_FOR '(' • expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    IDENTIFIER             shift, and go to state 33
    UNARY_LIST_OP          shift, and go to state 39
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    ';'  reduce using rule 45 (expression_optative)

    expression                 go to state 97
    function_call_expression   go to state 54
    expression_optative        go to state 349
    or_expression              go to state 55
    and_expression             go to state 56
    equality_expression        go to state 57
    relational_expression      go to state 58
    list_expression            go to state 59
    addition_expression        go to state 60
    multiplication_expression  go to state 61
    simple_value               go to state 62
    constant                   go to state 64


State 337

   35 return_statement: RW_RETURN expression • ';'

    ';'  shift, and go to state 350


State 338

   27 if_else_statement: RW_IF '(' • expression ')' statement
   28                  | RW_IF '(' • expression ')' statement RW_ELSE statement

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    IDENTIFIER             shift, and go to state 155
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    expression                 go to state 351
    function_call_expression   go to state 160
    or_expression              go to state 161
    and_expression             go to state 162
    equality_expression        go to state 163
    relational_expression      go to state 164
    list_expression            go to state 165
    addition_expression        go to state 166
    multiplication_expression  go to state 167
    simple_value               go to state 168
    constant                   go to state 169


State 339

   32 input_statement: IO_READ '(' • IDENTIFIER ')' ';'

    IDENTIFIER  shift, and go to state 352


State 340

   33 output_statement: IO_WRITE '(' • expression ')' ';'
   34                 | IO_WRITE '(' • LIT_STRING ')' ';'

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    LIT_STRING             shift, and go to state 353
    IDENTIFIER             shift, and go to state 155
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    expression                 go to state 354
    function_call_expression   go to state 160
    or_expression              go to state 161
    and_expression             go to state 162
    equality_expression        go to state 163
    relational_expression      go to state 164
    list_expression            go to state 165
    addition_expression        go to state 166
    multiplication_expression  go to state 167
    simple_value               go to state 168
    constant                   go to state 169


State 341

    7 block: '{' statements • '}'
    8 statements: statements • statement

    error                  shift, and go to state 134
    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    SIMPLE_TYPE            shift, and go to state 135
    IDENTIFIER             shift, and go to state 33
    RW_FOR                 shift, and go to state 136
    RW_RETURN              shift, and go to state 137
    RW_IF                  shift, and go to state 138
    IO_READ                shift, and go to state 139
    IO_WRITE               shift, and go to state 140
    UNARY_LIST_OP          shift, and go to state 39
    '{'                    shift, and go to state 141
    '}'                    shift, and go to state 355
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    block                           go to state 142
    statement                       go to state 105
    for_statement                   go to state 143
    if_else_statement               go to state 144
    expression_statement            go to state 145
    io_statement                    go to state 146
    input_statement                 go to state 147
    output_statement                go to state 148
    return_statement                go to state 149
    expression                      go to state 150
    function_call_expression        go to state 54
    or_expression                   go to state 55
    and_expression                  go to state 56
    equality_expression             go to state 57
    relational_expression           go to state 58
    list_expression                 go to state 59
    addition_expression             go to state 60
    multiplication_expression       go to state 61
    simple_value                    go to state 62
    variable_declaration_statement  go to state 151
    constant                        go to state 64


State 342

   28 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE • statement

    error                  shift, and go to state 134
    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    SIMPLE_TYPE            shift, and go to state 135
    IDENTIFIER             shift, and go to state 33
    RW_FOR                 shift, and go to state 136
    RW_RETURN              shift, and go to state 137
    RW_IF                  shift, and go to state 138
    IO_READ                shift, and go to state 139
    IO_WRITE               shift, and go to state 140
    UNARY_LIST_OP          shift, and go to state 39
    '{'                    shift, and go to state 141
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    block                           go to state 142
    statement                       go to state 356
    for_statement                   go to state 143
    if_else_statement               go to state 144
    expression_statement            go to state 145
    io_statement                    go to state 146
    input_statement                 go to state 147
    output_statement                go to state 148
    return_statement                go to state 149
    expression                      go to state 150
    function_call_expression        go to state 54
    or_expression                   go to state 55
    and_expression                  go to state 56
    equality_expression             go to state 57
    relational_expression           go to state 58
    list_expression                 go to state 59
    addition_expression             go to state 60
    multiplication_expression       go to state 61
    simple_value                    go to state 62
    variable_declaration_statement  go to state 151
    constant                        go to state 64


State 343

   29 expression_statement: expression ';' •

    error                  reduce using rule 29 (expression_statement)
    C_INTEGER              reduce using rule 29 (expression_statement)
    C_FLOAT                reduce using rule 29 (expression_statement)
    C_NIL                  reduce using rule 29 (expression_statement)
    SIMPLE_TYPE            reduce using rule 29 (expression_statement)
    IDENTIFIER             reduce using rule 29 (expression_statement)
    RW_FOR                 reduce using rule 29 (expression_statement)
    RW_RETURN              reduce using rule 29 (expression_statement)
    RW_IF                  reduce using rule 29 (expression_statement)
    RW_ELSE                reduce using rule 29 (expression_statement)
    IO_READ                reduce using rule 29 (expression_statement)
    IO_WRITE               reduce using rule 29 (expression_statement)
    UNARY_LIST_OP          reduce using rule 29 (expression_statement)
    '{'                    reduce using rule 29 (expression_statement)
    '}'                    reduce using rule 29 (expression_statement)
    '('                    reduce using rule 29 (expression_statement)
    '!'                    reduce using rule 29 (expression_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 29 (expression_statement)


State 344

   26 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' • expression_optative ')' statement

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    IDENTIFIER             shift, and go to state 155
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    ')'  reduce using rule 45 (expression_optative)

    expression                 go to state 206
    function_call_expression   go to state 160
    expression_optative        go to state 357
    or_expression              go to state 161
    and_expression             go to state 162
    equality_expression        go to state 163
    relational_expression      go to state 164
    list_expression            go to state 165
    addition_expression        go to state 166
    multiplication_expression  go to state 167
    simple_value               go to state 168
    constant                   go to state 169


State 345

   28 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE • statement

    error                  shift, and go to state 188
    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    SIMPLE_TYPE            shift, and go to state 189
    IDENTIFIER             shift, and go to state 33
    RW_FOR                 shift, and go to state 190
    RW_RETURN              shift, and go to state 191
    RW_IF                  shift, and go to state 192
    IO_READ                shift, and go to state 193
    IO_WRITE               shift, and go to state 194
    UNARY_LIST_OP          shift, and go to state 39
    '{'                    shift, and go to state 195
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    block                           go to state 196
    statement                       go to state 358
    for_statement                   go to state 197
    if_else_statement               go to state 198
    expression_statement            go to state 199
    io_statement                    go to state 200
    input_statement                 go to state 201
    output_statement                go to state 202
    return_statement                go to state 203
    expression                      go to state 204
    function_call_expression        go to state 54
    or_expression                   go to state 55
    and_expression                  go to state 56
    equality_expression             go to state 57
    relational_expression           go to state 58
    list_expression                 go to state 59
    addition_expression             go to state 60
    multiplication_expression       go to state 61
    simple_value                    go to state 62
    variable_declaration_statement  go to state 205
    constant                        go to state 64


State 346

   26 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative • ')' statement

    ')'  shift, and go to state 359


State 347

   70 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 360


State 348

   69 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER ';' •

    error                  reduce using rule 69 (variable_declaration_statement)
    C_INTEGER              reduce using rule 69 (variable_declaration_statement)
    C_FLOAT                reduce using rule 69 (variable_declaration_statement)
    C_NIL                  reduce using rule 69 (variable_declaration_statement)
    SIMPLE_TYPE            reduce using rule 69 (variable_declaration_statement)
    IDENTIFIER             reduce using rule 69 (variable_declaration_statement)
    RW_FOR                 reduce using rule 69 (variable_declaration_statement)
    RW_RETURN              reduce using rule 69 (variable_declaration_statement)
    RW_IF                  reduce using rule 69 (variable_declaration_statement)
    RW_ELSE                reduce using rule 69 (variable_declaration_statement)
    IO_READ                reduce using rule 69 (variable_declaration_statement)
    IO_WRITE               reduce using rule 69 (variable_declaration_statement)
    UNARY_LIST_OP          reduce using rule 69 (variable_declaration_statement)
    '{'                    reduce using rule 69 (variable_declaration_statement)
    '}'                    reduce using rule 69 (variable_declaration_statement)
    '('                    reduce using rule 69 (variable_declaration_statement)
    '!'                    reduce using rule 69 (variable_declaration_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 69 (variable_declaration_statement)


State 349

   26 for_statement: RW_FOR '(' expression_optative • ';' or_expression_optative ';' expression_optative ')' statement

    ';'  shift, and go to state 361


State 350

   35 return_statement: RW_RETURN expression ';' •

    error                  reduce using rule 35 (return_statement)
    C_INTEGER              reduce using rule 35 (return_statement)
    C_FLOAT                reduce using rule 35 (return_statement)
    C_NIL                  reduce using rule 35 (return_statement)
    SIMPLE_TYPE            reduce using rule 35 (return_statement)
    IDENTIFIER             reduce using rule 35 (return_statement)
    RW_FOR                 reduce using rule 35 (return_statement)
    RW_RETURN              reduce using rule 35 (return_statement)
    RW_IF                  reduce using rule 35 (return_statement)
    RW_ELSE                reduce using rule 35 (return_statement)
    IO_READ                reduce using rule 35 (return_statement)
    IO_WRITE               reduce using rule 35 (return_statement)
    UNARY_LIST_OP          reduce using rule 35 (return_statement)
    '{'                    reduce using rule 35 (return_statement)
    '}'                    reduce using rule 35 (return_statement)
    '('                    reduce using rule 35 (return_statement)
    '!'                    reduce using rule 35 (return_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 35 (return_statement)


State 351

   27 if_else_statement: RW_IF '(' expression • ')' statement
   28                  | RW_IF '(' expression • ')' statement RW_ELSE statement

    ')'  shift, and go to state 362


State 352

   32 input_statement: IO_READ '(' IDENTIFIER • ')' ';'

    ')'  shift, and go to state 363


State 353

   34 output_statement: IO_WRITE '(' LIT_STRING • ')' ';'

    ')'  shift, and go to state 364


State 354

   33 output_statement: IO_WRITE '(' expression • ')' ';'

    ')'  shift, and go to state 365


State 355

    7 block: '{' statements '}' •

    error                  reduce using rule 7 (block)
    C_INTEGER              reduce using rule 7 (block)
    C_FLOAT                reduce using rule 7 (block)
    C_NIL                  reduce using rule 7 (block)
    SIMPLE_TYPE            reduce using rule 7 (block)
    IDENTIFIER             reduce using rule 7 (block)
    RW_FOR                 reduce using rule 7 (block)
    RW_RETURN              reduce using rule 7 (block)
    RW_IF                  reduce using rule 7 (block)
    RW_ELSE                reduce using rule 7 (block)
    IO_READ                reduce using rule 7 (block)
    IO_WRITE               reduce using rule 7 (block)
    UNARY_LIST_OP          reduce using rule 7 (block)
    '{'                    reduce using rule 7 (block)
    '}'                    reduce using rule 7 (block)
    '('                    reduce using rule 7 (block)
    '!'                    reduce using rule 7 (block)
    ARITMETIC_OP_ADDITIVE  reduce using rule 7 (block)


State 356

   28 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE statement •

    error                  reduce using rule 28 (if_else_statement)
    C_INTEGER              reduce using rule 28 (if_else_statement)
    C_FLOAT                reduce using rule 28 (if_else_statement)
    C_NIL                  reduce using rule 28 (if_else_statement)
    SIMPLE_TYPE            reduce using rule 28 (if_else_statement)
    IDENTIFIER             reduce using rule 28 (if_else_statement)
    RW_FOR                 reduce using rule 28 (if_else_statement)
    RW_RETURN              reduce using rule 28 (if_else_statement)
    RW_IF                  reduce using rule 28 (if_else_statement)
    IO_READ                reduce using rule 28 (if_else_statement)
    IO_WRITE               reduce using rule 28 (if_else_statement)
    UNARY_LIST_OP          reduce using rule 28 (if_else_statement)
    '{'                    reduce using rule 28 (if_else_statement)
    '}'                    reduce using rule 28 (if_else_statement)
    '('                    reduce using rule 28 (if_else_statement)
    '!'                    reduce using rule 28 (if_else_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 28 (if_else_statement)


State 357

   26 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative • ')' statement

    ')'  shift, and go to state 366


State 358

   28 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE statement •

    $end         reduce using rule 28 (if_else_statement)
    SIMPLE_TYPE  reduce using rule 28 (if_else_statement)
    RW_ELSE      reduce using rule 28 (if_else_statement)


State 359

   26 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' • statement

    error                  shift, and go to state 134
    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    SIMPLE_TYPE            shift, and go to state 135
    IDENTIFIER             shift, and go to state 33
    RW_FOR                 shift, and go to state 136
    RW_RETURN              shift, and go to state 137
    RW_IF                  shift, and go to state 138
    IO_READ                shift, and go to state 139
    IO_WRITE               shift, and go to state 140
    UNARY_LIST_OP          shift, and go to state 39
    '{'                    shift, and go to state 141
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    block                           go to state 142
    statement                       go to state 367
    for_statement                   go to state 143
    if_else_statement               go to state 144
    expression_statement            go to state 145
    io_statement                    go to state 146
    input_statement                 go to state 147
    output_statement                go to state 148
    return_statement                go to state 149
    expression                      go to state 150
    function_call_expression        go to state 54
    or_expression                   go to state 55
    and_expression                  go to state 56
    equality_expression             go to state 57
    relational_expression           go to state 58
    list_expression                 go to state 59
    addition_expression             go to state 60
    multiplication_expression       go to state 61
    simple_value                    go to state 62
    variable_declaration_statement  go to state 151
    constant                        go to state 64


State 360

   70 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER ';' •

    error                  reduce using rule 70 (variable_declaration_statement)
    C_INTEGER              reduce using rule 70 (variable_declaration_statement)
    C_FLOAT                reduce using rule 70 (variable_declaration_statement)
    C_NIL                  reduce using rule 70 (variable_declaration_statement)
    SIMPLE_TYPE            reduce using rule 70 (variable_declaration_statement)
    IDENTIFIER             reduce using rule 70 (variable_declaration_statement)
    RW_FOR                 reduce using rule 70 (variable_declaration_statement)
    RW_RETURN              reduce using rule 70 (variable_declaration_statement)
    RW_IF                  reduce using rule 70 (variable_declaration_statement)
    RW_ELSE                reduce using rule 70 (variable_declaration_statement)
    IO_READ                reduce using rule 70 (variable_declaration_statement)
    IO_WRITE               reduce using rule 70 (variable_declaration_statement)
    UNARY_LIST_OP          reduce using rule 70 (variable_declaration_statement)
    '{'                    reduce using rule 70 (variable_declaration_statement)
    '}'                    reduce using rule 70 (variable_declaration_statement)
    '('                    reduce using rule 70 (variable_declaration_statement)
    '!'                    reduce using rule 70 (variable_declaration_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 70 (variable_declaration_statement)


State 361

   26 for_statement: RW_FOR '(' expression_optative ';' • or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    IDENTIFIER             shift, and go to state 76
    UNARY_LIST_OP          shift, and go to state 39
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    ';'  reduce using rule 47 (or_expression_optative)

    or_expression_optative     go to state 368
    or_expression              go to state 123
    and_expression             go to state 56
    equality_expression        go to state 57
    relational_expression      go to state 58
    list_expression            go to state 59
    addition_expression        go to state 60
    multiplication_expression  go to state 61
    simple_value               go to state 62
    constant                   go to state 64


State 362

   27 if_else_statement: RW_IF '(' expression ')' • statement
   28                  | RW_IF '(' expression ')' • statement RW_ELSE statement

    error                  shift, and go to state 306
    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    SIMPLE_TYPE            shift, and go to state 307
    IDENTIFIER             shift, and go to state 33
    RW_FOR                 shift, and go to state 308
    RW_RETURN              shift, and go to state 309
    RW_IF                  shift, and go to state 310
    IO_READ                shift, and go to state 311
    IO_WRITE               shift, and go to state 312
    UNARY_LIST_OP          shift, and go to state 39
    '{'                    shift, and go to state 313
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    block                           go to state 314
    statement                       go to state 369
    for_statement                   go to state 316
    if_else_statement               go to state 317
    expression_statement            go to state 318
    io_statement                    go to state 319
    input_statement                 go to state 320
    output_statement                go to state 321
    return_statement                go to state 322
    expression                      go to state 323
    function_call_expression        go to state 54
    or_expression                   go to state 55
    and_expression                  go to state 56
    equality_expression             go to state 57
    relational_expression           go to state 58
    list_expression                 go to state 59
    addition_expression             go to state 60
    multiplication_expression       go to state 61
    simple_value                    go to state 62
    variable_declaration_statement  go to state 324
    constant                        go to state 64


State 363

   32 input_statement: IO_READ '(' IDENTIFIER ')' • ';'

    ';'  shift, and go to state 370


State 364

   34 output_statement: IO_WRITE '(' LIT_STRING ')' • ';'

    ';'  shift, and go to state 371


State 365

   33 output_statement: IO_WRITE '(' expression ')' • ';'

    ';'  shift, and go to state 372


State 366

   26 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' • statement

    error                  shift, and go to state 188
    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    SIMPLE_TYPE            shift, and go to state 189
    IDENTIFIER             shift, and go to state 33
    RW_FOR                 shift, and go to state 190
    RW_RETURN              shift, and go to state 191
    RW_IF                  shift, and go to state 192
    IO_READ                shift, and go to state 193
    IO_WRITE               shift, and go to state 194
    UNARY_LIST_OP          shift, and go to state 39
    '{'                    shift, and go to state 195
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    block                           go to state 196
    statement                       go to state 373
    for_statement                   go to state 197
    if_else_statement               go to state 198
    expression_statement            go to state 199
    io_statement                    go to state 200
    input_statement                 go to state 201
    output_statement                go to state 202
    return_statement                go to state 203
    expression                      go to state 204
    function_call_expression        go to state 54
    or_expression                   go to state 55
    and_expression                  go to state 56
    equality_expression             go to state 57
    relational_expression           go to state 58
    list_expression                 go to state 59
    addition_expression             go to state 60
    multiplication_expression       go to state 61
    simple_value                    go to state 62
    variable_declaration_statement  go to state 205
    constant                        go to state 64


State 367

   26 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement •

    error                  reduce using rule 26 (for_statement)
    C_INTEGER              reduce using rule 26 (for_statement)
    C_FLOAT                reduce using rule 26 (for_statement)
    C_NIL                  reduce using rule 26 (for_statement)
    SIMPLE_TYPE            reduce using rule 26 (for_statement)
    IDENTIFIER             reduce using rule 26 (for_statement)
    RW_FOR                 reduce using rule 26 (for_statement)
    RW_RETURN              reduce using rule 26 (for_statement)
    RW_IF                  reduce using rule 26 (for_statement)
    IO_READ                reduce using rule 26 (for_statement)
    IO_WRITE               reduce using rule 26 (for_statement)
    UNARY_LIST_OP          reduce using rule 26 (for_statement)
    '{'                    reduce using rule 26 (for_statement)
    '}'                    reduce using rule 26 (for_statement)
    '('                    reduce using rule 26 (for_statement)
    '!'                    reduce using rule 26 (for_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 26 (for_statement)


State 368

   26 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative • ';' expression_optative ')' statement

    ';'  shift, and go to state 374


State 369

   27 if_else_statement: RW_IF '(' expression ')' statement •
   28                  | RW_IF '(' expression ')' statement • RW_ELSE statement

    RW_ELSE  shift, and go to state 375

    error                  reduce using rule 27 (if_else_statement)
    C_INTEGER              reduce using rule 27 (if_else_statement)
    C_FLOAT                reduce using rule 27 (if_else_statement)
    C_NIL                  reduce using rule 27 (if_else_statement)
    SIMPLE_TYPE            reduce using rule 27 (if_else_statement)
    IDENTIFIER             reduce using rule 27 (if_else_statement)
    RW_FOR                 reduce using rule 27 (if_else_statement)
    RW_RETURN              reduce using rule 27 (if_else_statement)
    RW_IF                  reduce using rule 27 (if_else_statement)
    IO_READ                reduce using rule 27 (if_else_statement)
    IO_WRITE               reduce using rule 27 (if_else_statement)
    UNARY_LIST_OP          reduce using rule 27 (if_else_statement)
    '{'                    reduce using rule 27 (if_else_statement)
    '}'                    reduce using rule 27 (if_else_statement)
    '('                    reduce using rule 27 (if_else_statement)
    '!'                    reduce using rule 27 (if_else_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 27 (if_else_statement)


State 370

   32 input_statement: IO_READ '(' IDENTIFIER ')' ';' •

    error                  reduce using rule 32 (input_statement)
    C_INTEGER              reduce using rule 32 (input_statement)
    C_FLOAT                reduce using rule 32 (input_statement)
    C_NIL                  reduce using rule 32 (input_statement)
    SIMPLE_TYPE            reduce using rule 32 (input_statement)
    IDENTIFIER             reduce using rule 32 (input_statement)
    RW_FOR                 reduce using rule 32 (input_statement)
    RW_RETURN              reduce using rule 32 (input_statement)
    RW_IF                  reduce using rule 32 (input_statement)
    RW_ELSE                reduce using rule 32 (input_statement)
    IO_READ                reduce using rule 32 (input_statement)
    IO_WRITE               reduce using rule 32 (input_statement)
    UNARY_LIST_OP          reduce using rule 32 (input_statement)
    '{'                    reduce using rule 32 (input_statement)
    '}'                    reduce using rule 32 (input_statement)
    '('                    reduce using rule 32 (input_statement)
    '!'                    reduce using rule 32 (input_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 32 (input_statement)


State 371

   34 output_statement: IO_WRITE '(' LIT_STRING ')' ';' •

    error                  reduce using rule 34 (output_statement)
    C_INTEGER              reduce using rule 34 (output_statement)
    C_FLOAT                reduce using rule 34 (output_statement)
    C_NIL                  reduce using rule 34 (output_statement)
    SIMPLE_TYPE            reduce using rule 34 (output_statement)
    IDENTIFIER             reduce using rule 34 (output_statement)
    RW_FOR                 reduce using rule 34 (output_statement)
    RW_RETURN              reduce using rule 34 (output_statement)
    RW_IF                  reduce using rule 34 (output_statement)
    RW_ELSE                reduce using rule 34 (output_statement)
    IO_READ                reduce using rule 34 (output_statement)
    IO_WRITE               reduce using rule 34 (output_statement)
    UNARY_LIST_OP          reduce using rule 34 (output_statement)
    '{'                    reduce using rule 34 (output_statement)
    '}'                    reduce using rule 34 (output_statement)
    '('                    reduce using rule 34 (output_statement)
    '!'                    reduce using rule 34 (output_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 34 (output_statement)


State 372

   33 output_statement: IO_WRITE '(' expression ')' ';' •

    error                  reduce using rule 33 (output_statement)
    C_INTEGER              reduce using rule 33 (output_statement)
    C_FLOAT                reduce using rule 33 (output_statement)
    C_NIL                  reduce using rule 33 (output_statement)
    SIMPLE_TYPE            reduce using rule 33 (output_statement)
    IDENTIFIER             reduce using rule 33 (output_statement)
    RW_FOR                 reduce using rule 33 (output_statement)
    RW_RETURN              reduce using rule 33 (output_statement)
    RW_IF                  reduce using rule 33 (output_statement)
    RW_ELSE                reduce using rule 33 (output_statement)
    IO_READ                reduce using rule 33 (output_statement)
    IO_WRITE               reduce using rule 33 (output_statement)
    UNARY_LIST_OP          reduce using rule 33 (output_statement)
    '{'                    reduce using rule 33 (output_statement)
    '}'                    reduce using rule 33 (output_statement)
    '('                    reduce using rule 33 (output_statement)
    '!'                    reduce using rule 33 (output_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 33 (output_statement)


State 373

   26 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement •

    $end         reduce using rule 26 (for_statement)
    SIMPLE_TYPE  reduce using rule 26 (for_statement)
    RW_ELSE      reduce using rule 26 (for_statement)


State 374

   26 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' • expression_optative ')' statement

    C_INTEGER              shift, and go to state 152
    C_FLOAT                shift, and go to state 153
    C_NIL                  shift, and go to state 154
    IDENTIFIER             shift, and go to state 155
    UNARY_LIST_OP          shift, and go to state 156
    '('                    shift, and go to state 157
    '!'                    shift, and go to state 158
    ARITMETIC_OP_ADDITIVE  shift, and go to state 159

    ')'  reduce using rule 45 (expression_optative)

    expression                 go to state 206
    function_call_expression   go to state 160
    expression_optative        go to state 376
    or_expression              go to state 161
    and_expression             go to state 162
    equality_expression        go to state 163
    relational_expression      go to state 164
    list_expression            go to state 165
    addition_expression        go to state 166
    multiplication_expression  go to state 167
    simple_value               go to state 168
    constant                   go to state 169


State 375

   28 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE • statement

    error                  shift, and go to state 306
    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    SIMPLE_TYPE            shift, and go to state 307
    IDENTIFIER             shift, and go to state 33
    RW_FOR                 shift, and go to state 308
    RW_RETURN              shift, and go to state 309
    RW_IF                  shift, and go to state 310
    IO_READ                shift, and go to state 311
    IO_WRITE               shift, and go to state 312
    UNARY_LIST_OP          shift, and go to state 39
    '{'                    shift, and go to state 313
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    block                           go to state 314
    statement                       go to state 377
    for_statement                   go to state 316
    if_else_statement               go to state 317
    expression_statement            go to state 318
    io_statement                    go to state 319
    input_statement                 go to state 320
    output_statement                go to state 321
    return_statement                go to state 322
    expression                      go to state 323
    function_call_expression        go to state 54
    or_expression                   go to state 55
    and_expression                  go to state 56
    equality_expression             go to state 57
    relational_expression           go to state 58
    list_expression                 go to state 59
    addition_expression             go to state 60
    multiplication_expression       go to state 61
    simple_value                    go to state 62
    variable_declaration_statement  go to state 324
    constant                        go to state 64


State 376

   26 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative • ')' statement

    ')'  shift, and go to state 378


State 377

   28 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE statement •

    error                  reduce using rule 28 (if_else_statement)
    C_INTEGER              reduce using rule 28 (if_else_statement)
    C_FLOAT                reduce using rule 28 (if_else_statement)
    C_NIL                  reduce using rule 28 (if_else_statement)
    SIMPLE_TYPE            reduce using rule 28 (if_else_statement)
    IDENTIFIER             reduce using rule 28 (if_else_statement)
    RW_FOR                 reduce using rule 28 (if_else_statement)
    RW_RETURN              reduce using rule 28 (if_else_statement)
    RW_IF                  reduce using rule 28 (if_else_statement)
    RW_ELSE                reduce using rule 28 (if_else_statement)
    IO_READ                reduce using rule 28 (if_else_statement)
    IO_WRITE               reduce using rule 28 (if_else_statement)
    UNARY_LIST_OP          reduce using rule 28 (if_else_statement)
    '{'                    reduce using rule 28 (if_else_statement)
    '}'                    reduce using rule 28 (if_else_statement)
    '('                    reduce using rule 28 (if_else_statement)
    '!'                    reduce using rule 28 (if_else_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 28 (if_else_statement)


State 378

   26 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' • statement

    error                  shift, and go to state 306
    C_INTEGER              shift, and go to state 29
    C_FLOAT                shift, and go to state 30
    C_NIL                  shift, and go to state 31
    SIMPLE_TYPE            shift, and go to state 307
    IDENTIFIER             shift, and go to state 33
    RW_FOR                 shift, and go to state 308
    RW_RETURN              shift, and go to state 309
    RW_IF                  shift, and go to state 310
    IO_READ                shift, and go to state 311
    IO_WRITE               shift, and go to state 312
    UNARY_LIST_OP          shift, and go to state 39
    '{'                    shift, and go to state 313
    '('                    shift, and go to state 41
    '!'                    shift, and go to state 42
    ARITMETIC_OP_ADDITIVE  shift, and go to state 43

    block                           go to state 314
    statement                       go to state 379
    for_statement                   go to state 316
    if_else_statement               go to state 317
    expression_statement            go to state 318
    io_statement                    go to state 319
    input_statement                 go to state 320
    output_statement                go to state 321
    return_statement                go to state 322
    expression                      go to state 323
    function_call_expression        go to state 54
    or_expression                   go to state 55
    and_expression                  go to state 56
    equality_expression             go to state 57
    relational_expression           go to state 58
    list_expression                 go to state 59
    addition_expression             go to state 60
    multiplication_expression       go to state 61
    simple_value                    go to state 62
    variable_declaration_statement  go to state 324
    constant                        go to state 64


State 379

   26 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement •

    error                  reduce using rule 26 (for_statement)
    C_INTEGER              reduce using rule 26 (for_statement)
    C_FLOAT                reduce using rule 26 (for_statement)
    C_NIL                  reduce using rule 26 (for_statement)
    SIMPLE_TYPE            reduce using rule 26 (for_statement)
    IDENTIFIER             reduce using rule 26 (for_statement)
    RW_FOR                 reduce using rule 26 (for_statement)
    RW_RETURN              reduce using rule 26 (for_statement)
    RW_IF                  reduce using rule 26 (for_statement)
    RW_ELSE                reduce using rule 26 (for_statement)
    IO_READ                reduce using rule 26 (for_statement)
    IO_WRITE               reduce using rule 26 (for_statement)
    UNARY_LIST_OP          reduce using rule 26 (for_statement)
    '{'                    reduce using rule 26 (for_statement)
    '}'                    reduce using rule 26 (for_statement)
    '('                    reduce using rule 26 (for_statement)
    '!'                    reduce using rule 26 (for_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 26 (for_statement)
