Grammar

    0 $accept: program $end

    1 program: declarations

    2 declarations: declarations declaration
    3             | declaration
    4             | error

    5 declaration: function_declaration_statement
    6            | variable_declaration_statement

    7 block: '{' statements '}'

    8 statements: statements statement
    9           | statement

   10 statement: expression_statement
   11          | io_statement
   12          | return_statement
   13          | variable_declaration_statement
   14          | for_statement
   15          | if_else_statement
   16          | block

   17 function_declaration_statement: TYPE IDENTIFIER '(' parameters_optative ')' statement

   18 parameters_optative: %empty
   19                    | parameters

   20 parameters: parameters ',' parameter
   21           | parameter

   22 parameter: TYPE IDENTIFIER

   23 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement

   24 if_else_statement: RW_IF '(' expression ')' statement
   25                  | RW_IF '(' expression ')' statement RW_ELSE statement

   26 expression_statement: expression ';'

   27 io_statement: input_statement
   28             | output_statement

   29 input_statement: IO_READ '(' IDENTIFIER ')' ';'

   30 output_statement: IO_WRITE '(' expression ')' ';'
   31                 | IO_WRITE '(' LIT_STRING ')' ';'

   32 return_statement: RW_RETURN expression ';'

   33 expression: IDENTIFIER '=' expression
   34           | or_expression
   35           | function_call_expression

   36 function_call_expression: IDENTIFIER '(' function_arguments_optional ')'

   37 function_arguments_optional: %empty
   38                            | function_arguments

   39 function_arguments: function_arguments ',' function_argument
   40                   | function_argument

   41 function_argument: expression

   42 expression_optative: %empty
   43                    | expression

   44 or_expression_optative: %empty
   45                       | or_expression

   46 or_expression: or_expression LOGICAL_OP_OR and_expression
   47              | and_expression

   48 and_expression: and_expression LOGICAL_OP_AND equality_expression
   49               | equality_expression

   50 equality_expression: equality_expression EQUALITY_OP relational_expression
   51                    | relational_expression

   52 relational_expression: relational_expression RELATIONAL_OP list_expression
   53                      | list_expression

   54 list_expression: list_expression BINARY_LIST_OP addition_expression
   55                | addition_expression

   56 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE multiplication_expression
   57                    | multiplication_expression

   58 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE simple_value
   59                          | simple_value

   60 simple_value: constant
   61             | IDENTIFIER
   62             | ARITMETIC_OP_ADDITIVE simple_value
   63             | '!' simple_value
   64             | UNARY_LIST_OP simple_value
   65             | '(' expression ')'

   66 variable_declaration_statement: TYPE IDENTIFIER ';'

   67 constant: C_INTEGER
   68         | C_FLOAT
   69         | C_NIL


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 63
    '(' (40) 17 23 24 25 29 30 31 36 65
    ')' (41) 17 23 24 25 29 30 31 36 65
    ',' (44) 20 39
    ';' (59) 23 26 29 30 31 32 66
    '=' (61) 33
    '{' (123) 7
    '}' (125) 7
    error (256) 4
    C_INTEGER <token> (258) 67
    C_FLOAT <token> (259) 68
    C_NIL <token> (260) 69
    LIT_STRING <token> (261) 31
    TYPE <token> (262) 17 22 66
    IDENTIFIER <token> (263) 17 22 29 33 36 61 66
    RW_FOR <token> (264) 23
    RW_RETURN <token> (265) 32
    RW_IF <token> (266) 24 25
    RW_ELSE <token> (267) 25
    IO_READ <token> (268) 29
    IO_WRITE <token> (269) 30 31
    BINARY_LIST_OP <token> (270) 54
    UNARY_LIST_OP <token> (271) 64
    ARITMETIC_OP_ADDITIVE <token> (272) 56 62
    ARITMETIC_OP_MULTIPLICATIVE <token> (273) 58
    RELATIONAL_OP <token> (274) 52
    EQUALITY_OP <token> (275) 50
    LOGICAL_OP_OR <token> (276) 46
    LOGICAL_OP_AND <token> (277) 48
    THEN (278)


Nonterminals, with rules where they appear

    $accept (32)
        on left: 0
    program (33)
        on left: 1
        on right: 0
    declarations (34)
        on left: 2 3 4
        on right: 1 2
    declaration (35)
        on left: 5 6
        on right: 2 3
    block (36)
        on left: 7
        on right: 16
    statements (37)
        on left: 8 9
        on right: 7 8
    statement (38)
        on left: 10 11 12 13 14 15 16
        on right: 8 9 17 23 24 25
    function_declaration_statement (39)
        on left: 17
        on right: 5
    parameters_optative (40)
        on left: 18 19
        on right: 17
    parameters (41)
        on left: 20 21
        on right: 19 20
    parameter (42)
        on left: 22
        on right: 20 21
    for_statement (43)
        on left: 23
        on right: 14
    if_else_statement (44)
        on left: 24 25
        on right: 15
    expression_statement (45)
        on left: 26
        on right: 10
    io_statement (46)
        on left: 27 28
        on right: 11
    input_statement (47)
        on left: 29
        on right: 27
    output_statement (48)
        on left: 30 31
        on right: 28
    return_statement (49)
        on left: 32
        on right: 12
    expression (50)
        on left: 33 34 35
        on right: 24 25 26 30 32 33 41 43 65
    function_call_expression (51)
        on left: 36
        on right: 35
    function_arguments_optional (52)
        on left: 37 38
        on right: 36
    function_arguments (53)
        on left: 39 40
        on right: 38 39
    function_argument (54)
        on left: 41
        on right: 39 40
    expression_optative (55)
        on left: 42 43
        on right: 23
    or_expression_optative (56)
        on left: 44 45
        on right: 23
    or_expression (57)
        on left: 46 47
        on right: 34 45 46
    and_expression (58)
        on left: 48 49
        on right: 46 47 48
    equality_expression (59)
        on left: 50 51
        on right: 48 49 50
    relational_expression (60)
        on left: 52 53
        on right: 50 51 52
    list_expression (61)
        on left: 54 55
        on right: 52 53 54
    addition_expression (62)
        on left: 56 57
        on right: 54 55 56
    multiplication_expression (63)
        on left: 58 59
        on right: 56 57 58
    simple_value (64)
        on left: 60 61 62 63 64 65
        on right: 58 59 62 63 64
    variable_declaration_statement (65)
        on left: 66
        on right: 6 13
    constant (66)
        on left: 67 68 69
        on right: 60


State 0

    0 $accept: • program $end

    error  shift, and go to state 1
    TYPE   shift, and go to state 2

    program                         go to state 3
    declarations                    go to state 4
    declaration                     go to state 5
    function_declaration_statement  go to state 6
    variable_declaration_statement  go to state 7


State 1

    4 declarations: error •

    $end  reduce using rule 4 (declarations)
    TYPE  reduce using rule 4 (declarations)


State 2

   17 function_declaration_statement: TYPE • IDENTIFIER '(' parameters_optative ')' statement
   66 variable_declaration_statement: TYPE • IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 8


State 3

    0 $accept: program • $end

    $end  shift, and go to state 9


State 4

    1 program: declarations •
    2 declarations: declarations • declaration

    TYPE  shift, and go to state 2

    $end  reduce using rule 1 (program)

    declaration                     go to state 10
    function_declaration_statement  go to state 6
    variable_declaration_statement  go to state 7


State 5

    3 declarations: declaration •

    $end  reduce using rule 3 (declarations)
    TYPE  reduce using rule 3 (declarations)


State 6

    5 declaration: function_declaration_statement •

    $end  reduce using rule 5 (declaration)
    TYPE  reduce using rule 5 (declaration)


State 7

    6 declaration: variable_declaration_statement •

    $end  reduce using rule 6 (declaration)
    TYPE  reduce using rule 6 (declaration)


State 8

   17 function_declaration_statement: TYPE IDENTIFIER • '(' parameters_optative ')' statement
   66 variable_declaration_statement: TYPE IDENTIFIER • ';'

    '('  shift, and go to state 11
    ';'  shift, and go to state 12


State 9

    0 $accept: program $end •

    $default  accept


State 10

    2 declarations: declarations declaration •

    $end  reduce using rule 2 (declarations)
    TYPE  reduce using rule 2 (declarations)


State 11

   17 function_declaration_statement: TYPE IDENTIFIER '(' • parameters_optative ')' statement

    TYPE  shift, and go to state 13

    ')'  reduce using rule 18 (parameters_optative)

    parameters_optative  go to state 14
    parameters           go to state 15
    parameter            go to state 16


State 12

   66 variable_declaration_statement: TYPE IDENTIFIER ';' •

    $end  reduce using rule 66 (variable_declaration_statement)
    TYPE  reduce using rule 66 (variable_declaration_statement)


State 13

   22 parameter: TYPE • IDENTIFIER

    IDENTIFIER  shift, and go to state 17


State 14

   17 function_declaration_statement: TYPE IDENTIFIER '(' parameters_optative • ')' statement

    ')'  shift, and go to state 18


State 15

   19 parameters_optative: parameters •
   20 parameters: parameters • ',' parameter

    ','  shift, and go to state 19

    ')'  reduce using rule 19 (parameters_optative)


State 16

   21 parameters: parameter •

    ')'  reduce using rule 21 (parameters)
    ','  reduce using rule 21 (parameters)


State 17

   22 parameter: TYPE IDENTIFIER •

    ')'  reduce using rule 22 (parameter)
    ','  reduce using rule 22 (parameter)


State 18

   17 function_declaration_statement: TYPE IDENTIFIER '(' parameters_optative ')' • statement

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    TYPE                   shift, and go to state 23
    IDENTIFIER             shift, and go to state 24
    RW_FOR                 shift, and go to state 25
    RW_RETURN              shift, and go to state 26
    RW_IF                  shift, and go to state 27
    IO_READ                shift, and go to state 28
    IO_WRITE               shift, and go to state 29
    UNARY_LIST_OP          shift, and go to state 30
    '{'                    shift, and go to state 31
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    block                           go to state 35
    statement                       go to state 36
    for_statement                   go to state 37
    if_else_statement               go to state 38
    expression_statement            go to state 39
    io_statement                    go to state 40
    input_statement                 go to state 41
    output_statement                go to state 42
    return_statement                go to state 43
    expression                      go to state 44
    function_call_expression        go to state 45
    or_expression                   go to state 46
    and_expression                  go to state 47
    equality_expression             go to state 48
    relational_expression           go to state 49
    list_expression                 go to state 50
    addition_expression             go to state 51
    multiplication_expression       go to state 52
    simple_value                    go to state 53
    variable_declaration_statement  go to state 54
    constant                        go to state 55


State 19

   20 parameters: parameters ',' • parameter

    TYPE  shift, and go to state 13

    parameter  go to state 56


State 20

   67 constant: C_INTEGER •

    BINARY_LIST_OP               reduce using rule 67 (constant)
    ';'                          reduce using rule 67 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 67 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 67 (constant)
    RELATIONAL_OP                reduce using rule 67 (constant)
    EQUALITY_OP                  reduce using rule 67 (constant)
    LOGICAL_OP_OR                reduce using rule 67 (constant)
    LOGICAL_OP_AND               reduce using rule 67 (constant)


State 21

   68 constant: C_FLOAT •

    BINARY_LIST_OP               reduce using rule 68 (constant)
    ';'                          reduce using rule 68 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 68 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 68 (constant)
    RELATIONAL_OP                reduce using rule 68 (constant)
    EQUALITY_OP                  reduce using rule 68 (constant)
    LOGICAL_OP_OR                reduce using rule 68 (constant)
    LOGICAL_OP_AND               reduce using rule 68 (constant)


State 22

   69 constant: C_NIL •

    BINARY_LIST_OP               reduce using rule 69 (constant)
    ';'                          reduce using rule 69 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 69 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 69 (constant)
    RELATIONAL_OP                reduce using rule 69 (constant)
    EQUALITY_OP                  reduce using rule 69 (constant)
    LOGICAL_OP_OR                reduce using rule 69 (constant)
    LOGICAL_OP_AND               reduce using rule 69 (constant)


State 23

   66 variable_declaration_statement: TYPE • IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 57


State 24

   33 expression: IDENTIFIER • '=' expression
   36 function_call_expression: IDENTIFIER • '(' function_arguments_optional ')'
   61 simple_value: IDENTIFIER •

    '('  shift, and go to state 58
    '='  shift, and go to state 59

    BINARY_LIST_OP               reduce using rule 61 (simple_value)
    ';'                          reduce using rule 61 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 61 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 61 (simple_value)
    RELATIONAL_OP                reduce using rule 61 (simple_value)
    EQUALITY_OP                  reduce using rule 61 (simple_value)
    LOGICAL_OP_OR                reduce using rule 61 (simple_value)
    LOGICAL_OP_AND               reduce using rule 61 (simple_value)


State 25

   23 for_statement: RW_FOR • '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    '('  shift, and go to state 60


State 26

   32 return_statement: RW_RETURN • expression ';'

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    IDENTIFIER             shift, and go to state 24
    UNARY_LIST_OP          shift, and go to state 30
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    expression                 go to state 61
    function_call_expression   go to state 45
    or_expression              go to state 46
    and_expression             go to state 47
    equality_expression        go to state 48
    relational_expression      go to state 49
    list_expression            go to state 50
    addition_expression        go to state 51
    multiplication_expression  go to state 52
    simple_value               go to state 53
    constant                   go to state 55


State 27

   24 if_else_statement: RW_IF • '(' expression ')' statement
   25                  | RW_IF • '(' expression ')' statement RW_ELSE statement

    '('  shift, and go to state 62


State 28

   29 input_statement: IO_READ • '(' IDENTIFIER ')' ';'

    '('  shift, and go to state 63


State 29

   30 output_statement: IO_WRITE • '(' expression ')' ';'
   31                 | IO_WRITE • '(' LIT_STRING ')' ';'

    '('  shift, and go to state 64


State 30

   64 simple_value: UNARY_LIST_OP • simple_value

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    IDENTIFIER             shift, and go to state 65
    UNARY_LIST_OP          shift, and go to state 30
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    simple_value  go to state 66
    constant      go to state 55


State 31

    7 block: '{' • statements '}'

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    TYPE                   shift, and go to state 122
    IDENTIFIER             shift, and go to state 24
    RW_FOR                 shift, and go to state 123
    RW_RETURN              shift, and go to state 124
    RW_IF                  shift, and go to state 125
    IO_READ                shift, and go to state 126
    IO_WRITE               shift, and go to state 127
    UNARY_LIST_OP          shift, and go to state 30
    '{'                    shift, and go to state 128
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    block                           go to state 129
    statements                      go to state 67
    statement                       go to state 68
    for_statement                   go to state 130
    if_else_statement               go to state 131
    expression_statement            go to state 132
    io_statement                    go to state 133
    input_statement                 go to state 134
    output_statement                go to state 135
    return_statement                go to state 136
    expression                      go to state 137
    function_call_expression        go to state 45
    or_expression                   go to state 46
    and_expression                  go to state 47
    equality_expression             go to state 48
    relational_expression           go to state 49
    list_expression                 go to state 50
    addition_expression             go to state 51
    multiplication_expression       go to state 52
    simple_value                    go to state 53
    variable_declaration_statement  go to state 138
    constant                        go to state 55


State 32

   65 simple_value: '(' • expression ')'

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    IDENTIFIER             shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    expression                 go to state 69
    function_call_expression   go to state 147
    or_expression              go to state 148
    and_expression             go to state 149
    equality_expression        go to state 150
    relational_expression      go to state 151
    list_expression            go to state 152
    addition_expression        go to state 153
    multiplication_expression  go to state 154
    simple_value               go to state 155
    constant                   go to state 156


State 33

   63 simple_value: '!' • simple_value

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    IDENTIFIER             shift, and go to state 65
    UNARY_LIST_OP          shift, and go to state 30
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    simple_value  go to state 70
    constant      go to state 55


State 34

   62 simple_value: ARITMETIC_OP_ADDITIVE • simple_value

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    IDENTIFIER             shift, and go to state 65
    UNARY_LIST_OP          shift, and go to state 30
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    simple_value  go to state 71
    constant      go to state 55


State 35

   16 statement: block •

    $end  reduce using rule 16 (statement)
    TYPE  reduce using rule 16 (statement)


State 36

   17 function_declaration_statement: TYPE IDENTIFIER '(' parameters_optative ')' statement •

    $end  reduce using rule 17 (function_declaration_statement)
    TYPE  reduce using rule 17 (function_declaration_statement)


State 37

   14 statement: for_statement •

    $end  reduce using rule 14 (statement)
    TYPE  reduce using rule 14 (statement)


State 38

   15 statement: if_else_statement •

    $end  reduce using rule 15 (statement)
    TYPE  reduce using rule 15 (statement)


State 39

   10 statement: expression_statement •

    $end  reduce using rule 10 (statement)
    TYPE  reduce using rule 10 (statement)


State 40

   11 statement: io_statement •

    $end  reduce using rule 11 (statement)
    TYPE  reduce using rule 11 (statement)


State 41

   27 io_statement: input_statement •

    $end  reduce using rule 27 (io_statement)
    TYPE  reduce using rule 27 (io_statement)


State 42

   28 io_statement: output_statement •

    $end  reduce using rule 28 (io_statement)
    TYPE  reduce using rule 28 (io_statement)


State 43

   12 statement: return_statement •

    $end  reduce using rule 12 (statement)
    TYPE  reduce using rule 12 (statement)


State 44

   26 expression_statement: expression • ';'

    ';'  shift, and go to state 72


State 45

   35 expression: function_call_expression •

    ';'  reduce using rule 35 (expression)


State 46

   34 expression: or_expression •
   46 or_expression: or_expression • LOGICAL_OP_OR and_expression

    LOGICAL_OP_OR  shift, and go to state 73

    ';'  reduce using rule 34 (expression)


State 47

   47 or_expression: and_expression •
   48 and_expression: and_expression • LOGICAL_OP_AND equality_expression

    LOGICAL_OP_AND  shift, and go to state 74

    ';'            reduce using rule 47 (or_expression)
    LOGICAL_OP_OR  reduce using rule 47 (or_expression)


State 48

   49 and_expression: equality_expression •
   50 equality_expression: equality_expression • EQUALITY_OP relational_expression

    EQUALITY_OP  shift, and go to state 75

    ';'             reduce using rule 49 (and_expression)
    LOGICAL_OP_OR   reduce using rule 49 (and_expression)
    LOGICAL_OP_AND  reduce using rule 49 (and_expression)


State 49

   51 equality_expression: relational_expression •
   52 relational_expression: relational_expression • RELATIONAL_OP list_expression

    RELATIONAL_OP  shift, and go to state 76

    ';'             reduce using rule 51 (equality_expression)
    EQUALITY_OP     reduce using rule 51 (equality_expression)
    LOGICAL_OP_OR   reduce using rule 51 (equality_expression)
    LOGICAL_OP_AND  reduce using rule 51 (equality_expression)


State 50

   53 relational_expression: list_expression •
   54 list_expression: list_expression • BINARY_LIST_OP addition_expression

    BINARY_LIST_OP  shift, and go to state 77

    ';'             reduce using rule 53 (relational_expression)
    RELATIONAL_OP   reduce using rule 53 (relational_expression)
    EQUALITY_OP     reduce using rule 53 (relational_expression)
    LOGICAL_OP_OR   reduce using rule 53 (relational_expression)
    LOGICAL_OP_AND  reduce using rule 53 (relational_expression)


State 51

   55 list_expression: addition_expression •
   56 addition_expression: addition_expression • ARITMETIC_OP_ADDITIVE multiplication_expression

    ARITMETIC_OP_ADDITIVE  shift, and go to state 78

    BINARY_LIST_OP  reduce using rule 55 (list_expression)
    ';'             reduce using rule 55 (list_expression)
    RELATIONAL_OP   reduce using rule 55 (list_expression)
    EQUALITY_OP     reduce using rule 55 (list_expression)
    LOGICAL_OP_OR   reduce using rule 55 (list_expression)
    LOGICAL_OP_AND  reduce using rule 55 (list_expression)


State 52

   57 addition_expression: multiplication_expression •
   58 multiplication_expression: multiplication_expression • ARITMETIC_OP_MULTIPLICATIVE simple_value

    ARITMETIC_OP_MULTIPLICATIVE  shift, and go to state 79

    BINARY_LIST_OP         reduce using rule 57 (addition_expression)
    ';'                    reduce using rule 57 (addition_expression)
    ARITMETIC_OP_ADDITIVE  reduce using rule 57 (addition_expression)
    RELATIONAL_OP          reduce using rule 57 (addition_expression)
    EQUALITY_OP            reduce using rule 57 (addition_expression)
    LOGICAL_OP_OR          reduce using rule 57 (addition_expression)
    LOGICAL_OP_AND         reduce using rule 57 (addition_expression)


State 53

   59 multiplication_expression: simple_value •

    BINARY_LIST_OP               reduce using rule 59 (multiplication_expression)
    ';'                          reduce using rule 59 (multiplication_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 59 (multiplication_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 59 (multiplication_expression)
    RELATIONAL_OP                reduce using rule 59 (multiplication_expression)
    EQUALITY_OP                  reduce using rule 59 (multiplication_expression)
    LOGICAL_OP_OR                reduce using rule 59 (multiplication_expression)
    LOGICAL_OP_AND               reduce using rule 59 (multiplication_expression)


State 54

   13 statement: variable_declaration_statement •

    $end  reduce using rule 13 (statement)
    TYPE  reduce using rule 13 (statement)


State 55

   60 simple_value: constant •

    BINARY_LIST_OP               reduce using rule 60 (simple_value)
    ';'                          reduce using rule 60 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 60 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 60 (simple_value)
    RELATIONAL_OP                reduce using rule 60 (simple_value)
    EQUALITY_OP                  reduce using rule 60 (simple_value)
    LOGICAL_OP_OR                reduce using rule 60 (simple_value)
    LOGICAL_OP_AND               reduce using rule 60 (simple_value)


State 56

   20 parameters: parameters ',' parameter •

    ')'  reduce using rule 20 (parameters)
    ','  reduce using rule 20 (parameters)


State 57

   66 variable_declaration_statement: TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 12


State 58

   36 function_call_expression: IDENTIFIER '(' • function_arguments_optional ')'

    C_INTEGER              shift, and go to state 157
    C_FLOAT                shift, and go to state 158
    C_NIL                  shift, and go to state 159
    IDENTIFIER             shift, and go to state 160
    UNARY_LIST_OP          shift, and go to state 161
    '('                    shift, and go to state 162
    '!'                    shift, and go to state 163
    ARITMETIC_OP_ADDITIVE  shift, and go to state 164

    ')'  reduce using rule 37 (function_arguments_optional)

    expression                   go to state 80
    function_call_expression     go to state 165
    function_arguments_optional  go to state 81
    function_arguments           go to state 82
    function_argument            go to state 83
    or_expression                go to state 166
    and_expression               go to state 167
    equality_expression          go to state 168
    relational_expression        go to state 169
    list_expression              go to state 170
    addition_expression          go to state 171
    multiplication_expression    go to state 172
    simple_value                 go to state 173
    constant                     go to state 174


State 59

   33 expression: IDENTIFIER '=' • expression

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    IDENTIFIER             shift, and go to state 24
    UNARY_LIST_OP          shift, and go to state 30
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    expression                 go to state 84
    function_call_expression   go to state 45
    or_expression              go to state 46
    and_expression             go to state 47
    equality_expression        go to state 48
    relational_expression      go to state 49
    list_expression            go to state 50
    addition_expression        go to state 51
    multiplication_expression  go to state 52
    simple_value               go to state 53
    constant                   go to state 55


State 60

   23 for_statement: RW_FOR '(' • expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    IDENTIFIER             shift, and go to state 24
    UNARY_LIST_OP          shift, and go to state 30
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    ';'  reduce using rule 42 (expression_optative)

    expression                 go to state 85
    function_call_expression   go to state 45
    expression_optative        go to state 86
    or_expression              go to state 46
    and_expression             go to state 47
    equality_expression        go to state 48
    relational_expression      go to state 49
    list_expression            go to state 50
    addition_expression        go to state 51
    multiplication_expression  go to state 52
    simple_value               go to state 53
    constant                   go to state 55


State 61

   32 return_statement: RW_RETURN expression • ';'

    ';'  shift, and go to state 87


State 62

   24 if_else_statement: RW_IF '(' • expression ')' statement
   25                  | RW_IF '(' • expression ')' statement RW_ELSE statement

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    IDENTIFIER             shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    expression                 go to state 88
    function_call_expression   go to state 147
    or_expression              go to state 148
    and_expression             go to state 149
    equality_expression        go to state 150
    relational_expression      go to state 151
    list_expression            go to state 152
    addition_expression        go to state 153
    multiplication_expression  go to state 154
    simple_value               go to state 155
    constant                   go to state 156


State 63

   29 input_statement: IO_READ '(' • IDENTIFIER ')' ';'

    IDENTIFIER  shift, and go to state 89


State 64

   30 output_statement: IO_WRITE '(' • expression ')' ';'
   31                 | IO_WRITE '(' • LIT_STRING ')' ';'

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    LIT_STRING             shift, and go to state 90
    IDENTIFIER             shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    expression                 go to state 91
    function_call_expression   go to state 147
    or_expression              go to state 148
    and_expression             go to state 149
    equality_expression        go to state 150
    relational_expression      go to state 151
    list_expression            go to state 152
    addition_expression        go to state 153
    multiplication_expression  go to state 154
    simple_value               go to state 155
    constant                   go to state 156


State 65

   61 simple_value: IDENTIFIER •

    BINARY_LIST_OP               reduce using rule 61 (simple_value)
    ';'                          reduce using rule 61 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 61 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 61 (simple_value)
    RELATIONAL_OP                reduce using rule 61 (simple_value)
    EQUALITY_OP                  reduce using rule 61 (simple_value)
    LOGICAL_OP_OR                reduce using rule 61 (simple_value)
    LOGICAL_OP_AND               reduce using rule 61 (simple_value)


State 66

   64 simple_value: UNARY_LIST_OP simple_value •

    BINARY_LIST_OP               reduce using rule 64 (simple_value)
    ';'                          reduce using rule 64 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 64 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 64 (simple_value)
    RELATIONAL_OP                reduce using rule 64 (simple_value)
    EQUALITY_OP                  reduce using rule 64 (simple_value)
    LOGICAL_OP_OR                reduce using rule 64 (simple_value)
    LOGICAL_OP_AND               reduce using rule 64 (simple_value)


State 67

    7 block: '{' statements • '}'
    8 statements: statements • statement

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    TYPE                   shift, and go to state 122
    IDENTIFIER             shift, and go to state 24
    RW_FOR                 shift, and go to state 123
    RW_RETURN              shift, and go to state 124
    RW_IF                  shift, and go to state 125
    IO_READ                shift, and go to state 126
    IO_WRITE               shift, and go to state 127
    UNARY_LIST_OP          shift, and go to state 30
    '{'                    shift, and go to state 128
    '}'                    shift, and go to state 92
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    block                           go to state 129
    statement                       go to state 93
    for_statement                   go to state 130
    if_else_statement               go to state 131
    expression_statement            go to state 132
    io_statement                    go to state 133
    input_statement                 go to state 134
    output_statement                go to state 135
    return_statement                go to state 136
    expression                      go to state 137
    function_call_expression        go to state 45
    or_expression                   go to state 46
    and_expression                  go to state 47
    equality_expression             go to state 48
    relational_expression           go to state 49
    list_expression                 go to state 50
    addition_expression             go to state 51
    multiplication_expression       go to state 52
    simple_value                    go to state 53
    variable_declaration_statement  go to state 138
    constant                        go to state 55


State 68

    9 statements: statement •

    C_INTEGER              reduce using rule 9 (statements)
    C_FLOAT                reduce using rule 9 (statements)
    C_NIL                  reduce using rule 9 (statements)
    TYPE                   reduce using rule 9 (statements)
    IDENTIFIER             reduce using rule 9 (statements)
    RW_FOR                 reduce using rule 9 (statements)
    RW_RETURN              reduce using rule 9 (statements)
    RW_IF                  reduce using rule 9 (statements)
    IO_READ                reduce using rule 9 (statements)
    IO_WRITE               reduce using rule 9 (statements)
    UNARY_LIST_OP          reduce using rule 9 (statements)
    '{'                    reduce using rule 9 (statements)
    '}'                    reduce using rule 9 (statements)
    '('                    reduce using rule 9 (statements)
    '!'                    reduce using rule 9 (statements)
    ARITMETIC_OP_ADDITIVE  reduce using rule 9 (statements)


State 69

   65 simple_value: '(' expression • ')'

    ')'  shift, and go to state 94


State 70

   63 simple_value: '!' simple_value •

    BINARY_LIST_OP               reduce using rule 63 (simple_value)
    ';'                          reduce using rule 63 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 63 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 63 (simple_value)
    RELATIONAL_OP                reduce using rule 63 (simple_value)
    EQUALITY_OP                  reduce using rule 63 (simple_value)
    LOGICAL_OP_OR                reduce using rule 63 (simple_value)
    LOGICAL_OP_AND               reduce using rule 63 (simple_value)


State 71

   62 simple_value: ARITMETIC_OP_ADDITIVE simple_value •

    BINARY_LIST_OP               reduce using rule 62 (simple_value)
    ';'                          reduce using rule 62 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 62 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 62 (simple_value)
    RELATIONAL_OP                reduce using rule 62 (simple_value)
    EQUALITY_OP                  reduce using rule 62 (simple_value)
    LOGICAL_OP_OR                reduce using rule 62 (simple_value)
    LOGICAL_OP_AND               reduce using rule 62 (simple_value)


State 72

   26 expression_statement: expression ';' •

    $end  reduce using rule 26 (expression_statement)
    TYPE  reduce using rule 26 (expression_statement)


State 73

   46 or_expression: or_expression LOGICAL_OP_OR • and_expression

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    IDENTIFIER             shift, and go to state 65
    UNARY_LIST_OP          shift, and go to state 30
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    and_expression             go to state 95
    equality_expression        go to state 48
    relational_expression      go to state 49
    list_expression            go to state 50
    addition_expression        go to state 51
    multiplication_expression  go to state 52
    simple_value               go to state 53
    constant                   go to state 55


State 74

   48 and_expression: and_expression LOGICAL_OP_AND • equality_expression

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    IDENTIFIER             shift, and go to state 65
    UNARY_LIST_OP          shift, and go to state 30
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    equality_expression        go to state 96
    relational_expression      go to state 49
    list_expression            go to state 50
    addition_expression        go to state 51
    multiplication_expression  go to state 52
    simple_value               go to state 53
    constant                   go to state 55


State 75

   50 equality_expression: equality_expression EQUALITY_OP • relational_expression

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    IDENTIFIER             shift, and go to state 65
    UNARY_LIST_OP          shift, and go to state 30
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    relational_expression      go to state 97
    list_expression            go to state 50
    addition_expression        go to state 51
    multiplication_expression  go to state 52
    simple_value               go to state 53
    constant                   go to state 55


State 76

   52 relational_expression: relational_expression RELATIONAL_OP • list_expression

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    IDENTIFIER             shift, and go to state 65
    UNARY_LIST_OP          shift, and go to state 30
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    list_expression            go to state 98
    addition_expression        go to state 51
    multiplication_expression  go to state 52
    simple_value               go to state 53
    constant                   go to state 55


State 77

   54 list_expression: list_expression BINARY_LIST_OP • addition_expression

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    IDENTIFIER             shift, and go to state 65
    UNARY_LIST_OP          shift, and go to state 30
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    addition_expression        go to state 99
    multiplication_expression  go to state 52
    simple_value               go to state 53
    constant                   go to state 55


State 78

   56 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE • multiplication_expression

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    IDENTIFIER             shift, and go to state 65
    UNARY_LIST_OP          shift, and go to state 30
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    multiplication_expression  go to state 100
    simple_value               go to state 53
    constant                   go to state 55


State 79

   58 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE • simple_value

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    IDENTIFIER             shift, and go to state 65
    UNARY_LIST_OP          shift, and go to state 30
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    simple_value  go to state 101
    constant      go to state 55


State 80

   41 function_argument: expression •

    ')'  reduce using rule 41 (function_argument)
    ','  reduce using rule 41 (function_argument)


State 81

   36 function_call_expression: IDENTIFIER '(' function_arguments_optional • ')'

    ')'  shift, and go to state 102


State 82

   38 function_arguments_optional: function_arguments •
   39 function_arguments: function_arguments • ',' function_argument

    ','  shift, and go to state 103

    ')'  reduce using rule 38 (function_arguments_optional)


State 83

   40 function_arguments: function_argument •

    ')'  reduce using rule 40 (function_arguments)
    ','  reduce using rule 40 (function_arguments)


State 84

   33 expression: IDENTIFIER '=' expression •

    ';'  reduce using rule 33 (expression)


State 85

   43 expression_optative: expression •

    ';'  reduce using rule 43 (expression_optative)


State 86

   23 for_statement: RW_FOR '(' expression_optative • ';' or_expression_optative ';' expression_optative ')' statement

    ';'  shift, and go to state 104


State 87

   32 return_statement: RW_RETURN expression ';' •

    $end  reduce using rule 32 (return_statement)
    TYPE  reduce using rule 32 (return_statement)


State 88

   24 if_else_statement: RW_IF '(' expression • ')' statement
   25                  | RW_IF '(' expression • ')' statement RW_ELSE statement

    ')'  shift, and go to state 105


State 89

   29 input_statement: IO_READ '(' IDENTIFIER • ')' ';'

    ')'  shift, and go to state 106


State 90

   31 output_statement: IO_WRITE '(' LIT_STRING • ')' ';'

    ')'  shift, and go to state 107


State 91

   30 output_statement: IO_WRITE '(' expression • ')' ';'

    ')'  shift, and go to state 108


State 92

    7 block: '{' statements '}' •

    $end  reduce using rule 7 (block)
    TYPE  reduce using rule 7 (block)


State 93

    8 statements: statements statement •

    C_INTEGER              reduce using rule 8 (statements)
    C_FLOAT                reduce using rule 8 (statements)
    C_NIL                  reduce using rule 8 (statements)
    TYPE                   reduce using rule 8 (statements)
    IDENTIFIER             reduce using rule 8 (statements)
    RW_FOR                 reduce using rule 8 (statements)
    RW_RETURN              reduce using rule 8 (statements)
    RW_IF                  reduce using rule 8 (statements)
    IO_READ                reduce using rule 8 (statements)
    IO_WRITE               reduce using rule 8 (statements)
    UNARY_LIST_OP          reduce using rule 8 (statements)
    '{'                    reduce using rule 8 (statements)
    '}'                    reduce using rule 8 (statements)
    '('                    reduce using rule 8 (statements)
    '!'                    reduce using rule 8 (statements)
    ARITMETIC_OP_ADDITIVE  reduce using rule 8 (statements)


State 94

   65 simple_value: '(' expression ')' •

    BINARY_LIST_OP               reduce using rule 65 (simple_value)
    ';'                          reduce using rule 65 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 65 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 65 (simple_value)
    RELATIONAL_OP                reduce using rule 65 (simple_value)
    EQUALITY_OP                  reduce using rule 65 (simple_value)
    LOGICAL_OP_OR                reduce using rule 65 (simple_value)
    LOGICAL_OP_AND               reduce using rule 65 (simple_value)


State 95

   46 or_expression: or_expression LOGICAL_OP_OR and_expression •
   48 and_expression: and_expression • LOGICAL_OP_AND equality_expression

    LOGICAL_OP_AND  shift, and go to state 74

    ';'            reduce using rule 46 (or_expression)
    LOGICAL_OP_OR  reduce using rule 46 (or_expression)


State 96

   48 and_expression: and_expression LOGICAL_OP_AND equality_expression •
   50 equality_expression: equality_expression • EQUALITY_OP relational_expression

    EQUALITY_OP  shift, and go to state 75

    ';'             reduce using rule 48 (and_expression)
    LOGICAL_OP_OR   reduce using rule 48 (and_expression)
    LOGICAL_OP_AND  reduce using rule 48 (and_expression)


State 97

   50 equality_expression: equality_expression EQUALITY_OP relational_expression •
   52 relational_expression: relational_expression • RELATIONAL_OP list_expression

    RELATIONAL_OP  shift, and go to state 76

    ';'             reduce using rule 50 (equality_expression)
    EQUALITY_OP     reduce using rule 50 (equality_expression)
    LOGICAL_OP_OR   reduce using rule 50 (equality_expression)
    LOGICAL_OP_AND  reduce using rule 50 (equality_expression)


State 98

   52 relational_expression: relational_expression RELATIONAL_OP list_expression •
   54 list_expression: list_expression • BINARY_LIST_OP addition_expression

    BINARY_LIST_OP  shift, and go to state 77

    ';'             reduce using rule 52 (relational_expression)
    RELATIONAL_OP   reduce using rule 52 (relational_expression)
    EQUALITY_OP     reduce using rule 52 (relational_expression)
    LOGICAL_OP_OR   reduce using rule 52 (relational_expression)
    LOGICAL_OP_AND  reduce using rule 52 (relational_expression)


State 99

   54 list_expression: list_expression BINARY_LIST_OP addition_expression •
   56 addition_expression: addition_expression • ARITMETIC_OP_ADDITIVE multiplication_expression

    ARITMETIC_OP_ADDITIVE  shift, and go to state 78

    BINARY_LIST_OP  reduce using rule 54 (list_expression)
    ';'             reduce using rule 54 (list_expression)
    RELATIONAL_OP   reduce using rule 54 (list_expression)
    EQUALITY_OP     reduce using rule 54 (list_expression)
    LOGICAL_OP_OR   reduce using rule 54 (list_expression)
    LOGICAL_OP_AND  reduce using rule 54 (list_expression)


State 100

   56 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE multiplication_expression •
   58 multiplication_expression: multiplication_expression • ARITMETIC_OP_MULTIPLICATIVE simple_value

    ARITMETIC_OP_MULTIPLICATIVE  shift, and go to state 79

    BINARY_LIST_OP         reduce using rule 56 (addition_expression)
    ';'                    reduce using rule 56 (addition_expression)
    ARITMETIC_OP_ADDITIVE  reduce using rule 56 (addition_expression)
    RELATIONAL_OP          reduce using rule 56 (addition_expression)
    EQUALITY_OP            reduce using rule 56 (addition_expression)
    LOGICAL_OP_OR          reduce using rule 56 (addition_expression)
    LOGICAL_OP_AND         reduce using rule 56 (addition_expression)


State 101

   58 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE simple_value •

    BINARY_LIST_OP               reduce using rule 58 (multiplication_expression)
    ';'                          reduce using rule 58 (multiplication_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 58 (multiplication_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 58 (multiplication_expression)
    RELATIONAL_OP                reduce using rule 58 (multiplication_expression)
    EQUALITY_OP                  reduce using rule 58 (multiplication_expression)
    LOGICAL_OP_OR                reduce using rule 58 (multiplication_expression)
    LOGICAL_OP_AND               reduce using rule 58 (multiplication_expression)


State 102

   36 function_call_expression: IDENTIFIER '(' function_arguments_optional ')' •

    ';'  reduce using rule 36 (function_call_expression)


State 103

   39 function_arguments: function_arguments ',' • function_argument

    C_INTEGER              shift, and go to state 157
    C_FLOAT                shift, and go to state 158
    C_NIL                  shift, and go to state 159
    IDENTIFIER             shift, and go to state 160
    UNARY_LIST_OP          shift, and go to state 161
    '('                    shift, and go to state 162
    '!'                    shift, and go to state 163
    ARITMETIC_OP_ADDITIVE  shift, and go to state 164

    expression                 go to state 80
    function_call_expression   go to state 165
    function_argument          go to state 109
    or_expression              go to state 166
    and_expression             go to state 167
    equality_expression        go to state 168
    relational_expression      go to state 169
    list_expression            go to state 170
    addition_expression        go to state 171
    multiplication_expression  go to state 172
    simple_value               go to state 173
    constant                   go to state 174


State 104

   23 for_statement: RW_FOR '(' expression_optative ';' • or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    IDENTIFIER             shift, and go to state 65
    UNARY_LIST_OP          shift, and go to state 30
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    ';'  reduce using rule 44 (or_expression_optative)

    or_expression_optative     go to state 110
    or_expression              go to state 111
    and_expression             go to state 47
    equality_expression        go to state 48
    relational_expression      go to state 49
    list_expression            go to state 50
    addition_expression        go to state 51
    multiplication_expression  go to state 52
    simple_value               go to state 53
    constant                   go to state 55


State 105

   24 if_else_statement: RW_IF '(' expression ')' • statement
   25                  | RW_IF '(' expression ')' • statement RW_ELSE statement

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    TYPE                   shift, and go to state 175
    IDENTIFIER             shift, and go to state 24
    RW_FOR                 shift, and go to state 176
    RW_RETURN              shift, and go to state 177
    RW_IF                  shift, and go to state 178
    IO_READ                shift, and go to state 179
    IO_WRITE               shift, and go to state 180
    UNARY_LIST_OP          shift, and go to state 30
    '{'                    shift, and go to state 181
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    block                           go to state 182
    statement                       go to state 112
    for_statement                   go to state 183
    if_else_statement               go to state 184
    expression_statement            go to state 185
    io_statement                    go to state 186
    input_statement                 go to state 187
    output_statement                go to state 188
    return_statement                go to state 189
    expression                      go to state 190
    function_call_expression        go to state 45
    or_expression                   go to state 46
    and_expression                  go to state 47
    equality_expression             go to state 48
    relational_expression           go to state 49
    list_expression                 go to state 50
    addition_expression             go to state 51
    multiplication_expression       go to state 52
    simple_value                    go to state 53
    variable_declaration_statement  go to state 191
    constant                        go to state 55


State 106

   29 input_statement: IO_READ '(' IDENTIFIER ')' • ';'

    ';'  shift, and go to state 113


State 107

   31 output_statement: IO_WRITE '(' LIT_STRING ')' • ';'

    ';'  shift, and go to state 114


State 108

   30 output_statement: IO_WRITE '(' expression ')' • ';'

    ';'  shift, and go to state 115


State 109

   39 function_arguments: function_arguments ',' function_argument •

    ')'  reduce using rule 39 (function_arguments)
    ','  reduce using rule 39 (function_arguments)


State 110

   23 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative • ';' expression_optative ')' statement

    ';'  shift, and go to state 116


State 111

   45 or_expression_optative: or_expression •
   46 or_expression: or_expression • LOGICAL_OP_OR and_expression

    LOGICAL_OP_OR  shift, and go to state 73

    ';'  reduce using rule 45 (or_expression_optative)


State 112

   24 if_else_statement: RW_IF '(' expression ')' statement •
   25                  | RW_IF '(' expression ')' statement • RW_ELSE statement

    RW_ELSE  shift, and go to state 117

    $end  reduce using rule 24 (if_else_statement)
    TYPE  reduce using rule 24 (if_else_statement)


State 113

   29 input_statement: IO_READ '(' IDENTIFIER ')' ';' •

    $end  reduce using rule 29 (input_statement)
    TYPE  reduce using rule 29 (input_statement)


State 114

   31 output_statement: IO_WRITE '(' LIT_STRING ')' ';' •

    $end  reduce using rule 31 (output_statement)
    TYPE  reduce using rule 31 (output_statement)


State 115

   30 output_statement: IO_WRITE '(' expression ')' ';' •

    $end  reduce using rule 30 (output_statement)
    TYPE  reduce using rule 30 (output_statement)


State 116

   23 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' • expression_optative ')' statement

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    IDENTIFIER             shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    ')'  reduce using rule 42 (expression_optative)

    expression                 go to state 192
    function_call_expression   go to state 147
    expression_optative        go to state 118
    or_expression              go to state 148
    and_expression             go to state 149
    equality_expression        go to state 150
    relational_expression      go to state 151
    list_expression            go to state 152
    addition_expression        go to state 153
    multiplication_expression  go to state 154
    simple_value               go to state 155
    constant                   go to state 156


State 117

   25 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE • statement

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    TYPE                   shift, and go to state 23
    IDENTIFIER             shift, and go to state 24
    RW_FOR                 shift, and go to state 25
    RW_RETURN              shift, and go to state 26
    RW_IF                  shift, and go to state 27
    IO_READ                shift, and go to state 28
    IO_WRITE               shift, and go to state 29
    UNARY_LIST_OP          shift, and go to state 30
    '{'                    shift, and go to state 31
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    block                           go to state 35
    statement                       go to state 119
    for_statement                   go to state 37
    if_else_statement               go to state 38
    expression_statement            go to state 39
    io_statement                    go to state 40
    input_statement                 go to state 41
    output_statement                go to state 42
    return_statement                go to state 43
    expression                      go to state 44
    function_call_expression        go to state 45
    or_expression                   go to state 46
    and_expression                  go to state 47
    equality_expression             go to state 48
    relational_expression           go to state 49
    list_expression                 go to state 50
    addition_expression             go to state 51
    multiplication_expression       go to state 52
    simple_value                    go to state 53
    variable_declaration_statement  go to state 54
    constant                        go to state 55


State 118

   23 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative • ')' statement

    ')'  shift, and go to state 120


State 119

   25 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE statement •

    $end  reduce using rule 25 (if_else_statement)
    TYPE  reduce using rule 25 (if_else_statement)


State 120

   23 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' • statement

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    TYPE                   shift, and go to state 23
    IDENTIFIER             shift, and go to state 24
    RW_FOR                 shift, and go to state 25
    RW_RETURN              shift, and go to state 26
    RW_IF                  shift, and go to state 27
    IO_READ                shift, and go to state 28
    IO_WRITE               shift, and go to state 29
    UNARY_LIST_OP          shift, and go to state 30
    '{'                    shift, and go to state 31
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    block                           go to state 35
    statement                       go to state 121
    for_statement                   go to state 37
    if_else_statement               go to state 38
    expression_statement            go to state 39
    io_statement                    go to state 40
    input_statement                 go to state 41
    output_statement                go to state 42
    return_statement                go to state 43
    expression                      go to state 44
    function_call_expression        go to state 45
    or_expression                   go to state 46
    and_expression                  go to state 47
    equality_expression             go to state 48
    relational_expression           go to state 49
    list_expression                 go to state 50
    addition_expression             go to state 51
    multiplication_expression       go to state 52
    simple_value                    go to state 53
    variable_declaration_statement  go to state 54
    constant                        go to state 55


State 121

   23 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement •

    $end  reduce using rule 23 (for_statement)
    TYPE  reduce using rule 23 (for_statement)


State 122

   66 variable_declaration_statement: TYPE • IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 193


State 123

   23 for_statement: RW_FOR • '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    '('  shift, and go to state 194


State 124

   32 return_statement: RW_RETURN • expression ';'

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    IDENTIFIER             shift, and go to state 24
    UNARY_LIST_OP          shift, and go to state 30
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    expression                 go to state 195
    function_call_expression   go to state 45
    or_expression              go to state 46
    and_expression             go to state 47
    equality_expression        go to state 48
    relational_expression      go to state 49
    list_expression            go to state 50
    addition_expression        go to state 51
    multiplication_expression  go to state 52
    simple_value               go to state 53
    constant                   go to state 55


State 125

   24 if_else_statement: RW_IF • '(' expression ')' statement
   25                  | RW_IF • '(' expression ')' statement RW_ELSE statement

    '('  shift, and go to state 196


State 126

   29 input_statement: IO_READ • '(' IDENTIFIER ')' ';'

    '('  shift, and go to state 197


State 127

   30 output_statement: IO_WRITE • '(' expression ')' ';'
   31                 | IO_WRITE • '(' LIT_STRING ')' ';'

    '('  shift, and go to state 198


State 128

    7 block: '{' • statements '}'

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    TYPE                   shift, and go to state 122
    IDENTIFIER             shift, and go to state 24
    RW_FOR                 shift, and go to state 123
    RW_RETURN              shift, and go to state 124
    RW_IF                  shift, and go to state 125
    IO_READ                shift, and go to state 126
    IO_WRITE               shift, and go to state 127
    UNARY_LIST_OP          shift, and go to state 30
    '{'                    shift, and go to state 128
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    block                           go to state 129
    statements                      go to state 199
    statement                       go to state 68
    for_statement                   go to state 130
    if_else_statement               go to state 131
    expression_statement            go to state 132
    io_statement                    go to state 133
    input_statement                 go to state 134
    output_statement                go to state 135
    return_statement                go to state 136
    expression                      go to state 137
    function_call_expression        go to state 45
    or_expression                   go to state 46
    and_expression                  go to state 47
    equality_expression             go to state 48
    relational_expression           go to state 49
    list_expression                 go to state 50
    addition_expression             go to state 51
    multiplication_expression       go to state 52
    simple_value                    go to state 53
    variable_declaration_statement  go to state 138
    constant                        go to state 55


State 129

   16 statement: block •

    C_INTEGER              reduce using rule 16 (statement)
    C_FLOAT                reduce using rule 16 (statement)
    C_NIL                  reduce using rule 16 (statement)
    TYPE                   reduce using rule 16 (statement)
    IDENTIFIER             reduce using rule 16 (statement)
    RW_FOR                 reduce using rule 16 (statement)
    RW_RETURN              reduce using rule 16 (statement)
    RW_IF                  reduce using rule 16 (statement)
    IO_READ                reduce using rule 16 (statement)
    IO_WRITE               reduce using rule 16 (statement)
    UNARY_LIST_OP          reduce using rule 16 (statement)
    '{'                    reduce using rule 16 (statement)
    '}'                    reduce using rule 16 (statement)
    '('                    reduce using rule 16 (statement)
    '!'                    reduce using rule 16 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 16 (statement)


State 130

   14 statement: for_statement •

    C_INTEGER              reduce using rule 14 (statement)
    C_FLOAT                reduce using rule 14 (statement)
    C_NIL                  reduce using rule 14 (statement)
    TYPE                   reduce using rule 14 (statement)
    IDENTIFIER             reduce using rule 14 (statement)
    RW_FOR                 reduce using rule 14 (statement)
    RW_RETURN              reduce using rule 14 (statement)
    RW_IF                  reduce using rule 14 (statement)
    IO_READ                reduce using rule 14 (statement)
    IO_WRITE               reduce using rule 14 (statement)
    UNARY_LIST_OP          reduce using rule 14 (statement)
    '{'                    reduce using rule 14 (statement)
    '}'                    reduce using rule 14 (statement)
    '('                    reduce using rule 14 (statement)
    '!'                    reduce using rule 14 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 14 (statement)


State 131

   15 statement: if_else_statement •

    C_INTEGER              reduce using rule 15 (statement)
    C_FLOAT                reduce using rule 15 (statement)
    C_NIL                  reduce using rule 15 (statement)
    TYPE                   reduce using rule 15 (statement)
    IDENTIFIER             reduce using rule 15 (statement)
    RW_FOR                 reduce using rule 15 (statement)
    RW_RETURN              reduce using rule 15 (statement)
    RW_IF                  reduce using rule 15 (statement)
    IO_READ                reduce using rule 15 (statement)
    IO_WRITE               reduce using rule 15 (statement)
    UNARY_LIST_OP          reduce using rule 15 (statement)
    '{'                    reduce using rule 15 (statement)
    '}'                    reduce using rule 15 (statement)
    '('                    reduce using rule 15 (statement)
    '!'                    reduce using rule 15 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 15 (statement)


State 132

   10 statement: expression_statement •

    C_INTEGER              reduce using rule 10 (statement)
    C_FLOAT                reduce using rule 10 (statement)
    C_NIL                  reduce using rule 10 (statement)
    TYPE                   reduce using rule 10 (statement)
    IDENTIFIER             reduce using rule 10 (statement)
    RW_FOR                 reduce using rule 10 (statement)
    RW_RETURN              reduce using rule 10 (statement)
    RW_IF                  reduce using rule 10 (statement)
    IO_READ                reduce using rule 10 (statement)
    IO_WRITE               reduce using rule 10 (statement)
    UNARY_LIST_OP          reduce using rule 10 (statement)
    '{'                    reduce using rule 10 (statement)
    '}'                    reduce using rule 10 (statement)
    '('                    reduce using rule 10 (statement)
    '!'                    reduce using rule 10 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 10 (statement)


State 133

   11 statement: io_statement •

    C_INTEGER              reduce using rule 11 (statement)
    C_FLOAT                reduce using rule 11 (statement)
    C_NIL                  reduce using rule 11 (statement)
    TYPE                   reduce using rule 11 (statement)
    IDENTIFIER             reduce using rule 11 (statement)
    RW_FOR                 reduce using rule 11 (statement)
    RW_RETURN              reduce using rule 11 (statement)
    RW_IF                  reduce using rule 11 (statement)
    IO_READ                reduce using rule 11 (statement)
    IO_WRITE               reduce using rule 11 (statement)
    UNARY_LIST_OP          reduce using rule 11 (statement)
    '{'                    reduce using rule 11 (statement)
    '}'                    reduce using rule 11 (statement)
    '('                    reduce using rule 11 (statement)
    '!'                    reduce using rule 11 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 11 (statement)


State 134

   27 io_statement: input_statement •

    C_INTEGER              reduce using rule 27 (io_statement)
    C_FLOAT                reduce using rule 27 (io_statement)
    C_NIL                  reduce using rule 27 (io_statement)
    TYPE                   reduce using rule 27 (io_statement)
    IDENTIFIER             reduce using rule 27 (io_statement)
    RW_FOR                 reduce using rule 27 (io_statement)
    RW_RETURN              reduce using rule 27 (io_statement)
    RW_IF                  reduce using rule 27 (io_statement)
    IO_READ                reduce using rule 27 (io_statement)
    IO_WRITE               reduce using rule 27 (io_statement)
    UNARY_LIST_OP          reduce using rule 27 (io_statement)
    '{'                    reduce using rule 27 (io_statement)
    '}'                    reduce using rule 27 (io_statement)
    '('                    reduce using rule 27 (io_statement)
    '!'                    reduce using rule 27 (io_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 27 (io_statement)


State 135

   28 io_statement: output_statement •

    C_INTEGER              reduce using rule 28 (io_statement)
    C_FLOAT                reduce using rule 28 (io_statement)
    C_NIL                  reduce using rule 28 (io_statement)
    TYPE                   reduce using rule 28 (io_statement)
    IDENTIFIER             reduce using rule 28 (io_statement)
    RW_FOR                 reduce using rule 28 (io_statement)
    RW_RETURN              reduce using rule 28 (io_statement)
    RW_IF                  reduce using rule 28 (io_statement)
    IO_READ                reduce using rule 28 (io_statement)
    IO_WRITE               reduce using rule 28 (io_statement)
    UNARY_LIST_OP          reduce using rule 28 (io_statement)
    '{'                    reduce using rule 28 (io_statement)
    '}'                    reduce using rule 28 (io_statement)
    '('                    reduce using rule 28 (io_statement)
    '!'                    reduce using rule 28 (io_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 28 (io_statement)


State 136

   12 statement: return_statement •

    C_INTEGER              reduce using rule 12 (statement)
    C_FLOAT                reduce using rule 12 (statement)
    C_NIL                  reduce using rule 12 (statement)
    TYPE                   reduce using rule 12 (statement)
    IDENTIFIER             reduce using rule 12 (statement)
    RW_FOR                 reduce using rule 12 (statement)
    RW_RETURN              reduce using rule 12 (statement)
    RW_IF                  reduce using rule 12 (statement)
    IO_READ                reduce using rule 12 (statement)
    IO_WRITE               reduce using rule 12 (statement)
    UNARY_LIST_OP          reduce using rule 12 (statement)
    '{'                    reduce using rule 12 (statement)
    '}'                    reduce using rule 12 (statement)
    '('                    reduce using rule 12 (statement)
    '!'                    reduce using rule 12 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 12 (statement)


State 137

   26 expression_statement: expression • ';'

    ';'  shift, and go to state 200


State 138

   13 statement: variable_declaration_statement •

    C_INTEGER              reduce using rule 13 (statement)
    C_FLOAT                reduce using rule 13 (statement)
    C_NIL                  reduce using rule 13 (statement)
    TYPE                   reduce using rule 13 (statement)
    IDENTIFIER             reduce using rule 13 (statement)
    RW_FOR                 reduce using rule 13 (statement)
    RW_RETURN              reduce using rule 13 (statement)
    RW_IF                  reduce using rule 13 (statement)
    IO_READ                reduce using rule 13 (statement)
    IO_WRITE               reduce using rule 13 (statement)
    UNARY_LIST_OP          reduce using rule 13 (statement)
    '{'                    reduce using rule 13 (statement)
    '}'                    reduce using rule 13 (statement)
    '('                    reduce using rule 13 (statement)
    '!'                    reduce using rule 13 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 13 (statement)


State 139

   67 constant: C_INTEGER •

    BINARY_LIST_OP               reduce using rule 67 (constant)
    ')'                          reduce using rule 67 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 67 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 67 (constant)
    RELATIONAL_OP                reduce using rule 67 (constant)
    EQUALITY_OP                  reduce using rule 67 (constant)
    LOGICAL_OP_OR                reduce using rule 67 (constant)
    LOGICAL_OP_AND               reduce using rule 67 (constant)


State 140

   68 constant: C_FLOAT •

    BINARY_LIST_OP               reduce using rule 68 (constant)
    ')'                          reduce using rule 68 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 68 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 68 (constant)
    RELATIONAL_OP                reduce using rule 68 (constant)
    EQUALITY_OP                  reduce using rule 68 (constant)
    LOGICAL_OP_OR                reduce using rule 68 (constant)
    LOGICAL_OP_AND               reduce using rule 68 (constant)


State 141

   69 constant: C_NIL •

    BINARY_LIST_OP               reduce using rule 69 (constant)
    ')'                          reduce using rule 69 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 69 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 69 (constant)
    RELATIONAL_OP                reduce using rule 69 (constant)
    EQUALITY_OP                  reduce using rule 69 (constant)
    LOGICAL_OP_OR                reduce using rule 69 (constant)
    LOGICAL_OP_AND               reduce using rule 69 (constant)


State 142

   33 expression: IDENTIFIER • '=' expression
   36 function_call_expression: IDENTIFIER • '(' function_arguments_optional ')'
   61 simple_value: IDENTIFIER •

    '('  shift, and go to state 201
    '='  shift, and go to state 202

    BINARY_LIST_OP               reduce using rule 61 (simple_value)
    ')'                          reduce using rule 61 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 61 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 61 (simple_value)
    RELATIONAL_OP                reduce using rule 61 (simple_value)
    EQUALITY_OP                  reduce using rule 61 (simple_value)
    LOGICAL_OP_OR                reduce using rule 61 (simple_value)
    LOGICAL_OP_AND               reduce using rule 61 (simple_value)


State 143

   64 simple_value: UNARY_LIST_OP • simple_value

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    IDENTIFIER             shift, and go to state 203
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    simple_value  go to state 204
    constant      go to state 156


State 144

   65 simple_value: '(' • expression ')'

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    IDENTIFIER             shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    expression                 go to state 205
    function_call_expression   go to state 147
    or_expression              go to state 148
    and_expression             go to state 149
    equality_expression        go to state 150
    relational_expression      go to state 151
    list_expression            go to state 152
    addition_expression        go to state 153
    multiplication_expression  go to state 154
    simple_value               go to state 155
    constant                   go to state 156


State 145

   63 simple_value: '!' • simple_value

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    IDENTIFIER             shift, and go to state 203
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    simple_value  go to state 206
    constant      go to state 156


State 146

   62 simple_value: ARITMETIC_OP_ADDITIVE • simple_value

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    IDENTIFIER             shift, and go to state 203
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    simple_value  go to state 207
    constant      go to state 156


State 147

   35 expression: function_call_expression •

    ')'  reduce using rule 35 (expression)


State 148

   34 expression: or_expression •
   46 or_expression: or_expression • LOGICAL_OP_OR and_expression

    LOGICAL_OP_OR  shift, and go to state 208

    ')'  reduce using rule 34 (expression)


State 149

   47 or_expression: and_expression •
   48 and_expression: and_expression • LOGICAL_OP_AND equality_expression

    LOGICAL_OP_AND  shift, and go to state 209

    ')'            reduce using rule 47 (or_expression)
    LOGICAL_OP_OR  reduce using rule 47 (or_expression)


State 150

   49 and_expression: equality_expression •
   50 equality_expression: equality_expression • EQUALITY_OP relational_expression

    EQUALITY_OP  shift, and go to state 210

    ')'             reduce using rule 49 (and_expression)
    LOGICAL_OP_OR   reduce using rule 49 (and_expression)
    LOGICAL_OP_AND  reduce using rule 49 (and_expression)


State 151

   51 equality_expression: relational_expression •
   52 relational_expression: relational_expression • RELATIONAL_OP list_expression

    RELATIONAL_OP  shift, and go to state 211

    ')'             reduce using rule 51 (equality_expression)
    EQUALITY_OP     reduce using rule 51 (equality_expression)
    LOGICAL_OP_OR   reduce using rule 51 (equality_expression)
    LOGICAL_OP_AND  reduce using rule 51 (equality_expression)


State 152

   53 relational_expression: list_expression •
   54 list_expression: list_expression • BINARY_LIST_OP addition_expression

    BINARY_LIST_OP  shift, and go to state 212

    ')'             reduce using rule 53 (relational_expression)
    RELATIONAL_OP   reduce using rule 53 (relational_expression)
    EQUALITY_OP     reduce using rule 53 (relational_expression)
    LOGICAL_OP_OR   reduce using rule 53 (relational_expression)
    LOGICAL_OP_AND  reduce using rule 53 (relational_expression)


State 153

   55 list_expression: addition_expression •
   56 addition_expression: addition_expression • ARITMETIC_OP_ADDITIVE multiplication_expression

    ARITMETIC_OP_ADDITIVE  shift, and go to state 213

    BINARY_LIST_OP  reduce using rule 55 (list_expression)
    ')'             reduce using rule 55 (list_expression)
    RELATIONAL_OP   reduce using rule 55 (list_expression)
    EQUALITY_OP     reduce using rule 55 (list_expression)
    LOGICAL_OP_OR   reduce using rule 55 (list_expression)
    LOGICAL_OP_AND  reduce using rule 55 (list_expression)


State 154

   57 addition_expression: multiplication_expression •
   58 multiplication_expression: multiplication_expression • ARITMETIC_OP_MULTIPLICATIVE simple_value

    ARITMETIC_OP_MULTIPLICATIVE  shift, and go to state 214

    BINARY_LIST_OP         reduce using rule 57 (addition_expression)
    ')'                    reduce using rule 57 (addition_expression)
    ARITMETIC_OP_ADDITIVE  reduce using rule 57 (addition_expression)
    RELATIONAL_OP          reduce using rule 57 (addition_expression)
    EQUALITY_OP            reduce using rule 57 (addition_expression)
    LOGICAL_OP_OR          reduce using rule 57 (addition_expression)
    LOGICAL_OP_AND         reduce using rule 57 (addition_expression)


State 155

   59 multiplication_expression: simple_value •

    BINARY_LIST_OP               reduce using rule 59 (multiplication_expression)
    ')'                          reduce using rule 59 (multiplication_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 59 (multiplication_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 59 (multiplication_expression)
    RELATIONAL_OP                reduce using rule 59 (multiplication_expression)
    EQUALITY_OP                  reduce using rule 59 (multiplication_expression)
    LOGICAL_OP_OR                reduce using rule 59 (multiplication_expression)
    LOGICAL_OP_AND               reduce using rule 59 (multiplication_expression)


State 156

   60 simple_value: constant •

    BINARY_LIST_OP               reduce using rule 60 (simple_value)
    ')'                          reduce using rule 60 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 60 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 60 (simple_value)
    RELATIONAL_OP                reduce using rule 60 (simple_value)
    EQUALITY_OP                  reduce using rule 60 (simple_value)
    LOGICAL_OP_OR                reduce using rule 60 (simple_value)
    LOGICAL_OP_AND               reduce using rule 60 (simple_value)


State 157

   67 constant: C_INTEGER •

    BINARY_LIST_OP               reduce using rule 67 (constant)
    ')'                          reduce using rule 67 (constant)
    ','                          reduce using rule 67 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 67 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 67 (constant)
    RELATIONAL_OP                reduce using rule 67 (constant)
    EQUALITY_OP                  reduce using rule 67 (constant)
    LOGICAL_OP_OR                reduce using rule 67 (constant)
    LOGICAL_OP_AND               reduce using rule 67 (constant)


State 158

   68 constant: C_FLOAT •

    BINARY_LIST_OP               reduce using rule 68 (constant)
    ')'                          reduce using rule 68 (constant)
    ','                          reduce using rule 68 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 68 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 68 (constant)
    RELATIONAL_OP                reduce using rule 68 (constant)
    EQUALITY_OP                  reduce using rule 68 (constant)
    LOGICAL_OP_OR                reduce using rule 68 (constant)
    LOGICAL_OP_AND               reduce using rule 68 (constant)


State 159

   69 constant: C_NIL •

    BINARY_LIST_OP               reduce using rule 69 (constant)
    ')'                          reduce using rule 69 (constant)
    ','                          reduce using rule 69 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 69 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 69 (constant)
    RELATIONAL_OP                reduce using rule 69 (constant)
    EQUALITY_OP                  reduce using rule 69 (constant)
    LOGICAL_OP_OR                reduce using rule 69 (constant)
    LOGICAL_OP_AND               reduce using rule 69 (constant)


State 160

   33 expression: IDENTIFIER • '=' expression
   36 function_call_expression: IDENTIFIER • '(' function_arguments_optional ')'
   61 simple_value: IDENTIFIER •

    '('  shift, and go to state 215
    '='  shift, and go to state 216

    BINARY_LIST_OP               reduce using rule 61 (simple_value)
    ')'                          reduce using rule 61 (simple_value)
    ','                          reduce using rule 61 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 61 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 61 (simple_value)
    RELATIONAL_OP                reduce using rule 61 (simple_value)
    EQUALITY_OP                  reduce using rule 61 (simple_value)
    LOGICAL_OP_OR                reduce using rule 61 (simple_value)
    LOGICAL_OP_AND               reduce using rule 61 (simple_value)


State 161

   64 simple_value: UNARY_LIST_OP • simple_value

    C_INTEGER              shift, and go to state 157
    C_FLOAT                shift, and go to state 158
    C_NIL                  shift, and go to state 159
    IDENTIFIER             shift, and go to state 217
    UNARY_LIST_OP          shift, and go to state 161
    '('                    shift, and go to state 162
    '!'                    shift, and go to state 163
    ARITMETIC_OP_ADDITIVE  shift, and go to state 164

    simple_value  go to state 218
    constant      go to state 174


State 162

   65 simple_value: '(' • expression ')'

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    IDENTIFIER             shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    expression                 go to state 219
    function_call_expression   go to state 147
    or_expression              go to state 148
    and_expression             go to state 149
    equality_expression        go to state 150
    relational_expression      go to state 151
    list_expression            go to state 152
    addition_expression        go to state 153
    multiplication_expression  go to state 154
    simple_value               go to state 155
    constant                   go to state 156


State 163

   63 simple_value: '!' • simple_value

    C_INTEGER              shift, and go to state 157
    C_FLOAT                shift, and go to state 158
    C_NIL                  shift, and go to state 159
    IDENTIFIER             shift, and go to state 217
    UNARY_LIST_OP          shift, and go to state 161
    '('                    shift, and go to state 162
    '!'                    shift, and go to state 163
    ARITMETIC_OP_ADDITIVE  shift, and go to state 164

    simple_value  go to state 220
    constant      go to state 174


State 164

   62 simple_value: ARITMETIC_OP_ADDITIVE • simple_value

    C_INTEGER              shift, and go to state 157
    C_FLOAT                shift, and go to state 158
    C_NIL                  shift, and go to state 159
    IDENTIFIER             shift, and go to state 217
    UNARY_LIST_OP          shift, and go to state 161
    '('                    shift, and go to state 162
    '!'                    shift, and go to state 163
    ARITMETIC_OP_ADDITIVE  shift, and go to state 164

    simple_value  go to state 221
    constant      go to state 174


State 165

   35 expression: function_call_expression •

    ')'  reduce using rule 35 (expression)
    ','  reduce using rule 35 (expression)


State 166

   34 expression: or_expression •
   46 or_expression: or_expression • LOGICAL_OP_OR and_expression

    LOGICAL_OP_OR  shift, and go to state 222

    ')'  reduce using rule 34 (expression)
    ','  reduce using rule 34 (expression)


State 167

   47 or_expression: and_expression •
   48 and_expression: and_expression • LOGICAL_OP_AND equality_expression

    LOGICAL_OP_AND  shift, and go to state 223

    ')'            reduce using rule 47 (or_expression)
    ','            reduce using rule 47 (or_expression)
    LOGICAL_OP_OR  reduce using rule 47 (or_expression)


State 168

   49 and_expression: equality_expression •
   50 equality_expression: equality_expression • EQUALITY_OP relational_expression

    EQUALITY_OP  shift, and go to state 224

    ')'             reduce using rule 49 (and_expression)
    ','             reduce using rule 49 (and_expression)
    LOGICAL_OP_OR   reduce using rule 49 (and_expression)
    LOGICAL_OP_AND  reduce using rule 49 (and_expression)


State 169

   51 equality_expression: relational_expression •
   52 relational_expression: relational_expression • RELATIONAL_OP list_expression

    RELATIONAL_OP  shift, and go to state 225

    ')'             reduce using rule 51 (equality_expression)
    ','             reduce using rule 51 (equality_expression)
    EQUALITY_OP     reduce using rule 51 (equality_expression)
    LOGICAL_OP_OR   reduce using rule 51 (equality_expression)
    LOGICAL_OP_AND  reduce using rule 51 (equality_expression)


State 170

   53 relational_expression: list_expression •
   54 list_expression: list_expression • BINARY_LIST_OP addition_expression

    BINARY_LIST_OP  shift, and go to state 226

    ')'             reduce using rule 53 (relational_expression)
    ','             reduce using rule 53 (relational_expression)
    RELATIONAL_OP   reduce using rule 53 (relational_expression)
    EQUALITY_OP     reduce using rule 53 (relational_expression)
    LOGICAL_OP_OR   reduce using rule 53 (relational_expression)
    LOGICAL_OP_AND  reduce using rule 53 (relational_expression)


State 171

   55 list_expression: addition_expression •
   56 addition_expression: addition_expression • ARITMETIC_OP_ADDITIVE multiplication_expression

    ARITMETIC_OP_ADDITIVE  shift, and go to state 227

    BINARY_LIST_OP  reduce using rule 55 (list_expression)
    ')'             reduce using rule 55 (list_expression)
    ','             reduce using rule 55 (list_expression)
    RELATIONAL_OP   reduce using rule 55 (list_expression)
    EQUALITY_OP     reduce using rule 55 (list_expression)
    LOGICAL_OP_OR   reduce using rule 55 (list_expression)
    LOGICAL_OP_AND  reduce using rule 55 (list_expression)


State 172

   57 addition_expression: multiplication_expression •
   58 multiplication_expression: multiplication_expression • ARITMETIC_OP_MULTIPLICATIVE simple_value

    ARITMETIC_OP_MULTIPLICATIVE  shift, and go to state 228

    BINARY_LIST_OP         reduce using rule 57 (addition_expression)
    ')'                    reduce using rule 57 (addition_expression)
    ','                    reduce using rule 57 (addition_expression)
    ARITMETIC_OP_ADDITIVE  reduce using rule 57 (addition_expression)
    RELATIONAL_OP          reduce using rule 57 (addition_expression)
    EQUALITY_OP            reduce using rule 57 (addition_expression)
    LOGICAL_OP_OR          reduce using rule 57 (addition_expression)
    LOGICAL_OP_AND         reduce using rule 57 (addition_expression)


State 173

   59 multiplication_expression: simple_value •

    BINARY_LIST_OP               reduce using rule 59 (multiplication_expression)
    ')'                          reduce using rule 59 (multiplication_expression)
    ','                          reduce using rule 59 (multiplication_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 59 (multiplication_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 59 (multiplication_expression)
    RELATIONAL_OP                reduce using rule 59 (multiplication_expression)
    EQUALITY_OP                  reduce using rule 59 (multiplication_expression)
    LOGICAL_OP_OR                reduce using rule 59 (multiplication_expression)
    LOGICAL_OP_AND               reduce using rule 59 (multiplication_expression)


State 174

   60 simple_value: constant •

    BINARY_LIST_OP               reduce using rule 60 (simple_value)
    ')'                          reduce using rule 60 (simple_value)
    ','                          reduce using rule 60 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 60 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 60 (simple_value)
    RELATIONAL_OP                reduce using rule 60 (simple_value)
    EQUALITY_OP                  reduce using rule 60 (simple_value)
    LOGICAL_OP_OR                reduce using rule 60 (simple_value)
    LOGICAL_OP_AND               reduce using rule 60 (simple_value)


State 175

   66 variable_declaration_statement: TYPE • IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 229


State 176

   23 for_statement: RW_FOR • '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    '('  shift, and go to state 230


State 177

   32 return_statement: RW_RETURN • expression ';'

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    IDENTIFIER             shift, and go to state 24
    UNARY_LIST_OP          shift, and go to state 30
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    expression                 go to state 231
    function_call_expression   go to state 45
    or_expression              go to state 46
    and_expression             go to state 47
    equality_expression        go to state 48
    relational_expression      go to state 49
    list_expression            go to state 50
    addition_expression        go to state 51
    multiplication_expression  go to state 52
    simple_value               go to state 53
    constant                   go to state 55


State 178

   24 if_else_statement: RW_IF • '(' expression ')' statement
   25                  | RW_IF • '(' expression ')' statement RW_ELSE statement

    '('  shift, and go to state 232


State 179

   29 input_statement: IO_READ • '(' IDENTIFIER ')' ';'

    '('  shift, and go to state 233


State 180

   30 output_statement: IO_WRITE • '(' expression ')' ';'
   31                 | IO_WRITE • '(' LIT_STRING ')' ';'

    '('  shift, and go to state 234


State 181

    7 block: '{' • statements '}'

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    TYPE                   shift, and go to state 122
    IDENTIFIER             shift, and go to state 24
    RW_FOR                 shift, and go to state 123
    RW_RETURN              shift, and go to state 124
    RW_IF                  shift, and go to state 125
    IO_READ                shift, and go to state 126
    IO_WRITE               shift, and go to state 127
    UNARY_LIST_OP          shift, and go to state 30
    '{'                    shift, and go to state 128
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    block                           go to state 129
    statements                      go to state 235
    statement                       go to state 68
    for_statement                   go to state 130
    if_else_statement               go to state 131
    expression_statement            go to state 132
    io_statement                    go to state 133
    input_statement                 go to state 134
    output_statement                go to state 135
    return_statement                go to state 136
    expression                      go to state 137
    function_call_expression        go to state 45
    or_expression                   go to state 46
    and_expression                  go to state 47
    equality_expression             go to state 48
    relational_expression           go to state 49
    list_expression                 go to state 50
    addition_expression             go to state 51
    multiplication_expression       go to state 52
    simple_value                    go to state 53
    variable_declaration_statement  go to state 138
    constant                        go to state 55


State 182

   16 statement: block •

    $end     reduce using rule 16 (statement)
    TYPE     reduce using rule 16 (statement)
    RW_ELSE  reduce using rule 16 (statement)


State 183

   14 statement: for_statement •

    $end     reduce using rule 14 (statement)
    TYPE     reduce using rule 14 (statement)
    RW_ELSE  reduce using rule 14 (statement)


State 184

   15 statement: if_else_statement •

    $end     reduce using rule 15 (statement)
    TYPE     reduce using rule 15 (statement)
    RW_ELSE  reduce using rule 15 (statement)


State 185

   10 statement: expression_statement •

    $end     reduce using rule 10 (statement)
    TYPE     reduce using rule 10 (statement)
    RW_ELSE  reduce using rule 10 (statement)


State 186

   11 statement: io_statement •

    $end     reduce using rule 11 (statement)
    TYPE     reduce using rule 11 (statement)
    RW_ELSE  reduce using rule 11 (statement)


State 187

   27 io_statement: input_statement •

    $end     reduce using rule 27 (io_statement)
    TYPE     reduce using rule 27 (io_statement)
    RW_ELSE  reduce using rule 27 (io_statement)


State 188

   28 io_statement: output_statement •

    $end     reduce using rule 28 (io_statement)
    TYPE     reduce using rule 28 (io_statement)
    RW_ELSE  reduce using rule 28 (io_statement)


State 189

   12 statement: return_statement •

    $end     reduce using rule 12 (statement)
    TYPE     reduce using rule 12 (statement)
    RW_ELSE  reduce using rule 12 (statement)


State 190

   26 expression_statement: expression • ';'

    ';'  shift, and go to state 236


State 191

   13 statement: variable_declaration_statement •

    $end     reduce using rule 13 (statement)
    TYPE     reduce using rule 13 (statement)
    RW_ELSE  reduce using rule 13 (statement)


State 192

   43 expression_optative: expression •

    ')'  reduce using rule 43 (expression_optative)


State 193

   66 variable_declaration_statement: TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 237


State 194

   23 for_statement: RW_FOR '(' • expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    IDENTIFIER             shift, and go to state 24
    UNARY_LIST_OP          shift, and go to state 30
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    ';'  reduce using rule 42 (expression_optative)

    expression                 go to state 85
    function_call_expression   go to state 45
    expression_optative        go to state 238
    or_expression              go to state 46
    and_expression             go to state 47
    equality_expression        go to state 48
    relational_expression      go to state 49
    list_expression            go to state 50
    addition_expression        go to state 51
    multiplication_expression  go to state 52
    simple_value               go to state 53
    constant                   go to state 55


State 195

   32 return_statement: RW_RETURN expression • ';'

    ';'  shift, and go to state 239


State 196

   24 if_else_statement: RW_IF '(' • expression ')' statement
   25                  | RW_IF '(' • expression ')' statement RW_ELSE statement

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    IDENTIFIER             shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    expression                 go to state 240
    function_call_expression   go to state 147
    or_expression              go to state 148
    and_expression             go to state 149
    equality_expression        go to state 150
    relational_expression      go to state 151
    list_expression            go to state 152
    addition_expression        go to state 153
    multiplication_expression  go to state 154
    simple_value               go to state 155
    constant                   go to state 156


State 197

   29 input_statement: IO_READ '(' • IDENTIFIER ')' ';'

    IDENTIFIER  shift, and go to state 241


State 198

   30 output_statement: IO_WRITE '(' • expression ')' ';'
   31                 | IO_WRITE '(' • LIT_STRING ')' ';'

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    LIT_STRING             shift, and go to state 242
    IDENTIFIER             shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    expression                 go to state 243
    function_call_expression   go to state 147
    or_expression              go to state 148
    and_expression             go to state 149
    equality_expression        go to state 150
    relational_expression      go to state 151
    list_expression            go to state 152
    addition_expression        go to state 153
    multiplication_expression  go to state 154
    simple_value               go to state 155
    constant                   go to state 156


State 199

    7 block: '{' statements • '}'
    8 statements: statements • statement

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    TYPE                   shift, and go to state 122
    IDENTIFIER             shift, and go to state 24
    RW_FOR                 shift, and go to state 123
    RW_RETURN              shift, and go to state 124
    RW_IF                  shift, and go to state 125
    IO_READ                shift, and go to state 126
    IO_WRITE               shift, and go to state 127
    UNARY_LIST_OP          shift, and go to state 30
    '{'                    shift, and go to state 128
    '}'                    shift, and go to state 244
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    block                           go to state 129
    statement                       go to state 93
    for_statement                   go to state 130
    if_else_statement               go to state 131
    expression_statement            go to state 132
    io_statement                    go to state 133
    input_statement                 go to state 134
    output_statement                go to state 135
    return_statement                go to state 136
    expression                      go to state 137
    function_call_expression        go to state 45
    or_expression                   go to state 46
    and_expression                  go to state 47
    equality_expression             go to state 48
    relational_expression           go to state 49
    list_expression                 go to state 50
    addition_expression             go to state 51
    multiplication_expression       go to state 52
    simple_value                    go to state 53
    variable_declaration_statement  go to state 138
    constant                        go to state 55


State 200

   26 expression_statement: expression ';' •

    C_INTEGER              reduce using rule 26 (expression_statement)
    C_FLOAT                reduce using rule 26 (expression_statement)
    C_NIL                  reduce using rule 26 (expression_statement)
    TYPE                   reduce using rule 26 (expression_statement)
    IDENTIFIER             reduce using rule 26 (expression_statement)
    RW_FOR                 reduce using rule 26 (expression_statement)
    RW_RETURN              reduce using rule 26 (expression_statement)
    RW_IF                  reduce using rule 26 (expression_statement)
    IO_READ                reduce using rule 26 (expression_statement)
    IO_WRITE               reduce using rule 26 (expression_statement)
    UNARY_LIST_OP          reduce using rule 26 (expression_statement)
    '{'                    reduce using rule 26 (expression_statement)
    '}'                    reduce using rule 26 (expression_statement)
    '('                    reduce using rule 26 (expression_statement)
    '!'                    reduce using rule 26 (expression_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 26 (expression_statement)


State 201

   36 function_call_expression: IDENTIFIER '(' • function_arguments_optional ')'

    C_INTEGER              shift, and go to state 157
    C_FLOAT                shift, and go to state 158
    C_NIL                  shift, and go to state 159
    IDENTIFIER             shift, and go to state 160
    UNARY_LIST_OP          shift, and go to state 161
    '('                    shift, and go to state 162
    '!'                    shift, and go to state 163
    ARITMETIC_OP_ADDITIVE  shift, and go to state 164

    ')'  reduce using rule 37 (function_arguments_optional)

    expression                   go to state 80
    function_call_expression     go to state 165
    function_arguments_optional  go to state 245
    function_arguments           go to state 82
    function_argument            go to state 83
    or_expression                go to state 166
    and_expression               go to state 167
    equality_expression          go to state 168
    relational_expression        go to state 169
    list_expression              go to state 170
    addition_expression          go to state 171
    multiplication_expression    go to state 172
    simple_value                 go to state 173
    constant                     go to state 174


State 202

   33 expression: IDENTIFIER '=' • expression

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    IDENTIFIER             shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    expression                 go to state 246
    function_call_expression   go to state 147
    or_expression              go to state 148
    and_expression             go to state 149
    equality_expression        go to state 150
    relational_expression      go to state 151
    list_expression            go to state 152
    addition_expression        go to state 153
    multiplication_expression  go to state 154
    simple_value               go to state 155
    constant                   go to state 156


State 203

   61 simple_value: IDENTIFIER •

    BINARY_LIST_OP               reduce using rule 61 (simple_value)
    ')'                          reduce using rule 61 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 61 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 61 (simple_value)
    RELATIONAL_OP                reduce using rule 61 (simple_value)
    EQUALITY_OP                  reduce using rule 61 (simple_value)
    LOGICAL_OP_OR                reduce using rule 61 (simple_value)
    LOGICAL_OP_AND               reduce using rule 61 (simple_value)


State 204

   64 simple_value: UNARY_LIST_OP simple_value •

    BINARY_LIST_OP               reduce using rule 64 (simple_value)
    ')'                          reduce using rule 64 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 64 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 64 (simple_value)
    RELATIONAL_OP                reduce using rule 64 (simple_value)
    EQUALITY_OP                  reduce using rule 64 (simple_value)
    LOGICAL_OP_OR                reduce using rule 64 (simple_value)
    LOGICAL_OP_AND               reduce using rule 64 (simple_value)


State 205

   65 simple_value: '(' expression • ')'

    ')'  shift, and go to state 247


State 206

   63 simple_value: '!' simple_value •

    BINARY_LIST_OP               reduce using rule 63 (simple_value)
    ')'                          reduce using rule 63 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 63 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 63 (simple_value)
    RELATIONAL_OP                reduce using rule 63 (simple_value)
    EQUALITY_OP                  reduce using rule 63 (simple_value)
    LOGICAL_OP_OR                reduce using rule 63 (simple_value)
    LOGICAL_OP_AND               reduce using rule 63 (simple_value)


State 207

   62 simple_value: ARITMETIC_OP_ADDITIVE simple_value •

    BINARY_LIST_OP               reduce using rule 62 (simple_value)
    ')'                          reduce using rule 62 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 62 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 62 (simple_value)
    RELATIONAL_OP                reduce using rule 62 (simple_value)
    EQUALITY_OP                  reduce using rule 62 (simple_value)
    LOGICAL_OP_OR                reduce using rule 62 (simple_value)
    LOGICAL_OP_AND               reduce using rule 62 (simple_value)


State 208

   46 or_expression: or_expression LOGICAL_OP_OR • and_expression

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    IDENTIFIER             shift, and go to state 203
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    and_expression             go to state 248
    equality_expression        go to state 150
    relational_expression      go to state 151
    list_expression            go to state 152
    addition_expression        go to state 153
    multiplication_expression  go to state 154
    simple_value               go to state 155
    constant                   go to state 156


State 209

   48 and_expression: and_expression LOGICAL_OP_AND • equality_expression

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    IDENTIFIER             shift, and go to state 203
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    equality_expression        go to state 249
    relational_expression      go to state 151
    list_expression            go to state 152
    addition_expression        go to state 153
    multiplication_expression  go to state 154
    simple_value               go to state 155
    constant                   go to state 156


State 210

   50 equality_expression: equality_expression EQUALITY_OP • relational_expression

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    IDENTIFIER             shift, and go to state 203
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    relational_expression      go to state 250
    list_expression            go to state 152
    addition_expression        go to state 153
    multiplication_expression  go to state 154
    simple_value               go to state 155
    constant                   go to state 156


State 211

   52 relational_expression: relational_expression RELATIONAL_OP • list_expression

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    IDENTIFIER             shift, and go to state 203
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    list_expression            go to state 251
    addition_expression        go to state 153
    multiplication_expression  go to state 154
    simple_value               go to state 155
    constant                   go to state 156


State 212

   54 list_expression: list_expression BINARY_LIST_OP • addition_expression

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    IDENTIFIER             shift, and go to state 203
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    addition_expression        go to state 252
    multiplication_expression  go to state 154
    simple_value               go to state 155
    constant                   go to state 156


State 213

   56 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE • multiplication_expression

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    IDENTIFIER             shift, and go to state 203
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    multiplication_expression  go to state 253
    simple_value               go to state 155
    constant                   go to state 156


State 214

   58 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE • simple_value

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    IDENTIFIER             shift, and go to state 203
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    simple_value  go to state 254
    constant      go to state 156


State 215

   36 function_call_expression: IDENTIFIER '(' • function_arguments_optional ')'

    C_INTEGER              shift, and go to state 157
    C_FLOAT                shift, and go to state 158
    C_NIL                  shift, and go to state 159
    IDENTIFIER             shift, and go to state 160
    UNARY_LIST_OP          shift, and go to state 161
    '('                    shift, and go to state 162
    '!'                    shift, and go to state 163
    ARITMETIC_OP_ADDITIVE  shift, and go to state 164

    ')'  reduce using rule 37 (function_arguments_optional)

    expression                   go to state 80
    function_call_expression     go to state 165
    function_arguments_optional  go to state 255
    function_arguments           go to state 82
    function_argument            go to state 83
    or_expression                go to state 166
    and_expression               go to state 167
    equality_expression          go to state 168
    relational_expression        go to state 169
    list_expression              go to state 170
    addition_expression          go to state 171
    multiplication_expression    go to state 172
    simple_value                 go to state 173
    constant                     go to state 174


State 216

   33 expression: IDENTIFIER '=' • expression

    C_INTEGER              shift, and go to state 157
    C_FLOAT                shift, and go to state 158
    C_NIL                  shift, and go to state 159
    IDENTIFIER             shift, and go to state 160
    UNARY_LIST_OP          shift, and go to state 161
    '('                    shift, and go to state 162
    '!'                    shift, and go to state 163
    ARITMETIC_OP_ADDITIVE  shift, and go to state 164

    expression                 go to state 256
    function_call_expression   go to state 165
    or_expression              go to state 166
    and_expression             go to state 167
    equality_expression        go to state 168
    relational_expression      go to state 169
    list_expression            go to state 170
    addition_expression        go to state 171
    multiplication_expression  go to state 172
    simple_value               go to state 173
    constant                   go to state 174


State 217

   61 simple_value: IDENTIFIER •

    BINARY_LIST_OP               reduce using rule 61 (simple_value)
    ')'                          reduce using rule 61 (simple_value)
    ','                          reduce using rule 61 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 61 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 61 (simple_value)
    RELATIONAL_OP                reduce using rule 61 (simple_value)
    EQUALITY_OP                  reduce using rule 61 (simple_value)
    LOGICAL_OP_OR                reduce using rule 61 (simple_value)
    LOGICAL_OP_AND               reduce using rule 61 (simple_value)


State 218

   64 simple_value: UNARY_LIST_OP simple_value •

    BINARY_LIST_OP               reduce using rule 64 (simple_value)
    ')'                          reduce using rule 64 (simple_value)
    ','                          reduce using rule 64 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 64 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 64 (simple_value)
    RELATIONAL_OP                reduce using rule 64 (simple_value)
    EQUALITY_OP                  reduce using rule 64 (simple_value)
    LOGICAL_OP_OR                reduce using rule 64 (simple_value)
    LOGICAL_OP_AND               reduce using rule 64 (simple_value)


State 219

   65 simple_value: '(' expression • ')'

    ')'  shift, and go to state 257


State 220

   63 simple_value: '!' simple_value •

    BINARY_LIST_OP               reduce using rule 63 (simple_value)
    ')'                          reduce using rule 63 (simple_value)
    ','                          reduce using rule 63 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 63 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 63 (simple_value)
    RELATIONAL_OP                reduce using rule 63 (simple_value)
    EQUALITY_OP                  reduce using rule 63 (simple_value)
    LOGICAL_OP_OR                reduce using rule 63 (simple_value)
    LOGICAL_OP_AND               reduce using rule 63 (simple_value)


State 221

   62 simple_value: ARITMETIC_OP_ADDITIVE simple_value •

    BINARY_LIST_OP               reduce using rule 62 (simple_value)
    ')'                          reduce using rule 62 (simple_value)
    ','                          reduce using rule 62 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 62 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 62 (simple_value)
    RELATIONAL_OP                reduce using rule 62 (simple_value)
    EQUALITY_OP                  reduce using rule 62 (simple_value)
    LOGICAL_OP_OR                reduce using rule 62 (simple_value)
    LOGICAL_OP_AND               reduce using rule 62 (simple_value)


State 222

   46 or_expression: or_expression LOGICAL_OP_OR • and_expression

    C_INTEGER              shift, and go to state 157
    C_FLOAT                shift, and go to state 158
    C_NIL                  shift, and go to state 159
    IDENTIFIER             shift, and go to state 217
    UNARY_LIST_OP          shift, and go to state 161
    '('                    shift, and go to state 162
    '!'                    shift, and go to state 163
    ARITMETIC_OP_ADDITIVE  shift, and go to state 164

    and_expression             go to state 258
    equality_expression        go to state 168
    relational_expression      go to state 169
    list_expression            go to state 170
    addition_expression        go to state 171
    multiplication_expression  go to state 172
    simple_value               go to state 173
    constant                   go to state 174


State 223

   48 and_expression: and_expression LOGICAL_OP_AND • equality_expression

    C_INTEGER              shift, and go to state 157
    C_FLOAT                shift, and go to state 158
    C_NIL                  shift, and go to state 159
    IDENTIFIER             shift, and go to state 217
    UNARY_LIST_OP          shift, and go to state 161
    '('                    shift, and go to state 162
    '!'                    shift, and go to state 163
    ARITMETIC_OP_ADDITIVE  shift, and go to state 164

    equality_expression        go to state 259
    relational_expression      go to state 169
    list_expression            go to state 170
    addition_expression        go to state 171
    multiplication_expression  go to state 172
    simple_value               go to state 173
    constant                   go to state 174


State 224

   50 equality_expression: equality_expression EQUALITY_OP • relational_expression

    C_INTEGER              shift, and go to state 157
    C_FLOAT                shift, and go to state 158
    C_NIL                  shift, and go to state 159
    IDENTIFIER             shift, and go to state 217
    UNARY_LIST_OP          shift, and go to state 161
    '('                    shift, and go to state 162
    '!'                    shift, and go to state 163
    ARITMETIC_OP_ADDITIVE  shift, and go to state 164

    relational_expression      go to state 260
    list_expression            go to state 170
    addition_expression        go to state 171
    multiplication_expression  go to state 172
    simple_value               go to state 173
    constant                   go to state 174


State 225

   52 relational_expression: relational_expression RELATIONAL_OP • list_expression

    C_INTEGER              shift, and go to state 157
    C_FLOAT                shift, and go to state 158
    C_NIL                  shift, and go to state 159
    IDENTIFIER             shift, and go to state 217
    UNARY_LIST_OP          shift, and go to state 161
    '('                    shift, and go to state 162
    '!'                    shift, and go to state 163
    ARITMETIC_OP_ADDITIVE  shift, and go to state 164

    list_expression            go to state 261
    addition_expression        go to state 171
    multiplication_expression  go to state 172
    simple_value               go to state 173
    constant                   go to state 174


State 226

   54 list_expression: list_expression BINARY_LIST_OP • addition_expression

    C_INTEGER              shift, and go to state 157
    C_FLOAT                shift, and go to state 158
    C_NIL                  shift, and go to state 159
    IDENTIFIER             shift, and go to state 217
    UNARY_LIST_OP          shift, and go to state 161
    '('                    shift, and go to state 162
    '!'                    shift, and go to state 163
    ARITMETIC_OP_ADDITIVE  shift, and go to state 164

    addition_expression        go to state 262
    multiplication_expression  go to state 172
    simple_value               go to state 173
    constant                   go to state 174


State 227

   56 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE • multiplication_expression

    C_INTEGER              shift, and go to state 157
    C_FLOAT                shift, and go to state 158
    C_NIL                  shift, and go to state 159
    IDENTIFIER             shift, and go to state 217
    UNARY_LIST_OP          shift, and go to state 161
    '('                    shift, and go to state 162
    '!'                    shift, and go to state 163
    ARITMETIC_OP_ADDITIVE  shift, and go to state 164

    multiplication_expression  go to state 263
    simple_value               go to state 173
    constant                   go to state 174


State 228

   58 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE • simple_value

    C_INTEGER              shift, and go to state 157
    C_FLOAT                shift, and go to state 158
    C_NIL                  shift, and go to state 159
    IDENTIFIER             shift, and go to state 217
    UNARY_LIST_OP          shift, and go to state 161
    '('                    shift, and go to state 162
    '!'                    shift, and go to state 163
    ARITMETIC_OP_ADDITIVE  shift, and go to state 164

    simple_value  go to state 264
    constant      go to state 174


State 229

   66 variable_declaration_statement: TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 265


State 230

   23 for_statement: RW_FOR '(' • expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    IDENTIFIER             shift, and go to state 24
    UNARY_LIST_OP          shift, and go to state 30
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    ';'  reduce using rule 42 (expression_optative)

    expression                 go to state 85
    function_call_expression   go to state 45
    expression_optative        go to state 266
    or_expression              go to state 46
    and_expression             go to state 47
    equality_expression        go to state 48
    relational_expression      go to state 49
    list_expression            go to state 50
    addition_expression        go to state 51
    multiplication_expression  go to state 52
    simple_value               go to state 53
    constant                   go to state 55


State 231

   32 return_statement: RW_RETURN expression • ';'

    ';'  shift, and go to state 267


State 232

   24 if_else_statement: RW_IF '(' • expression ')' statement
   25                  | RW_IF '(' • expression ')' statement RW_ELSE statement

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    IDENTIFIER             shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    expression                 go to state 268
    function_call_expression   go to state 147
    or_expression              go to state 148
    and_expression             go to state 149
    equality_expression        go to state 150
    relational_expression      go to state 151
    list_expression            go to state 152
    addition_expression        go to state 153
    multiplication_expression  go to state 154
    simple_value               go to state 155
    constant                   go to state 156


State 233

   29 input_statement: IO_READ '(' • IDENTIFIER ')' ';'

    IDENTIFIER  shift, and go to state 269


State 234

   30 output_statement: IO_WRITE '(' • expression ')' ';'
   31                 | IO_WRITE '(' • LIT_STRING ')' ';'

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    LIT_STRING             shift, and go to state 270
    IDENTIFIER             shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    expression                 go to state 271
    function_call_expression   go to state 147
    or_expression              go to state 148
    and_expression             go to state 149
    equality_expression        go to state 150
    relational_expression      go to state 151
    list_expression            go to state 152
    addition_expression        go to state 153
    multiplication_expression  go to state 154
    simple_value               go to state 155
    constant                   go to state 156


State 235

    7 block: '{' statements • '}'
    8 statements: statements • statement

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    TYPE                   shift, and go to state 122
    IDENTIFIER             shift, and go to state 24
    RW_FOR                 shift, and go to state 123
    RW_RETURN              shift, and go to state 124
    RW_IF                  shift, and go to state 125
    IO_READ                shift, and go to state 126
    IO_WRITE               shift, and go to state 127
    UNARY_LIST_OP          shift, and go to state 30
    '{'                    shift, and go to state 128
    '}'                    shift, and go to state 272
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    block                           go to state 129
    statement                       go to state 93
    for_statement                   go to state 130
    if_else_statement               go to state 131
    expression_statement            go to state 132
    io_statement                    go to state 133
    input_statement                 go to state 134
    output_statement                go to state 135
    return_statement                go to state 136
    expression                      go to state 137
    function_call_expression        go to state 45
    or_expression                   go to state 46
    and_expression                  go to state 47
    equality_expression             go to state 48
    relational_expression           go to state 49
    list_expression                 go to state 50
    addition_expression             go to state 51
    multiplication_expression       go to state 52
    simple_value                    go to state 53
    variable_declaration_statement  go to state 138
    constant                        go to state 55


State 236

   26 expression_statement: expression ';' •

    $end     reduce using rule 26 (expression_statement)
    TYPE     reduce using rule 26 (expression_statement)
    RW_ELSE  reduce using rule 26 (expression_statement)


State 237

   66 variable_declaration_statement: TYPE IDENTIFIER ';' •

    C_INTEGER              reduce using rule 66 (variable_declaration_statement)
    C_FLOAT                reduce using rule 66 (variable_declaration_statement)
    C_NIL                  reduce using rule 66 (variable_declaration_statement)
    TYPE                   reduce using rule 66 (variable_declaration_statement)
    IDENTIFIER             reduce using rule 66 (variable_declaration_statement)
    RW_FOR                 reduce using rule 66 (variable_declaration_statement)
    RW_RETURN              reduce using rule 66 (variable_declaration_statement)
    RW_IF                  reduce using rule 66 (variable_declaration_statement)
    IO_READ                reduce using rule 66 (variable_declaration_statement)
    IO_WRITE               reduce using rule 66 (variable_declaration_statement)
    UNARY_LIST_OP          reduce using rule 66 (variable_declaration_statement)
    '{'                    reduce using rule 66 (variable_declaration_statement)
    '}'                    reduce using rule 66 (variable_declaration_statement)
    '('                    reduce using rule 66 (variable_declaration_statement)
    '!'                    reduce using rule 66 (variable_declaration_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 66 (variable_declaration_statement)


State 238

   23 for_statement: RW_FOR '(' expression_optative • ';' or_expression_optative ';' expression_optative ')' statement

    ';'  shift, and go to state 273


State 239

   32 return_statement: RW_RETURN expression ';' •

    C_INTEGER              reduce using rule 32 (return_statement)
    C_FLOAT                reduce using rule 32 (return_statement)
    C_NIL                  reduce using rule 32 (return_statement)
    TYPE                   reduce using rule 32 (return_statement)
    IDENTIFIER             reduce using rule 32 (return_statement)
    RW_FOR                 reduce using rule 32 (return_statement)
    RW_RETURN              reduce using rule 32 (return_statement)
    RW_IF                  reduce using rule 32 (return_statement)
    IO_READ                reduce using rule 32 (return_statement)
    IO_WRITE               reduce using rule 32 (return_statement)
    UNARY_LIST_OP          reduce using rule 32 (return_statement)
    '{'                    reduce using rule 32 (return_statement)
    '}'                    reduce using rule 32 (return_statement)
    '('                    reduce using rule 32 (return_statement)
    '!'                    reduce using rule 32 (return_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 32 (return_statement)


State 240

   24 if_else_statement: RW_IF '(' expression • ')' statement
   25                  | RW_IF '(' expression • ')' statement RW_ELSE statement

    ')'  shift, and go to state 274


State 241

   29 input_statement: IO_READ '(' IDENTIFIER • ')' ';'

    ')'  shift, and go to state 275


State 242

   31 output_statement: IO_WRITE '(' LIT_STRING • ')' ';'

    ')'  shift, and go to state 276


State 243

   30 output_statement: IO_WRITE '(' expression • ')' ';'

    ')'  shift, and go to state 277


State 244

    7 block: '{' statements '}' •

    C_INTEGER              reduce using rule 7 (block)
    C_FLOAT                reduce using rule 7 (block)
    C_NIL                  reduce using rule 7 (block)
    TYPE                   reduce using rule 7 (block)
    IDENTIFIER             reduce using rule 7 (block)
    RW_FOR                 reduce using rule 7 (block)
    RW_RETURN              reduce using rule 7 (block)
    RW_IF                  reduce using rule 7 (block)
    IO_READ                reduce using rule 7 (block)
    IO_WRITE               reduce using rule 7 (block)
    UNARY_LIST_OP          reduce using rule 7 (block)
    '{'                    reduce using rule 7 (block)
    '}'                    reduce using rule 7 (block)
    '('                    reduce using rule 7 (block)
    '!'                    reduce using rule 7 (block)
    ARITMETIC_OP_ADDITIVE  reduce using rule 7 (block)


State 245

   36 function_call_expression: IDENTIFIER '(' function_arguments_optional • ')'

    ')'  shift, and go to state 278


State 246

   33 expression: IDENTIFIER '=' expression •

    ')'  reduce using rule 33 (expression)


State 247

   65 simple_value: '(' expression ')' •

    BINARY_LIST_OP               reduce using rule 65 (simple_value)
    ')'                          reduce using rule 65 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 65 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 65 (simple_value)
    RELATIONAL_OP                reduce using rule 65 (simple_value)
    EQUALITY_OP                  reduce using rule 65 (simple_value)
    LOGICAL_OP_OR                reduce using rule 65 (simple_value)
    LOGICAL_OP_AND               reduce using rule 65 (simple_value)


State 248

   46 or_expression: or_expression LOGICAL_OP_OR and_expression •
   48 and_expression: and_expression • LOGICAL_OP_AND equality_expression

    LOGICAL_OP_AND  shift, and go to state 209

    ')'            reduce using rule 46 (or_expression)
    LOGICAL_OP_OR  reduce using rule 46 (or_expression)


State 249

   48 and_expression: and_expression LOGICAL_OP_AND equality_expression •
   50 equality_expression: equality_expression • EQUALITY_OP relational_expression

    EQUALITY_OP  shift, and go to state 210

    ')'             reduce using rule 48 (and_expression)
    LOGICAL_OP_OR   reduce using rule 48 (and_expression)
    LOGICAL_OP_AND  reduce using rule 48 (and_expression)


State 250

   50 equality_expression: equality_expression EQUALITY_OP relational_expression •
   52 relational_expression: relational_expression • RELATIONAL_OP list_expression

    RELATIONAL_OP  shift, and go to state 211

    ')'             reduce using rule 50 (equality_expression)
    EQUALITY_OP     reduce using rule 50 (equality_expression)
    LOGICAL_OP_OR   reduce using rule 50 (equality_expression)
    LOGICAL_OP_AND  reduce using rule 50 (equality_expression)


State 251

   52 relational_expression: relational_expression RELATIONAL_OP list_expression •
   54 list_expression: list_expression • BINARY_LIST_OP addition_expression

    BINARY_LIST_OP  shift, and go to state 212

    ')'             reduce using rule 52 (relational_expression)
    RELATIONAL_OP   reduce using rule 52 (relational_expression)
    EQUALITY_OP     reduce using rule 52 (relational_expression)
    LOGICAL_OP_OR   reduce using rule 52 (relational_expression)
    LOGICAL_OP_AND  reduce using rule 52 (relational_expression)


State 252

   54 list_expression: list_expression BINARY_LIST_OP addition_expression •
   56 addition_expression: addition_expression • ARITMETIC_OP_ADDITIVE multiplication_expression

    ARITMETIC_OP_ADDITIVE  shift, and go to state 213

    BINARY_LIST_OP  reduce using rule 54 (list_expression)
    ')'             reduce using rule 54 (list_expression)
    RELATIONAL_OP   reduce using rule 54 (list_expression)
    EQUALITY_OP     reduce using rule 54 (list_expression)
    LOGICAL_OP_OR   reduce using rule 54 (list_expression)
    LOGICAL_OP_AND  reduce using rule 54 (list_expression)


State 253

   56 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE multiplication_expression •
   58 multiplication_expression: multiplication_expression • ARITMETIC_OP_MULTIPLICATIVE simple_value

    ARITMETIC_OP_MULTIPLICATIVE  shift, and go to state 214

    BINARY_LIST_OP         reduce using rule 56 (addition_expression)
    ')'                    reduce using rule 56 (addition_expression)
    ARITMETIC_OP_ADDITIVE  reduce using rule 56 (addition_expression)
    RELATIONAL_OP          reduce using rule 56 (addition_expression)
    EQUALITY_OP            reduce using rule 56 (addition_expression)
    LOGICAL_OP_OR          reduce using rule 56 (addition_expression)
    LOGICAL_OP_AND         reduce using rule 56 (addition_expression)


State 254

   58 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE simple_value •

    BINARY_LIST_OP               reduce using rule 58 (multiplication_expression)
    ')'                          reduce using rule 58 (multiplication_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 58 (multiplication_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 58 (multiplication_expression)
    RELATIONAL_OP                reduce using rule 58 (multiplication_expression)
    EQUALITY_OP                  reduce using rule 58 (multiplication_expression)
    LOGICAL_OP_OR                reduce using rule 58 (multiplication_expression)
    LOGICAL_OP_AND               reduce using rule 58 (multiplication_expression)


State 255

   36 function_call_expression: IDENTIFIER '(' function_arguments_optional • ')'

    ')'  shift, and go to state 279


State 256

   33 expression: IDENTIFIER '=' expression •

    ')'  reduce using rule 33 (expression)
    ','  reduce using rule 33 (expression)


State 257

   65 simple_value: '(' expression ')' •

    BINARY_LIST_OP               reduce using rule 65 (simple_value)
    ')'                          reduce using rule 65 (simple_value)
    ','                          reduce using rule 65 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 65 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 65 (simple_value)
    RELATIONAL_OP                reduce using rule 65 (simple_value)
    EQUALITY_OP                  reduce using rule 65 (simple_value)
    LOGICAL_OP_OR                reduce using rule 65 (simple_value)
    LOGICAL_OP_AND               reduce using rule 65 (simple_value)


State 258

   46 or_expression: or_expression LOGICAL_OP_OR and_expression •
   48 and_expression: and_expression • LOGICAL_OP_AND equality_expression

    LOGICAL_OP_AND  shift, and go to state 223

    ')'            reduce using rule 46 (or_expression)
    ','            reduce using rule 46 (or_expression)
    LOGICAL_OP_OR  reduce using rule 46 (or_expression)


State 259

   48 and_expression: and_expression LOGICAL_OP_AND equality_expression •
   50 equality_expression: equality_expression • EQUALITY_OP relational_expression

    EQUALITY_OP  shift, and go to state 224

    ')'             reduce using rule 48 (and_expression)
    ','             reduce using rule 48 (and_expression)
    LOGICAL_OP_OR   reduce using rule 48 (and_expression)
    LOGICAL_OP_AND  reduce using rule 48 (and_expression)


State 260

   50 equality_expression: equality_expression EQUALITY_OP relational_expression •
   52 relational_expression: relational_expression • RELATIONAL_OP list_expression

    RELATIONAL_OP  shift, and go to state 225

    ')'             reduce using rule 50 (equality_expression)
    ','             reduce using rule 50 (equality_expression)
    EQUALITY_OP     reduce using rule 50 (equality_expression)
    LOGICAL_OP_OR   reduce using rule 50 (equality_expression)
    LOGICAL_OP_AND  reduce using rule 50 (equality_expression)


State 261

   52 relational_expression: relational_expression RELATIONAL_OP list_expression •
   54 list_expression: list_expression • BINARY_LIST_OP addition_expression

    BINARY_LIST_OP  shift, and go to state 226

    ')'             reduce using rule 52 (relational_expression)
    ','             reduce using rule 52 (relational_expression)
    RELATIONAL_OP   reduce using rule 52 (relational_expression)
    EQUALITY_OP     reduce using rule 52 (relational_expression)
    LOGICAL_OP_OR   reduce using rule 52 (relational_expression)
    LOGICAL_OP_AND  reduce using rule 52 (relational_expression)


State 262

   54 list_expression: list_expression BINARY_LIST_OP addition_expression •
   56 addition_expression: addition_expression • ARITMETIC_OP_ADDITIVE multiplication_expression

    ARITMETIC_OP_ADDITIVE  shift, and go to state 227

    BINARY_LIST_OP  reduce using rule 54 (list_expression)
    ')'             reduce using rule 54 (list_expression)
    ','             reduce using rule 54 (list_expression)
    RELATIONAL_OP   reduce using rule 54 (list_expression)
    EQUALITY_OP     reduce using rule 54 (list_expression)
    LOGICAL_OP_OR   reduce using rule 54 (list_expression)
    LOGICAL_OP_AND  reduce using rule 54 (list_expression)


State 263

   56 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE multiplication_expression •
   58 multiplication_expression: multiplication_expression • ARITMETIC_OP_MULTIPLICATIVE simple_value

    ARITMETIC_OP_MULTIPLICATIVE  shift, and go to state 228

    BINARY_LIST_OP         reduce using rule 56 (addition_expression)
    ')'                    reduce using rule 56 (addition_expression)
    ','                    reduce using rule 56 (addition_expression)
    ARITMETIC_OP_ADDITIVE  reduce using rule 56 (addition_expression)
    RELATIONAL_OP          reduce using rule 56 (addition_expression)
    EQUALITY_OP            reduce using rule 56 (addition_expression)
    LOGICAL_OP_OR          reduce using rule 56 (addition_expression)
    LOGICAL_OP_AND         reduce using rule 56 (addition_expression)


State 264

   58 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE simple_value •

    BINARY_LIST_OP               reduce using rule 58 (multiplication_expression)
    ')'                          reduce using rule 58 (multiplication_expression)
    ','                          reduce using rule 58 (multiplication_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 58 (multiplication_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 58 (multiplication_expression)
    RELATIONAL_OP                reduce using rule 58 (multiplication_expression)
    EQUALITY_OP                  reduce using rule 58 (multiplication_expression)
    LOGICAL_OP_OR                reduce using rule 58 (multiplication_expression)
    LOGICAL_OP_AND               reduce using rule 58 (multiplication_expression)


State 265

   66 variable_declaration_statement: TYPE IDENTIFIER ';' •

    $end     reduce using rule 66 (variable_declaration_statement)
    TYPE     reduce using rule 66 (variable_declaration_statement)
    RW_ELSE  reduce using rule 66 (variable_declaration_statement)


State 266

   23 for_statement: RW_FOR '(' expression_optative • ';' or_expression_optative ';' expression_optative ')' statement

    ';'  shift, and go to state 280


State 267

   32 return_statement: RW_RETURN expression ';' •

    $end     reduce using rule 32 (return_statement)
    TYPE     reduce using rule 32 (return_statement)
    RW_ELSE  reduce using rule 32 (return_statement)


State 268

   24 if_else_statement: RW_IF '(' expression • ')' statement
   25                  | RW_IF '(' expression • ')' statement RW_ELSE statement

    ')'  shift, and go to state 281


State 269

   29 input_statement: IO_READ '(' IDENTIFIER • ')' ';'

    ')'  shift, and go to state 282


State 270

   31 output_statement: IO_WRITE '(' LIT_STRING • ')' ';'

    ')'  shift, and go to state 283


State 271

   30 output_statement: IO_WRITE '(' expression • ')' ';'

    ')'  shift, and go to state 284


State 272

    7 block: '{' statements '}' •

    $end     reduce using rule 7 (block)
    TYPE     reduce using rule 7 (block)
    RW_ELSE  reduce using rule 7 (block)


State 273

   23 for_statement: RW_FOR '(' expression_optative ';' • or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    IDENTIFIER             shift, and go to state 65
    UNARY_LIST_OP          shift, and go to state 30
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    ';'  reduce using rule 44 (or_expression_optative)

    or_expression_optative     go to state 285
    or_expression              go to state 111
    and_expression             go to state 47
    equality_expression        go to state 48
    relational_expression      go to state 49
    list_expression            go to state 50
    addition_expression        go to state 51
    multiplication_expression  go to state 52
    simple_value               go to state 53
    constant                   go to state 55


State 274

   24 if_else_statement: RW_IF '(' expression ')' • statement
   25                  | RW_IF '(' expression ')' • statement RW_ELSE statement

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    TYPE                   shift, and go to state 286
    IDENTIFIER             shift, and go to state 24
    RW_FOR                 shift, and go to state 287
    RW_RETURN              shift, and go to state 288
    RW_IF                  shift, and go to state 289
    IO_READ                shift, and go to state 290
    IO_WRITE               shift, and go to state 291
    UNARY_LIST_OP          shift, and go to state 30
    '{'                    shift, and go to state 292
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    block                           go to state 293
    statement                       go to state 294
    for_statement                   go to state 295
    if_else_statement               go to state 296
    expression_statement            go to state 297
    io_statement                    go to state 298
    input_statement                 go to state 299
    output_statement                go to state 300
    return_statement                go to state 301
    expression                      go to state 302
    function_call_expression        go to state 45
    or_expression                   go to state 46
    and_expression                  go to state 47
    equality_expression             go to state 48
    relational_expression           go to state 49
    list_expression                 go to state 50
    addition_expression             go to state 51
    multiplication_expression       go to state 52
    simple_value                    go to state 53
    variable_declaration_statement  go to state 303
    constant                        go to state 55


State 275

   29 input_statement: IO_READ '(' IDENTIFIER ')' • ';'

    ';'  shift, and go to state 304


State 276

   31 output_statement: IO_WRITE '(' LIT_STRING ')' • ';'

    ';'  shift, and go to state 305


State 277

   30 output_statement: IO_WRITE '(' expression ')' • ';'

    ';'  shift, and go to state 306


State 278

   36 function_call_expression: IDENTIFIER '(' function_arguments_optional ')' •

    ')'  reduce using rule 36 (function_call_expression)


State 279

   36 function_call_expression: IDENTIFIER '(' function_arguments_optional ')' •

    ')'  reduce using rule 36 (function_call_expression)
    ','  reduce using rule 36 (function_call_expression)


State 280

   23 for_statement: RW_FOR '(' expression_optative ';' • or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    IDENTIFIER             shift, and go to state 65
    UNARY_LIST_OP          shift, and go to state 30
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    ';'  reduce using rule 44 (or_expression_optative)

    or_expression_optative     go to state 307
    or_expression              go to state 111
    and_expression             go to state 47
    equality_expression        go to state 48
    relational_expression      go to state 49
    list_expression            go to state 50
    addition_expression        go to state 51
    multiplication_expression  go to state 52
    simple_value               go to state 53
    constant                   go to state 55


State 281

   24 if_else_statement: RW_IF '(' expression ')' • statement
   25                  | RW_IF '(' expression ')' • statement RW_ELSE statement

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    TYPE                   shift, and go to state 175
    IDENTIFIER             shift, and go to state 24
    RW_FOR                 shift, and go to state 176
    RW_RETURN              shift, and go to state 177
    RW_IF                  shift, and go to state 178
    IO_READ                shift, and go to state 179
    IO_WRITE               shift, and go to state 180
    UNARY_LIST_OP          shift, and go to state 30
    '{'                    shift, and go to state 181
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    block                           go to state 182
    statement                       go to state 308
    for_statement                   go to state 183
    if_else_statement               go to state 184
    expression_statement            go to state 185
    io_statement                    go to state 186
    input_statement                 go to state 187
    output_statement                go to state 188
    return_statement                go to state 189
    expression                      go to state 190
    function_call_expression        go to state 45
    or_expression                   go to state 46
    and_expression                  go to state 47
    equality_expression             go to state 48
    relational_expression           go to state 49
    list_expression                 go to state 50
    addition_expression             go to state 51
    multiplication_expression       go to state 52
    simple_value                    go to state 53
    variable_declaration_statement  go to state 191
    constant                        go to state 55


State 282

   29 input_statement: IO_READ '(' IDENTIFIER ')' • ';'

    ';'  shift, and go to state 309


State 283

   31 output_statement: IO_WRITE '(' LIT_STRING ')' • ';'

    ';'  shift, and go to state 310


State 284

   30 output_statement: IO_WRITE '(' expression ')' • ';'

    ';'  shift, and go to state 311


State 285

   23 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative • ';' expression_optative ')' statement

    ';'  shift, and go to state 312


State 286

   66 variable_declaration_statement: TYPE • IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 313


State 287

   23 for_statement: RW_FOR • '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    '('  shift, and go to state 314


State 288

   32 return_statement: RW_RETURN • expression ';'

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    IDENTIFIER             shift, and go to state 24
    UNARY_LIST_OP          shift, and go to state 30
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    expression                 go to state 315
    function_call_expression   go to state 45
    or_expression              go to state 46
    and_expression             go to state 47
    equality_expression        go to state 48
    relational_expression      go to state 49
    list_expression            go to state 50
    addition_expression        go to state 51
    multiplication_expression  go to state 52
    simple_value               go to state 53
    constant                   go to state 55


State 289

   24 if_else_statement: RW_IF • '(' expression ')' statement
   25                  | RW_IF • '(' expression ')' statement RW_ELSE statement

    '('  shift, and go to state 316


State 290

   29 input_statement: IO_READ • '(' IDENTIFIER ')' ';'

    '('  shift, and go to state 317


State 291

   30 output_statement: IO_WRITE • '(' expression ')' ';'
   31                 | IO_WRITE • '(' LIT_STRING ')' ';'

    '('  shift, and go to state 318


State 292

    7 block: '{' • statements '}'

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    TYPE                   shift, and go to state 122
    IDENTIFIER             shift, and go to state 24
    RW_FOR                 shift, and go to state 123
    RW_RETURN              shift, and go to state 124
    RW_IF                  shift, and go to state 125
    IO_READ                shift, and go to state 126
    IO_WRITE               shift, and go to state 127
    UNARY_LIST_OP          shift, and go to state 30
    '{'                    shift, and go to state 128
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    block                           go to state 129
    statements                      go to state 319
    statement                       go to state 68
    for_statement                   go to state 130
    if_else_statement               go to state 131
    expression_statement            go to state 132
    io_statement                    go to state 133
    input_statement                 go to state 134
    output_statement                go to state 135
    return_statement                go to state 136
    expression                      go to state 137
    function_call_expression        go to state 45
    or_expression                   go to state 46
    and_expression                  go to state 47
    equality_expression             go to state 48
    relational_expression           go to state 49
    list_expression                 go to state 50
    addition_expression             go to state 51
    multiplication_expression       go to state 52
    simple_value                    go to state 53
    variable_declaration_statement  go to state 138
    constant                        go to state 55


State 293

   16 statement: block •

    C_INTEGER              reduce using rule 16 (statement)
    C_FLOAT                reduce using rule 16 (statement)
    C_NIL                  reduce using rule 16 (statement)
    TYPE                   reduce using rule 16 (statement)
    IDENTIFIER             reduce using rule 16 (statement)
    RW_FOR                 reduce using rule 16 (statement)
    RW_RETURN              reduce using rule 16 (statement)
    RW_IF                  reduce using rule 16 (statement)
    RW_ELSE                reduce using rule 16 (statement)
    IO_READ                reduce using rule 16 (statement)
    IO_WRITE               reduce using rule 16 (statement)
    UNARY_LIST_OP          reduce using rule 16 (statement)
    '{'                    reduce using rule 16 (statement)
    '}'                    reduce using rule 16 (statement)
    '('                    reduce using rule 16 (statement)
    '!'                    reduce using rule 16 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 16 (statement)


State 294

   24 if_else_statement: RW_IF '(' expression ')' statement •
   25                  | RW_IF '(' expression ')' statement • RW_ELSE statement

    RW_ELSE  shift, and go to state 320

    C_INTEGER              reduce using rule 24 (if_else_statement)
    C_FLOAT                reduce using rule 24 (if_else_statement)
    C_NIL                  reduce using rule 24 (if_else_statement)
    TYPE                   reduce using rule 24 (if_else_statement)
    IDENTIFIER             reduce using rule 24 (if_else_statement)
    RW_FOR                 reduce using rule 24 (if_else_statement)
    RW_RETURN              reduce using rule 24 (if_else_statement)
    RW_IF                  reduce using rule 24 (if_else_statement)
    IO_READ                reduce using rule 24 (if_else_statement)
    IO_WRITE               reduce using rule 24 (if_else_statement)
    UNARY_LIST_OP          reduce using rule 24 (if_else_statement)
    '{'                    reduce using rule 24 (if_else_statement)
    '}'                    reduce using rule 24 (if_else_statement)
    '('                    reduce using rule 24 (if_else_statement)
    '!'                    reduce using rule 24 (if_else_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 24 (if_else_statement)


State 295

   14 statement: for_statement •

    C_INTEGER              reduce using rule 14 (statement)
    C_FLOAT                reduce using rule 14 (statement)
    C_NIL                  reduce using rule 14 (statement)
    TYPE                   reduce using rule 14 (statement)
    IDENTIFIER             reduce using rule 14 (statement)
    RW_FOR                 reduce using rule 14 (statement)
    RW_RETURN              reduce using rule 14 (statement)
    RW_IF                  reduce using rule 14 (statement)
    RW_ELSE                reduce using rule 14 (statement)
    IO_READ                reduce using rule 14 (statement)
    IO_WRITE               reduce using rule 14 (statement)
    UNARY_LIST_OP          reduce using rule 14 (statement)
    '{'                    reduce using rule 14 (statement)
    '}'                    reduce using rule 14 (statement)
    '('                    reduce using rule 14 (statement)
    '!'                    reduce using rule 14 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 14 (statement)


State 296

   15 statement: if_else_statement •

    C_INTEGER              reduce using rule 15 (statement)
    C_FLOAT                reduce using rule 15 (statement)
    C_NIL                  reduce using rule 15 (statement)
    TYPE                   reduce using rule 15 (statement)
    IDENTIFIER             reduce using rule 15 (statement)
    RW_FOR                 reduce using rule 15 (statement)
    RW_RETURN              reduce using rule 15 (statement)
    RW_IF                  reduce using rule 15 (statement)
    RW_ELSE                reduce using rule 15 (statement)
    IO_READ                reduce using rule 15 (statement)
    IO_WRITE               reduce using rule 15 (statement)
    UNARY_LIST_OP          reduce using rule 15 (statement)
    '{'                    reduce using rule 15 (statement)
    '}'                    reduce using rule 15 (statement)
    '('                    reduce using rule 15 (statement)
    '!'                    reduce using rule 15 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 15 (statement)


State 297

   10 statement: expression_statement •

    C_INTEGER              reduce using rule 10 (statement)
    C_FLOAT                reduce using rule 10 (statement)
    C_NIL                  reduce using rule 10 (statement)
    TYPE                   reduce using rule 10 (statement)
    IDENTIFIER             reduce using rule 10 (statement)
    RW_FOR                 reduce using rule 10 (statement)
    RW_RETURN              reduce using rule 10 (statement)
    RW_IF                  reduce using rule 10 (statement)
    RW_ELSE                reduce using rule 10 (statement)
    IO_READ                reduce using rule 10 (statement)
    IO_WRITE               reduce using rule 10 (statement)
    UNARY_LIST_OP          reduce using rule 10 (statement)
    '{'                    reduce using rule 10 (statement)
    '}'                    reduce using rule 10 (statement)
    '('                    reduce using rule 10 (statement)
    '!'                    reduce using rule 10 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 10 (statement)


State 298

   11 statement: io_statement •

    C_INTEGER              reduce using rule 11 (statement)
    C_FLOAT                reduce using rule 11 (statement)
    C_NIL                  reduce using rule 11 (statement)
    TYPE                   reduce using rule 11 (statement)
    IDENTIFIER             reduce using rule 11 (statement)
    RW_FOR                 reduce using rule 11 (statement)
    RW_RETURN              reduce using rule 11 (statement)
    RW_IF                  reduce using rule 11 (statement)
    RW_ELSE                reduce using rule 11 (statement)
    IO_READ                reduce using rule 11 (statement)
    IO_WRITE               reduce using rule 11 (statement)
    UNARY_LIST_OP          reduce using rule 11 (statement)
    '{'                    reduce using rule 11 (statement)
    '}'                    reduce using rule 11 (statement)
    '('                    reduce using rule 11 (statement)
    '!'                    reduce using rule 11 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 11 (statement)


State 299

   27 io_statement: input_statement •

    C_INTEGER              reduce using rule 27 (io_statement)
    C_FLOAT                reduce using rule 27 (io_statement)
    C_NIL                  reduce using rule 27 (io_statement)
    TYPE                   reduce using rule 27 (io_statement)
    IDENTIFIER             reduce using rule 27 (io_statement)
    RW_FOR                 reduce using rule 27 (io_statement)
    RW_RETURN              reduce using rule 27 (io_statement)
    RW_IF                  reduce using rule 27 (io_statement)
    RW_ELSE                reduce using rule 27 (io_statement)
    IO_READ                reduce using rule 27 (io_statement)
    IO_WRITE               reduce using rule 27 (io_statement)
    UNARY_LIST_OP          reduce using rule 27 (io_statement)
    '{'                    reduce using rule 27 (io_statement)
    '}'                    reduce using rule 27 (io_statement)
    '('                    reduce using rule 27 (io_statement)
    '!'                    reduce using rule 27 (io_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 27 (io_statement)


State 300

   28 io_statement: output_statement •

    C_INTEGER              reduce using rule 28 (io_statement)
    C_FLOAT                reduce using rule 28 (io_statement)
    C_NIL                  reduce using rule 28 (io_statement)
    TYPE                   reduce using rule 28 (io_statement)
    IDENTIFIER             reduce using rule 28 (io_statement)
    RW_FOR                 reduce using rule 28 (io_statement)
    RW_RETURN              reduce using rule 28 (io_statement)
    RW_IF                  reduce using rule 28 (io_statement)
    RW_ELSE                reduce using rule 28 (io_statement)
    IO_READ                reduce using rule 28 (io_statement)
    IO_WRITE               reduce using rule 28 (io_statement)
    UNARY_LIST_OP          reduce using rule 28 (io_statement)
    '{'                    reduce using rule 28 (io_statement)
    '}'                    reduce using rule 28 (io_statement)
    '('                    reduce using rule 28 (io_statement)
    '!'                    reduce using rule 28 (io_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 28 (io_statement)


State 301

   12 statement: return_statement •

    C_INTEGER              reduce using rule 12 (statement)
    C_FLOAT                reduce using rule 12 (statement)
    C_NIL                  reduce using rule 12 (statement)
    TYPE                   reduce using rule 12 (statement)
    IDENTIFIER             reduce using rule 12 (statement)
    RW_FOR                 reduce using rule 12 (statement)
    RW_RETURN              reduce using rule 12 (statement)
    RW_IF                  reduce using rule 12 (statement)
    RW_ELSE                reduce using rule 12 (statement)
    IO_READ                reduce using rule 12 (statement)
    IO_WRITE               reduce using rule 12 (statement)
    UNARY_LIST_OP          reduce using rule 12 (statement)
    '{'                    reduce using rule 12 (statement)
    '}'                    reduce using rule 12 (statement)
    '('                    reduce using rule 12 (statement)
    '!'                    reduce using rule 12 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 12 (statement)


State 302

   26 expression_statement: expression • ';'

    ';'  shift, and go to state 321


State 303

   13 statement: variable_declaration_statement •

    C_INTEGER              reduce using rule 13 (statement)
    C_FLOAT                reduce using rule 13 (statement)
    C_NIL                  reduce using rule 13 (statement)
    TYPE                   reduce using rule 13 (statement)
    IDENTIFIER             reduce using rule 13 (statement)
    RW_FOR                 reduce using rule 13 (statement)
    RW_RETURN              reduce using rule 13 (statement)
    RW_IF                  reduce using rule 13 (statement)
    RW_ELSE                reduce using rule 13 (statement)
    IO_READ                reduce using rule 13 (statement)
    IO_WRITE               reduce using rule 13 (statement)
    UNARY_LIST_OP          reduce using rule 13 (statement)
    '{'                    reduce using rule 13 (statement)
    '}'                    reduce using rule 13 (statement)
    '('                    reduce using rule 13 (statement)
    '!'                    reduce using rule 13 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 13 (statement)


State 304

   29 input_statement: IO_READ '(' IDENTIFIER ')' ';' •

    C_INTEGER              reduce using rule 29 (input_statement)
    C_FLOAT                reduce using rule 29 (input_statement)
    C_NIL                  reduce using rule 29 (input_statement)
    TYPE                   reduce using rule 29 (input_statement)
    IDENTIFIER             reduce using rule 29 (input_statement)
    RW_FOR                 reduce using rule 29 (input_statement)
    RW_RETURN              reduce using rule 29 (input_statement)
    RW_IF                  reduce using rule 29 (input_statement)
    IO_READ                reduce using rule 29 (input_statement)
    IO_WRITE               reduce using rule 29 (input_statement)
    UNARY_LIST_OP          reduce using rule 29 (input_statement)
    '{'                    reduce using rule 29 (input_statement)
    '}'                    reduce using rule 29 (input_statement)
    '('                    reduce using rule 29 (input_statement)
    '!'                    reduce using rule 29 (input_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 29 (input_statement)


State 305

   31 output_statement: IO_WRITE '(' LIT_STRING ')' ';' •

    C_INTEGER              reduce using rule 31 (output_statement)
    C_FLOAT                reduce using rule 31 (output_statement)
    C_NIL                  reduce using rule 31 (output_statement)
    TYPE                   reduce using rule 31 (output_statement)
    IDENTIFIER             reduce using rule 31 (output_statement)
    RW_FOR                 reduce using rule 31 (output_statement)
    RW_RETURN              reduce using rule 31 (output_statement)
    RW_IF                  reduce using rule 31 (output_statement)
    IO_READ                reduce using rule 31 (output_statement)
    IO_WRITE               reduce using rule 31 (output_statement)
    UNARY_LIST_OP          reduce using rule 31 (output_statement)
    '{'                    reduce using rule 31 (output_statement)
    '}'                    reduce using rule 31 (output_statement)
    '('                    reduce using rule 31 (output_statement)
    '!'                    reduce using rule 31 (output_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 31 (output_statement)


State 306

   30 output_statement: IO_WRITE '(' expression ')' ';' •

    C_INTEGER              reduce using rule 30 (output_statement)
    C_FLOAT                reduce using rule 30 (output_statement)
    C_NIL                  reduce using rule 30 (output_statement)
    TYPE                   reduce using rule 30 (output_statement)
    IDENTIFIER             reduce using rule 30 (output_statement)
    RW_FOR                 reduce using rule 30 (output_statement)
    RW_RETURN              reduce using rule 30 (output_statement)
    RW_IF                  reduce using rule 30 (output_statement)
    IO_READ                reduce using rule 30 (output_statement)
    IO_WRITE               reduce using rule 30 (output_statement)
    UNARY_LIST_OP          reduce using rule 30 (output_statement)
    '{'                    reduce using rule 30 (output_statement)
    '}'                    reduce using rule 30 (output_statement)
    '('                    reduce using rule 30 (output_statement)
    '!'                    reduce using rule 30 (output_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 30 (output_statement)


State 307

   23 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative • ';' expression_optative ')' statement

    ';'  shift, and go to state 322


State 308

   24 if_else_statement: RW_IF '(' expression ')' statement •
   25                  | RW_IF '(' expression ')' statement • RW_ELSE statement

    RW_ELSE  shift, and go to state 323

    $end  reduce using rule 24 (if_else_statement)
    TYPE  reduce using rule 24 (if_else_statement)


State 309

   29 input_statement: IO_READ '(' IDENTIFIER ')' ';' •

    $end     reduce using rule 29 (input_statement)
    TYPE     reduce using rule 29 (input_statement)
    RW_ELSE  reduce using rule 29 (input_statement)


State 310

   31 output_statement: IO_WRITE '(' LIT_STRING ')' ';' •

    $end     reduce using rule 31 (output_statement)
    TYPE     reduce using rule 31 (output_statement)
    RW_ELSE  reduce using rule 31 (output_statement)


State 311

   30 output_statement: IO_WRITE '(' expression ')' ';' •

    $end     reduce using rule 30 (output_statement)
    TYPE     reduce using rule 30 (output_statement)
    RW_ELSE  reduce using rule 30 (output_statement)


State 312

   23 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' • expression_optative ')' statement

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    IDENTIFIER             shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    ')'  reduce using rule 42 (expression_optative)

    expression                 go to state 192
    function_call_expression   go to state 147
    expression_optative        go to state 324
    or_expression              go to state 148
    and_expression             go to state 149
    equality_expression        go to state 150
    relational_expression      go to state 151
    list_expression            go to state 152
    addition_expression        go to state 153
    multiplication_expression  go to state 154
    simple_value               go to state 155
    constant                   go to state 156


State 313

   66 variable_declaration_statement: TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 325


State 314

   23 for_statement: RW_FOR '(' • expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    IDENTIFIER             shift, and go to state 24
    UNARY_LIST_OP          shift, and go to state 30
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    ';'  reduce using rule 42 (expression_optative)

    expression                 go to state 85
    function_call_expression   go to state 45
    expression_optative        go to state 326
    or_expression              go to state 46
    and_expression             go to state 47
    equality_expression        go to state 48
    relational_expression      go to state 49
    list_expression            go to state 50
    addition_expression        go to state 51
    multiplication_expression  go to state 52
    simple_value               go to state 53
    constant                   go to state 55


State 315

   32 return_statement: RW_RETURN expression • ';'

    ';'  shift, and go to state 327


State 316

   24 if_else_statement: RW_IF '(' • expression ')' statement
   25                  | RW_IF '(' • expression ')' statement RW_ELSE statement

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    IDENTIFIER             shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    expression                 go to state 328
    function_call_expression   go to state 147
    or_expression              go to state 148
    and_expression             go to state 149
    equality_expression        go to state 150
    relational_expression      go to state 151
    list_expression            go to state 152
    addition_expression        go to state 153
    multiplication_expression  go to state 154
    simple_value               go to state 155
    constant                   go to state 156


State 317

   29 input_statement: IO_READ '(' • IDENTIFIER ')' ';'

    IDENTIFIER  shift, and go to state 329


State 318

   30 output_statement: IO_WRITE '(' • expression ')' ';'
   31                 | IO_WRITE '(' • LIT_STRING ')' ';'

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    LIT_STRING             shift, and go to state 330
    IDENTIFIER             shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    expression                 go to state 331
    function_call_expression   go to state 147
    or_expression              go to state 148
    and_expression             go to state 149
    equality_expression        go to state 150
    relational_expression      go to state 151
    list_expression            go to state 152
    addition_expression        go to state 153
    multiplication_expression  go to state 154
    simple_value               go to state 155
    constant                   go to state 156


State 319

    7 block: '{' statements • '}'
    8 statements: statements • statement

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    TYPE                   shift, and go to state 122
    IDENTIFIER             shift, and go to state 24
    RW_FOR                 shift, and go to state 123
    RW_RETURN              shift, and go to state 124
    RW_IF                  shift, and go to state 125
    IO_READ                shift, and go to state 126
    IO_WRITE               shift, and go to state 127
    UNARY_LIST_OP          shift, and go to state 30
    '{'                    shift, and go to state 128
    '}'                    shift, and go to state 332
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    block                           go to state 129
    statement                       go to state 93
    for_statement                   go to state 130
    if_else_statement               go to state 131
    expression_statement            go to state 132
    io_statement                    go to state 133
    input_statement                 go to state 134
    output_statement                go to state 135
    return_statement                go to state 136
    expression                      go to state 137
    function_call_expression        go to state 45
    or_expression                   go to state 46
    and_expression                  go to state 47
    equality_expression             go to state 48
    relational_expression           go to state 49
    list_expression                 go to state 50
    addition_expression             go to state 51
    multiplication_expression       go to state 52
    simple_value                    go to state 53
    variable_declaration_statement  go to state 138
    constant                        go to state 55


State 320

   25 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE • statement

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    TYPE                   shift, and go to state 122
    IDENTIFIER             shift, and go to state 24
    RW_FOR                 shift, and go to state 123
    RW_RETURN              shift, and go to state 124
    RW_IF                  shift, and go to state 125
    IO_READ                shift, and go to state 126
    IO_WRITE               shift, and go to state 127
    UNARY_LIST_OP          shift, and go to state 30
    '{'                    shift, and go to state 128
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    block                           go to state 129
    statement                       go to state 333
    for_statement                   go to state 130
    if_else_statement               go to state 131
    expression_statement            go to state 132
    io_statement                    go to state 133
    input_statement                 go to state 134
    output_statement                go to state 135
    return_statement                go to state 136
    expression                      go to state 137
    function_call_expression        go to state 45
    or_expression                   go to state 46
    and_expression                  go to state 47
    equality_expression             go to state 48
    relational_expression           go to state 49
    list_expression                 go to state 50
    addition_expression             go to state 51
    multiplication_expression       go to state 52
    simple_value                    go to state 53
    variable_declaration_statement  go to state 138
    constant                        go to state 55


State 321

   26 expression_statement: expression ';' •

    C_INTEGER              reduce using rule 26 (expression_statement)
    C_FLOAT                reduce using rule 26 (expression_statement)
    C_NIL                  reduce using rule 26 (expression_statement)
    TYPE                   reduce using rule 26 (expression_statement)
    IDENTIFIER             reduce using rule 26 (expression_statement)
    RW_FOR                 reduce using rule 26 (expression_statement)
    RW_RETURN              reduce using rule 26 (expression_statement)
    RW_IF                  reduce using rule 26 (expression_statement)
    RW_ELSE                reduce using rule 26 (expression_statement)
    IO_READ                reduce using rule 26 (expression_statement)
    IO_WRITE               reduce using rule 26 (expression_statement)
    UNARY_LIST_OP          reduce using rule 26 (expression_statement)
    '{'                    reduce using rule 26 (expression_statement)
    '}'                    reduce using rule 26 (expression_statement)
    '('                    reduce using rule 26 (expression_statement)
    '!'                    reduce using rule 26 (expression_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 26 (expression_statement)


State 322

   23 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' • expression_optative ')' statement

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    IDENTIFIER             shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    ')'  reduce using rule 42 (expression_optative)

    expression                 go to state 192
    function_call_expression   go to state 147
    expression_optative        go to state 334
    or_expression              go to state 148
    and_expression             go to state 149
    equality_expression        go to state 150
    relational_expression      go to state 151
    list_expression            go to state 152
    addition_expression        go to state 153
    multiplication_expression  go to state 154
    simple_value               go to state 155
    constant                   go to state 156


State 323

   25 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE • statement

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    TYPE                   shift, and go to state 175
    IDENTIFIER             shift, and go to state 24
    RW_FOR                 shift, and go to state 176
    RW_RETURN              shift, and go to state 177
    RW_IF                  shift, and go to state 178
    IO_READ                shift, and go to state 179
    IO_WRITE               shift, and go to state 180
    UNARY_LIST_OP          shift, and go to state 30
    '{'                    shift, and go to state 181
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    block                           go to state 182
    statement                       go to state 335
    for_statement                   go to state 183
    if_else_statement               go to state 184
    expression_statement            go to state 185
    io_statement                    go to state 186
    input_statement                 go to state 187
    output_statement                go to state 188
    return_statement                go to state 189
    expression                      go to state 190
    function_call_expression        go to state 45
    or_expression                   go to state 46
    and_expression                  go to state 47
    equality_expression             go to state 48
    relational_expression           go to state 49
    list_expression                 go to state 50
    addition_expression             go to state 51
    multiplication_expression       go to state 52
    simple_value                    go to state 53
    variable_declaration_statement  go to state 191
    constant                        go to state 55


State 324

   23 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative • ')' statement

    ')'  shift, and go to state 336


State 325

   66 variable_declaration_statement: TYPE IDENTIFIER ';' •

    C_INTEGER              reduce using rule 66 (variable_declaration_statement)
    C_FLOAT                reduce using rule 66 (variable_declaration_statement)
    C_NIL                  reduce using rule 66 (variable_declaration_statement)
    TYPE                   reduce using rule 66 (variable_declaration_statement)
    IDENTIFIER             reduce using rule 66 (variable_declaration_statement)
    RW_FOR                 reduce using rule 66 (variable_declaration_statement)
    RW_RETURN              reduce using rule 66 (variable_declaration_statement)
    RW_IF                  reduce using rule 66 (variable_declaration_statement)
    RW_ELSE                reduce using rule 66 (variable_declaration_statement)
    IO_READ                reduce using rule 66 (variable_declaration_statement)
    IO_WRITE               reduce using rule 66 (variable_declaration_statement)
    UNARY_LIST_OP          reduce using rule 66 (variable_declaration_statement)
    '{'                    reduce using rule 66 (variable_declaration_statement)
    '}'                    reduce using rule 66 (variable_declaration_statement)
    '('                    reduce using rule 66 (variable_declaration_statement)
    '!'                    reduce using rule 66 (variable_declaration_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 66 (variable_declaration_statement)


State 326

   23 for_statement: RW_FOR '(' expression_optative • ';' or_expression_optative ';' expression_optative ')' statement

    ';'  shift, and go to state 337


State 327

   32 return_statement: RW_RETURN expression ';' •

    C_INTEGER              reduce using rule 32 (return_statement)
    C_FLOAT                reduce using rule 32 (return_statement)
    C_NIL                  reduce using rule 32 (return_statement)
    TYPE                   reduce using rule 32 (return_statement)
    IDENTIFIER             reduce using rule 32 (return_statement)
    RW_FOR                 reduce using rule 32 (return_statement)
    RW_RETURN              reduce using rule 32 (return_statement)
    RW_IF                  reduce using rule 32 (return_statement)
    RW_ELSE                reduce using rule 32 (return_statement)
    IO_READ                reduce using rule 32 (return_statement)
    IO_WRITE               reduce using rule 32 (return_statement)
    UNARY_LIST_OP          reduce using rule 32 (return_statement)
    '{'                    reduce using rule 32 (return_statement)
    '}'                    reduce using rule 32 (return_statement)
    '('                    reduce using rule 32 (return_statement)
    '!'                    reduce using rule 32 (return_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 32 (return_statement)


State 328

   24 if_else_statement: RW_IF '(' expression • ')' statement
   25                  | RW_IF '(' expression • ')' statement RW_ELSE statement

    ')'  shift, and go to state 338


State 329

   29 input_statement: IO_READ '(' IDENTIFIER • ')' ';'

    ')'  shift, and go to state 339


State 330

   31 output_statement: IO_WRITE '(' LIT_STRING • ')' ';'

    ')'  shift, and go to state 340


State 331

   30 output_statement: IO_WRITE '(' expression • ')' ';'

    ')'  shift, and go to state 341


State 332

    7 block: '{' statements '}' •

    C_INTEGER              reduce using rule 7 (block)
    C_FLOAT                reduce using rule 7 (block)
    C_NIL                  reduce using rule 7 (block)
    TYPE                   reduce using rule 7 (block)
    IDENTIFIER             reduce using rule 7 (block)
    RW_FOR                 reduce using rule 7 (block)
    RW_RETURN              reduce using rule 7 (block)
    RW_IF                  reduce using rule 7 (block)
    RW_ELSE                reduce using rule 7 (block)
    IO_READ                reduce using rule 7 (block)
    IO_WRITE               reduce using rule 7 (block)
    UNARY_LIST_OP          reduce using rule 7 (block)
    '{'                    reduce using rule 7 (block)
    '}'                    reduce using rule 7 (block)
    '('                    reduce using rule 7 (block)
    '!'                    reduce using rule 7 (block)
    ARITMETIC_OP_ADDITIVE  reduce using rule 7 (block)


State 333

   25 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE statement •

    C_INTEGER              reduce using rule 25 (if_else_statement)
    C_FLOAT                reduce using rule 25 (if_else_statement)
    C_NIL                  reduce using rule 25 (if_else_statement)
    TYPE                   reduce using rule 25 (if_else_statement)
    IDENTIFIER             reduce using rule 25 (if_else_statement)
    RW_FOR                 reduce using rule 25 (if_else_statement)
    RW_RETURN              reduce using rule 25 (if_else_statement)
    RW_IF                  reduce using rule 25 (if_else_statement)
    IO_READ                reduce using rule 25 (if_else_statement)
    IO_WRITE               reduce using rule 25 (if_else_statement)
    UNARY_LIST_OP          reduce using rule 25 (if_else_statement)
    '{'                    reduce using rule 25 (if_else_statement)
    '}'                    reduce using rule 25 (if_else_statement)
    '('                    reduce using rule 25 (if_else_statement)
    '!'                    reduce using rule 25 (if_else_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 25 (if_else_statement)


State 334

   23 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative • ')' statement

    ')'  shift, and go to state 342


State 335

   25 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE statement •

    $end     reduce using rule 25 (if_else_statement)
    TYPE     reduce using rule 25 (if_else_statement)
    RW_ELSE  reduce using rule 25 (if_else_statement)


State 336

   23 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' • statement

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    TYPE                   shift, and go to state 122
    IDENTIFIER             shift, and go to state 24
    RW_FOR                 shift, and go to state 123
    RW_RETURN              shift, and go to state 124
    RW_IF                  shift, and go to state 125
    IO_READ                shift, and go to state 126
    IO_WRITE               shift, and go to state 127
    UNARY_LIST_OP          shift, and go to state 30
    '{'                    shift, and go to state 128
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    block                           go to state 129
    statement                       go to state 343
    for_statement                   go to state 130
    if_else_statement               go to state 131
    expression_statement            go to state 132
    io_statement                    go to state 133
    input_statement                 go to state 134
    output_statement                go to state 135
    return_statement                go to state 136
    expression                      go to state 137
    function_call_expression        go to state 45
    or_expression                   go to state 46
    and_expression                  go to state 47
    equality_expression             go to state 48
    relational_expression           go to state 49
    list_expression                 go to state 50
    addition_expression             go to state 51
    multiplication_expression       go to state 52
    simple_value                    go to state 53
    variable_declaration_statement  go to state 138
    constant                        go to state 55


State 337

   23 for_statement: RW_FOR '(' expression_optative ';' • or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    IDENTIFIER             shift, and go to state 65
    UNARY_LIST_OP          shift, and go to state 30
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    ';'  reduce using rule 44 (or_expression_optative)

    or_expression_optative     go to state 344
    or_expression              go to state 111
    and_expression             go to state 47
    equality_expression        go to state 48
    relational_expression      go to state 49
    list_expression            go to state 50
    addition_expression        go to state 51
    multiplication_expression  go to state 52
    simple_value               go to state 53
    constant                   go to state 55


State 338

   24 if_else_statement: RW_IF '(' expression ')' • statement
   25                  | RW_IF '(' expression ')' • statement RW_ELSE statement

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    TYPE                   shift, and go to state 286
    IDENTIFIER             shift, and go to state 24
    RW_FOR                 shift, and go to state 287
    RW_RETURN              shift, and go to state 288
    RW_IF                  shift, and go to state 289
    IO_READ                shift, and go to state 290
    IO_WRITE               shift, and go to state 291
    UNARY_LIST_OP          shift, and go to state 30
    '{'                    shift, and go to state 292
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    block                           go to state 293
    statement                       go to state 345
    for_statement                   go to state 295
    if_else_statement               go to state 296
    expression_statement            go to state 297
    io_statement                    go to state 298
    input_statement                 go to state 299
    output_statement                go to state 300
    return_statement                go to state 301
    expression                      go to state 302
    function_call_expression        go to state 45
    or_expression                   go to state 46
    and_expression                  go to state 47
    equality_expression             go to state 48
    relational_expression           go to state 49
    list_expression                 go to state 50
    addition_expression             go to state 51
    multiplication_expression       go to state 52
    simple_value                    go to state 53
    variable_declaration_statement  go to state 303
    constant                        go to state 55


State 339

   29 input_statement: IO_READ '(' IDENTIFIER ')' • ';'

    ';'  shift, and go to state 346


State 340

   31 output_statement: IO_WRITE '(' LIT_STRING ')' • ';'

    ';'  shift, and go to state 347


State 341

   30 output_statement: IO_WRITE '(' expression ')' • ';'

    ';'  shift, and go to state 348


State 342

   23 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' • statement

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    TYPE                   shift, and go to state 175
    IDENTIFIER             shift, and go to state 24
    RW_FOR                 shift, and go to state 176
    RW_RETURN              shift, and go to state 177
    RW_IF                  shift, and go to state 178
    IO_READ                shift, and go to state 179
    IO_WRITE               shift, and go to state 180
    UNARY_LIST_OP          shift, and go to state 30
    '{'                    shift, and go to state 181
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    block                           go to state 182
    statement                       go to state 349
    for_statement                   go to state 183
    if_else_statement               go to state 184
    expression_statement            go to state 185
    io_statement                    go to state 186
    input_statement                 go to state 187
    output_statement                go to state 188
    return_statement                go to state 189
    expression                      go to state 190
    function_call_expression        go to state 45
    or_expression                   go to state 46
    and_expression                  go to state 47
    equality_expression             go to state 48
    relational_expression           go to state 49
    list_expression                 go to state 50
    addition_expression             go to state 51
    multiplication_expression       go to state 52
    simple_value                    go to state 53
    variable_declaration_statement  go to state 191
    constant                        go to state 55


State 343

   23 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement •

    C_INTEGER              reduce using rule 23 (for_statement)
    C_FLOAT                reduce using rule 23 (for_statement)
    C_NIL                  reduce using rule 23 (for_statement)
    TYPE                   reduce using rule 23 (for_statement)
    IDENTIFIER             reduce using rule 23 (for_statement)
    RW_FOR                 reduce using rule 23 (for_statement)
    RW_RETURN              reduce using rule 23 (for_statement)
    RW_IF                  reduce using rule 23 (for_statement)
    IO_READ                reduce using rule 23 (for_statement)
    IO_WRITE               reduce using rule 23 (for_statement)
    UNARY_LIST_OP          reduce using rule 23 (for_statement)
    '{'                    reduce using rule 23 (for_statement)
    '}'                    reduce using rule 23 (for_statement)
    '('                    reduce using rule 23 (for_statement)
    '!'                    reduce using rule 23 (for_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 23 (for_statement)


State 344

   23 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative • ';' expression_optative ')' statement

    ';'  shift, and go to state 350


State 345

   24 if_else_statement: RW_IF '(' expression ')' statement •
   25                  | RW_IF '(' expression ')' statement • RW_ELSE statement

    RW_ELSE  shift, and go to state 351

    C_INTEGER              reduce using rule 24 (if_else_statement)
    C_FLOAT                reduce using rule 24 (if_else_statement)
    C_NIL                  reduce using rule 24 (if_else_statement)
    TYPE                   reduce using rule 24 (if_else_statement)
    IDENTIFIER             reduce using rule 24 (if_else_statement)
    RW_FOR                 reduce using rule 24 (if_else_statement)
    RW_RETURN              reduce using rule 24 (if_else_statement)
    RW_IF                  reduce using rule 24 (if_else_statement)
    IO_READ                reduce using rule 24 (if_else_statement)
    IO_WRITE               reduce using rule 24 (if_else_statement)
    UNARY_LIST_OP          reduce using rule 24 (if_else_statement)
    '{'                    reduce using rule 24 (if_else_statement)
    '}'                    reduce using rule 24 (if_else_statement)
    '('                    reduce using rule 24 (if_else_statement)
    '!'                    reduce using rule 24 (if_else_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 24 (if_else_statement)


State 346

   29 input_statement: IO_READ '(' IDENTIFIER ')' ';' •

    C_INTEGER              reduce using rule 29 (input_statement)
    C_FLOAT                reduce using rule 29 (input_statement)
    C_NIL                  reduce using rule 29 (input_statement)
    TYPE                   reduce using rule 29 (input_statement)
    IDENTIFIER             reduce using rule 29 (input_statement)
    RW_FOR                 reduce using rule 29 (input_statement)
    RW_RETURN              reduce using rule 29 (input_statement)
    RW_IF                  reduce using rule 29 (input_statement)
    RW_ELSE                reduce using rule 29 (input_statement)
    IO_READ                reduce using rule 29 (input_statement)
    IO_WRITE               reduce using rule 29 (input_statement)
    UNARY_LIST_OP          reduce using rule 29 (input_statement)
    '{'                    reduce using rule 29 (input_statement)
    '}'                    reduce using rule 29 (input_statement)
    '('                    reduce using rule 29 (input_statement)
    '!'                    reduce using rule 29 (input_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 29 (input_statement)


State 347

   31 output_statement: IO_WRITE '(' LIT_STRING ')' ';' •

    C_INTEGER              reduce using rule 31 (output_statement)
    C_FLOAT                reduce using rule 31 (output_statement)
    C_NIL                  reduce using rule 31 (output_statement)
    TYPE                   reduce using rule 31 (output_statement)
    IDENTIFIER             reduce using rule 31 (output_statement)
    RW_FOR                 reduce using rule 31 (output_statement)
    RW_RETURN              reduce using rule 31 (output_statement)
    RW_IF                  reduce using rule 31 (output_statement)
    RW_ELSE                reduce using rule 31 (output_statement)
    IO_READ                reduce using rule 31 (output_statement)
    IO_WRITE               reduce using rule 31 (output_statement)
    UNARY_LIST_OP          reduce using rule 31 (output_statement)
    '{'                    reduce using rule 31 (output_statement)
    '}'                    reduce using rule 31 (output_statement)
    '('                    reduce using rule 31 (output_statement)
    '!'                    reduce using rule 31 (output_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 31 (output_statement)


State 348

   30 output_statement: IO_WRITE '(' expression ')' ';' •

    C_INTEGER              reduce using rule 30 (output_statement)
    C_FLOAT                reduce using rule 30 (output_statement)
    C_NIL                  reduce using rule 30 (output_statement)
    TYPE                   reduce using rule 30 (output_statement)
    IDENTIFIER             reduce using rule 30 (output_statement)
    RW_FOR                 reduce using rule 30 (output_statement)
    RW_RETURN              reduce using rule 30 (output_statement)
    RW_IF                  reduce using rule 30 (output_statement)
    RW_ELSE                reduce using rule 30 (output_statement)
    IO_READ                reduce using rule 30 (output_statement)
    IO_WRITE               reduce using rule 30 (output_statement)
    UNARY_LIST_OP          reduce using rule 30 (output_statement)
    '{'                    reduce using rule 30 (output_statement)
    '}'                    reduce using rule 30 (output_statement)
    '('                    reduce using rule 30 (output_statement)
    '!'                    reduce using rule 30 (output_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 30 (output_statement)


State 349

   23 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement •

    $end     reduce using rule 23 (for_statement)
    TYPE     reduce using rule 23 (for_statement)
    RW_ELSE  reduce using rule 23 (for_statement)


State 350

   23 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' • expression_optative ')' statement

    C_INTEGER              shift, and go to state 139
    C_FLOAT                shift, and go to state 140
    C_NIL                  shift, and go to state 141
    IDENTIFIER             shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 143
    '('                    shift, and go to state 144
    '!'                    shift, and go to state 145
    ARITMETIC_OP_ADDITIVE  shift, and go to state 146

    ')'  reduce using rule 42 (expression_optative)

    expression                 go to state 192
    function_call_expression   go to state 147
    expression_optative        go to state 352
    or_expression              go to state 148
    and_expression             go to state 149
    equality_expression        go to state 150
    relational_expression      go to state 151
    list_expression            go to state 152
    addition_expression        go to state 153
    multiplication_expression  go to state 154
    simple_value               go to state 155
    constant                   go to state 156


State 351

   25 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE • statement

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    TYPE                   shift, and go to state 286
    IDENTIFIER             shift, and go to state 24
    RW_FOR                 shift, and go to state 287
    RW_RETURN              shift, and go to state 288
    RW_IF                  shift, and go to state 289
    IO_READ                shift, and go to state 290
    IO_WRITE               shift, and go to state 291
    UNARY_LIST_OP          shift, and go to state 30
    '{'                    shift, and go to state 292
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    block                           go to state 293
    statement                       go to state 353
    for_statement                   go to state 295
    if_else_statement               go to state 296
    expression_statement            go to state 297
    io_statement                    go to state 298
    input_statement                 go to state 299
    output_statement                go to state 300
    return_statement                go to state 301
    expression                      go to state 302
    function_call_expression        go to state 45
    or_expression                   go to state 46
    and_expression                  go to state 47
    equality_expression             go to state 48
    relational_expression           go to state 49
    list_expression                 go to state 50
    addition_expression             go to state 51
    multiplication_expression       go to state 52
    simple_value                    go to state 53
    variable_declaration_statement  go to state 303
    constant                        go to state 55


State 352

   23 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative • ')' statement

    ')'  shift, and go to state 354


State 353

   25 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE statement •

    C_INTEGER              reduce using rule 25 (if_else_statement)
    C_FLOAT                reduce using rule 25 (if_else_statement)
    C_NIL                  reduce using rule 25 (if_else_statement)
    TYPE                   reduce using rule 25 (if_else_statement)
    IDENTIFIER             reduce using rule 25 (if_else_statement)
    RW_FOR                 reduce using rule 25 (if_else_statement)
    RW_RETURN              reduce using rule 25 (if_else_statement)
    RW_IF                  reduce using rule 25 (if_else_statement)
    RW_ELSE                reduce using rule 25 (if_else_statement)
    IO_READ                reduce using rule 25 (if_else_statement)
    IO_WRITE               reduce using rule 25 (if_else_statement)
    UNARY_LIST_OP          reduce using rule 25 (if_else_statement)
    '{'                    reduce using rule 25 (if_else_statement)
    '}'                    reduce using rule 25 (if_else_statement)
    '('                    reduce using rule 25 (if_else_statement)
    '!'                    reduce using rule 25 (if_else_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 25 (if_else_statement)


State 354

   23 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' • statement

    C_INTEGER              shift, and go to state 20
    C_FLOAT                shift, and go to state 21
    C_NIL                  shift, and go to state 22
    TYPE                   shift, and go to state 286
    IDENTIFIER             shift, and go to state 24
    RW_FOR                 shift, and go to state 287
    RW_RETURN              shift, and go to state 288
    RW_IF                  shift, and go to state 289
    IO_READ                shift, and go to state 290
    IO_WRITE               shift, and go to state 291
    UNARY_LIST_OP          shift, and go to state 30
    '{'                    shift, and go to state 292
    '('                    shift, and go to state 32
    '!'                    shift, and go to state 33
    ARITMETIC_OP_ADDITIVE  shift, and go to state 34

    block                           go to state 293
    statement                       go to state 355
    for_statement                   go to state 295
    if_else_statement               go to state 296
    expression_statement            go to state 297
    io_statement                    go to state 298
    input_statement                 go to state 299
    output_statement                go to state 300
    return_statement                go to state 301
    expression                      go to state 302
    function_call_expression        go to state 45
    or_expression                   go to state 46
    and_expression                  go to state 47
    equality_expression             go to state 48
    relational_expression           go to state 49
    list_expression                 go to state 50
    addition_expression             go to state 51
    multiplication_expression       go to state 52
    simple_value                    go to state 53
    variable_declaration_statement  go to state 303
    constant                        go to state 55


State 355

   23 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement •

    C_INTEGER              reduce using rule 23 (for_statement)
    C_FLOAT                reduce using rule 23 (for_statement)
    C_NIL                  reduce using rule 23 (for_statement)
    TYPE                   reduce using rule 23 (for_statement)
    IDENTIFIER             reduce using rule 23 (for_statement)
    RW_FOR                 reduce using rule 23 (for_statement)
    RW_RETURN              reduce using rule 23 (for_statement)
    RW_IF                  reduce using rule 23 (for_statement)
    RW_ELSE                reduce using rule 23 (for_statement)
    IO_READ                reduce using rule 23 (for_statement)
    IO_WRITE               reduce using rule 23 (for_statement)
    UNARY_LIST_OP          reduce using rule 23 (for_statement)
    '{'                    reduce using rule 23 (for_statement)
    '}'                    reduce using rule 23 (for_statement)
    '('                    reduce using rule 23 (for_statement)
    '!'                    reduce using rule 23 (for_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 23 (for_statement)
