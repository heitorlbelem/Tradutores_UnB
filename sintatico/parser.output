Grammar

    0 $accept: program $end

    1 program: declarations

    2 declarations: declarations declaration
    3             | declaration
    4             | error

    5 declaration: function_declaration_statement
    6            | variable_declaration_statement

    7 block: '{' statements '}'

    8 statements: statements statement
    9           | statement

   10 statement: expression_statement
   11          | io_statement
   12          | return_statement
   13          | variable_declaration_statement
   14          | for_statement
   15          | if_else_statement
   16          | block
   17          | error

   18 $@1: %empty

   19 function_declaration_statement: SIMPLE_TYPE IDENTIFIER '(' $@1 parameters_optative ')' statement

   20 $@2: %empty

   21 function_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER '(' $@2 parameters_optative ')' statement

   22 parameters_optative: %empty
   23                    | parameters

   24 parameters: parameters ',' parameter
   25           | parameter

   26 parameter: SIMPLE_TYPE IDENTIFIER
   27          | SIMPLE_TYPE LIST_TYPE IDENTIFIER

   28 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement

   29 if_else_statement: RW_IF '(' expression ')' statement
   30                  | RW_IF '(' expression ')' statement RW_ELSE statement

   31 expression_statement: expression ';'

   32 io_statement: input_statement
   33             | output_statement

   34 input_statement: IO_READ '(' IDENTIFIER ')' ';'

   35 output_statement: IO_WRITE '(' expression ')' ';'
   36                 | IO_WRITE '(' LIT_STRING ')' ';'

   37 return_statement: RW_RETURN expression ';'

   38 expression: IDENTIFIER '=' expression
   39           | or_expression

   40 function_call_expression: IDENTIFIER '(' function_arguments_optative ')'

   41 function_arguments_optative: %empty
   42                            | function_arguments

   43 function_arguments: function_arguments ',' function_argument
   44                   | function_argument

   45 function_argument: expression

   46 expression_optative: %empty
   47                    | expression

   48 or_expression_optative: %empty
   49                       | or_expression

   50 or_expression: or_expression LOGICAL_OP_OR and_expression
   51              | and_expression

   52 and_expression: and_expression LOGICAL_OP_AND equality_expression
   53               | equality_expression

   54 equality_expression: equality_expression EQUALITY_OP relational_expression
   55                    | relational_expression

   56 relational_expression: relational_expression RELATIONAL_OP list_expression
   57                      | list_expression

   58 list_expression: list_expression BINARY_LIST_OP addition_expression
   59                | addition_expression

   60 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE multiplication_expression
   61                    | multiplication_expression

   62 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE simple_value
   63                          | simple_value

   64 simple_value: constant
   65             | IDENTIFIER
   66             | ARITMETIC_OP_ADDITIVE simple_value
   67             | '!' simple_value
   68             | UNARY_LIST_OP simple_value
   69             | '(' expression ')'
   70             | function_call_expression

   71 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER ';'
   72                               | SIMPLE_TYPE LIST_TYPE IDENTIFIER ';'

   73 constant: C_INTEGER
   74         | C_FLOAT
   75         | C_NIL


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 67
    '(' (40) 19 21 28 29 30 34 35 36 40 69
    ')' (41) 19 21 28 29 30 34 35 36 40 69
    ',' (44) 24 43
    ';' (59) 28 31 34 35 36 37 71 72
    '=' (61) 38
    '{' (123) 7
    '}' (125) 7
    error (256) 4 17
    C_INTEGER <token> (258) 73
    C_FLOAT <token> (259) 74
    C_NIL <token> (260) 75
    LIT_STRING <token> (261) 36
    SIMPLE_TYPE <token> (262) 19 21 26 27 71 72
    LIST_TYPE <token> (263) 21 27 72
    IDENTIFIER <token> (264) 19 21 26 27 34 38 40 65 71 72
    RW_FOR <token> (265) 28
    RW_RETURN <token> (266) 37
    RW_IF <token> (267) 29 30
    RW_ELSE <token> (268) 30
    IO_READ <token> (269) 34
    IO_WRITE <token> (270) 35 36
    BINARY_LIST_OP <token> (271) 58
    UNARY_LIST_OP <token> (272) 68
    ARITMETIC_OP_ADDITIVE <token> (273) 60 66
    ARITMETIC_OP_MULTIPLICATIVE <token> (274) 62
    RELATIONAL_OP <token> (275) 56
    EQUALITY_OP <token> (276) 54
    LOGICAL_OP_OR <token> (277) 50
    LOGICAL_OP_AND <token> (278) 52
    THEN (279)


Nonterminals, with rules where they appear

    $accept (33)
        on left: 0
    program <node> (34)
        on left: 1
        on right: 0
    declarations <node> (35)
        on left: 2 3 4
        on right: 1 2
    declaration <node> (36)
        on left: 5 6
        on right: 2 3
    block <node> (37)
        on left: 7
        on right: 16
    statements <node> (38)
        on left: 8 9
        on right: 7 8
    statement <node> (39)
        on left: 10 11 12 13 14 15 16 17
        on right: 8 9 19 21 28 29 30
    function_declaration_statement <node> (40)
        on left: 19 21
        on right: 5
    $@1 (41)
        on left: 18
        on right: 19
    $@2 (42)
        on left: 20
        on right: 21
    parameters_optative <node> (43)
        on left: 22 23
        on right: 19 21
    parameters <node> (44)
        on left: 24 25
        on right: 23 24
    parameter <node> (45)
        on left: 26 27
        on right: 24 25
    for_statement <node> (46)
        on left: 28
        on right: 14
    if_else_statement <node> (47)
        on left: 29 30
        on right: 15
    expression_statement <node> (48)
        on left: 31
        on right: 10
    io_statement <node> (49)
        on left: 32 33
        on right: 11
    input_statement <node> (50)
        on left: 34
        on right: 32
    output_statement <node> (51)
        on left: 35 36
        on right: 33
    return_statement <node> (52)
        on left: 37
        on right: 12
    expression <node> (53)
        on left: 38 39
        on right: 29 30 31 35 37 38 45 47 69
    function_call_expression <node> (54)
        on left: 40
        on right: 70
    function_arguments_optative <node> (55)
        on left: 41 42
        on right: 40
    function_arguments <node> (56)
        on left: 43 44
        on right: 42 43
    function_argument <node> (57)
        on left: 45
        on right: 43 44
    expression_optative <node> (58)
        on left: 46 47
        on right: 28
    or_expression_optative <node> (59)
        on left: 48 49
        on right: 28
    or_expression <node> (60)
        on left: 50 51
        on right: 39 49 50
    and_expression <node> (61)
        on left: 52 53
        on right: 50 51 52
    equality_expression <node> (62)
        on left: 54 55
        on right: 52 53 54
    relational_expression <node> (63)
        on left: 56 57
        on right: 54 55 56
    list_expression <node> (64)
        on left: 58 59
        on right: 56 57 58
    addition_expression <node> (65)
        on left: 60 61
        on right: 58 59 60
    multiplication_expression <node> (66)
        on left: 62 63
        on right: 60 61 62
    simple_value <node> (67)
        on left: 64 65 66 67 68 69 70
        on right: 62 63 66 67 68
    variable_declaration_statement <node> (68)
        on left: 71 72
        on right: 6 13
    constant <node> (69)
        on left: 73 74 75
        on right: 64


State 0

    0 $accept: • program $end

    error        shift, and go to state 1
    SIMPLE_TYPE  shift, and go to state 2

    program                         go to state 3
    declarations                    go to state 4
    declaration                     go to state 5
    function_declaration_statement  go to state 6
    variable_declaration_statement  go to state 7


State 1

    4 declarations: error •

    $end         reduce using rule 4 (declarations)
    SIMPLE_TYPE  reduce using rule 4 (declarations)


State 2

   19 function_declaration_statement: SIMPLE_TYPE • IDENTIFIER '(' $@1 parameters_optative ')' statement
   21                               | SIMPLE_TYPE • LIST_TYPE IDENTIFIER '(' $@2 parameters_optative ')' statement
   71 variable_declaration_statement: SIMPLE_TYPE • IDENTIFIER ';'
   72                               | SIMPLE_TYPE • LIST_TYPE IDENTIFIER ';'

    LIST_TYPE   shift, and go to state 8
    IDENTIFIER  shift, and go to state 9


State 3

    0 $accept: program • $end

    $end  shift, and go to state 10


State 4

    1 program: declarations •
    2 declarations: declarations • declaration

    SIMPLE_TYPE  shift, and go to state 2

    $end  reduce using rule 1 (program)

    declaration                     go to state 11
    function_declaration_statement  go to state 6
    variable_declaration_statement  go to state 7


State 5

    3 declarations: declaration •

    $end         reduce using rule 3 (declarations)
    SIMPLE_TYPE  reduce using rule 3 (declarations)


State 6

    5 declaration: function_declaration_statement •

    $end         reduce using rule 5 (declaration)
    SIMPLE_TYPE  reduce using rule 5 (declaration)


State 7

    6 declaration: variable_declaration_statement •

    $end         reduce using rule 6 (declaration)
    SIMPLE_TYPE  reduce using rule 6 (declaration)


State 8

   21 function_declaration_statement: SIMPLE_TYPE LIST_TYPE • IDENTIFIER '(' $@2 parameters_optative ')' statement
   72 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE • IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 12


State 9

   19 function_declaration_statement: SIMPLE_TYPE IDENTIFIER • '(' $@1 parameters_optative ')' statement
   71 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER • ';'

    '('  shift, and go to state 13
    ';'  shift, and go to state 14


State 10

    0 $accept: program $end •

    $default  accept


State 11

    2 declarations: declarations declaration •

    $end         reduce using rule 2 (declarations)
    SIMPLE_TYPE  reduce using rule 2 (declarations)


State 12

   21 function_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER • '(' $@2 parameters_optative ')' statement
   72 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER • ';'

    '('  shift, and go to state 15
    ';'  shift, and go to state 16


State 13

   19 function_declaration_statement: SIMPLE_TYPE IDENTIFIER '(' • $@1 parameters_optative ')' statement

    SIMPLE_TYPE  reduce using rule 18 ($@1)
    ')'          reduce using rule 18 ($@1)

    $@1  go to state 17


State 14

   71 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER ';' •

    $end         reduce using rule 71 (variable_declaration_statement)
    SIMPLE_TYPE  reduce using rule 71 (variable_declaration_statement)


State 15

   21 function_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER '(' • $@2 parameters_optative ')' statement

    SIMPLE_TYPE  reduce using rule 20 ($@2)
    ')'          reduce using rule 20 ($@2)

    $@2  go to state 18


State 16

   72 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER ';' •

    $end         reduce using rule 72 (variable_declaration_statement)
    SIMPLE_TYPE  reduce using rule 72 (variable_declaration_statement)


State 17

   19 function_declaration_statement: SIMPLE_TYPE IDENTIFIER '(' $@1 • parameters_optative ')' statement

    SIMPLE_TYPE  shift, and go to state 19

    ')'  reduce using rule 22 (parameters_optative)

    parameters_optative  go to state 20
    parameters           go to state 21
    parameter            go to state 22


State 18

   21 function_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER '(' $@2 • parameters_optative ')' statement

    SIMPLE_TYPE  shift, and go to state 19

    ')'  reduce using rule 22 (parameters_optative)

    parameters_optative  go to state 23
    parameters           go to state 21
    parameter            go to state 22


State 19

   26 parameter: SIMPLE_TYPE • IDENTIFIER
   27          | SIMPLE_TYPE • LIST_TYPE IDENTIFIER

    LIST_TYPE   shift, and go to state 24
    IDENTIFIER  shift, and go to state 25


State 20

   19 function_declaration_statement: SIMPLE_TYPE IDENTIFIER '(' $@1 parameters_optative • ')' statement

    ')'  shift, and go to state 26


State 21

   23 parameters_optative: parameters •
   24 parameters: parameters • ',' parameter

    ','  shift, and go to state 27

    ')'  reduce using rule 23 (parameters_optative)


State 22

   25 parameters: parameter •

    ')'  reduce using rule 25 (parameters)
    ','  reduce using rule 25 (parameters)


State 23

   21 function_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER '(' $@2 parameters_optative • ')' statement

    ')'  shift, and go to state 28


State 24

   27 parameter: SIMPLE_TYPE LIST_TYPE • IDENTIFIER

    IDENTIFIER  shift, and go to state 29


State 25

   26 parameter: SIMPLE_TYPE IDENTIFIER •

    ')'  reduce using rule 26 (parameter)
    ','  reduce using rule 26 (parameter)


State 26

   19 function_declaration_statement: SIMPLE_TYPE IDENTIFIER '(' $@1 parameters_optative ')' • statement

    error                  shift, and go to state 30
    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    SIMPLE_TYPE            shift, and go to state 34
    IDENTIFIER             shift, and go to state 35
    RW_FOR                 shift, and go to state 36
    RW_RETURN              shift, and go to state 37
    RW_IF                  shift, and go to state 38
    IO_READ                shift, and go to state 39
    IO_WRITE               shift, and go to state 40
    UNARY_LIST_OP          shift, and go to state 41
    '{'                    shift, and go to state 42
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    block                           go to state 46
    statement                       go to state 47
    for_statement                   go to state 48
    if_else_statement               go to state 49
    expression_statement            go to state 50
    io_statement                    go to state 51
    input_statement                 go to state 52
    output_statement                go to state 53
    return_statement                go to state 54
    expression                      go to state 55
    function_call_expression        go to state 56
    or_expression                   go to state 57
    and_expression                  go to state 58
    equality_expression             go to state 59
    relational_expression           go to state 60
    list_expression                 go to state 61
    addition_expression             go to state 62
    multiplication_expression       go to state 63
    simple_value                    go to state 64
    variable_declaration_statement  go to state 65
    constant                        go to state 66


State 27

   24 parameters: parameters ',' • parameter

    SIMPLE_TYPE  shift, and go to state 19

    parameter  go to state 67


State 28

   21 function_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER '(' $@2 parameters_optative ')' • statement

    error                  shift, and go to state 30
    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    SIMPLE_TYPE            shift, and go to state 34
    IDENTIFIER             shift, and go to state 35
    RW_FOR                 shift, and go to state 36
    RW_RETURN              shift, and go to state 37
    RW_IF                  shift, and go to state 38
    IO_READ                shift, and go to state 39
    IO_WRITE               shift, and go to state 40
    UNARY_LIST_OP          shift, and go to state 41
    '{'                    shift, and go to state 42
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    block                           go to state 46
    statement                       go to state 68
    for_statement                   go to state 48
    if_else_statement               go to state 49
    expression_statement            go to state 50
    io_statement                    go to state 51
    input_statement                 go to state 52
    output_statement                go to state 53
    return_statement                go to state 54
    expression                      go to state 55
    function_call_expression        go to state 56
    or_expression                   go to state 57
    and_expression                  go to state 58
    equality_expression             go to state 59
    relational_expression           go to state 60
    list_expression                 go to state 61
    addition_expression             go to state 62
    multiplication_expression       go to state 63
    simple_value                    go to state 64
    variable_declaration_statement  go to state 65
    constant                        go to state 66


State 29

   27 parameter: SIMPLE_TYPE LIST_TYPE IDENTIFIER •

    ')'  reduce using rule 27 (parameter)
    ','  reduce using rule 27 (parameter)


State 30

   17 statement: error •

    $end         reduce using rule 17 (statement)
    SIMPLE_TYPE  reduce using rule 17 (statement)


State 31

   73 constant: C_INTEGER •

    BINARY_LIST_OP               reduce using rule 73 (constant)
    ';'                          reduce using rule 73 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 73 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 73 (constant)
    RELATIONAL_OP                reduce using rule 73 (constant)
    EQUALITY_OP                  reduce using rule 73 (constant)
    LOGICAL_OP_OR                reduce using rule 73 (constant)
    LOGICAL_OP_AND               reduce using rule 73 (constant)


State 32

   74 constant: C_FLOAT •

    BINARY_LIST_OP               reduce using rule 74 (constant)
    ';'                          reduce using rule 74 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 74 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 74 (constant)
    RELATIONAL_OP                reduce using rule 74 (constant)
    EQUALITY_OP                  reduce using rule 74 (constant)
    LOGICAL_OP_OR                reduce using rule 74 (constant)
    LOGICAL_OP_AND               reduce using rule 74 (constant)


State 33

   75 constant: C_NIL •

    BINARY_LIST_OP               reduce using rule 75 (constant)
    ';'                          reduce using rule 75 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 75 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 75 (constant)
    RELATIONAL_OP                reduce using rule 75 (constant)
    EQUALITY_OP                  reduce using rule 75 (constant)
    LOGICAL_OP_OR                reduce using rule 75 (constant)
    LOGICAL_OP_AND               reduce using rule 75 (constant)


State 34

   71 variable_declaration_statement: SIMPLE_TYPE • IDENTIFIER ';'
   72                               | SIMPLE_TYPE • LIST_TYPE IDENTIFIER ';'

    LIST_TYPE   shift, and go to state 69
    IDENTIFIER  shift, and go to state 70


State 35

   38 expression: IDENTIFIER • '=' expression
   40 function_call_expression: IDENTIFIER • '(' function_arguments_optative ')'
   65 simple_value: IDENTIFIER •

    '('  shift, and go to state 71
    '='  shift, and go to state 72

    BINARY_LIST_OP               reduce using rule 65 (simple_value)
    ';'                          reduce using rule 65 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 65 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 65 (simple_value)
    RELATIONAL_OP                reduce using rule 65 (simple_value)
    EQUALITY_OP                  reduce using rule 65 (simple_value)
    LOGICAL_OP_OR                reduce using rule 65 (simple_value)
    LOGICAL_OP_AND               reduce using rule 65 (simple_value)


State 36

   28 for_statement: RW_FOR • '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    '('  shift, and go to state 73


State 37

   37 return_statement: RW_RETURN • expression ';'

    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    IDENTIFIER             shift, and go to state 35
    UNARY_LIST_OP          shift, and go to state 41
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    expression                 go to state 74
    function_call_expression   go to state 56
    or_expression              go to state 57
    and_expression             go to state 58
    equality_expression        go to state 59
    relational_expression      go to state 60
    list_expression            go to state 61
    addition_expression        go to state 62
    multiplication_expression  go to state 63
    simple_value               go to state 64
    constant                   go to state 66


State 38

   29 if_else_statement: RW_IF • '(' expression ')' statement
   30                  | RW_IF • '(' expression ')' statement RW_ELSE statement

    '('  shift, and go to state 75


State 39

   34 input_statement: IO_READ • '(' IDENTIFIER ')' ';'

    '('  shift, and go to state 76


State 40

   35 output_statement: IO_WRITE • '(' expression ')' ';'
   36                 | IO_WRITE • '(' LIT_STRING ')' ';'

    '('  shift, and go to state 77


State 41

   68 simple_value: UNARY_LIST_OP • simple_value

    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    IDENTIFIER             shift, and go to state 78
    UNARY_LIST_OP          shift, and go to state 41
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    function_call_expression  go to state 56
    simple_value              go to state 79
    constant                  go to state 66


State 42

    7 block: '{' • statements '}'

    error                  shift, and go to state 136
    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    SIMPLE_TYPE            shift, and go to state 137
    IDENTIFIER             shift, and go to state 35
    RW_FOR                 shift, and go to state 138
    RW_RETURN              shift, and go to state 139
    RW_IF                  shift, and go to state 140
    IO_READ                shift, and go to state 141
    IO_WRITE               shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 41
    '{'                    shift, and go to state 143
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    block                           go to state 144
    statements                      go to state 80
    statement                       go to state 81
    for_statement                   go to state 145
    if_else_statement               go to state 146
    expression_statement            go to state 147
    io_statement                    go to state 148
    input_statement                 go to state 149
    output_statement                go to state 150
    return_statement                go to state 151
    expression                      go to state 152
    function_call_expression        go to state 56
    or_expression                   go to state 57
    and_expression                  go to state 58
    equality_expression             go to state 59
    relational_expression           go to state 60
    list_expression                 go to state 61
    addition_expression             go to state 62
    multiplication_expression       go to state 63
    simple_value                    go to state 64
    variable_declaration_statement  go to state 153
    constant                        go to state 66


State 43

   69 simple_value: '(' • expression ')'

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    IDENTIFIER             shift, and go to state 157
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    expression                 go to state 82
    function_call_expression   go to state 162
    or_expression              go to state 163
    and_expression             go to state 164
    equality_expression        go to state 165
    relational_expression      go to state 166
    list_expression            go to state 167
    addition_expression        go to state 168
    multiplication_expression  go to state 169
    simple_value               go to state 170
    constant                   go to state 171


State 44

   67 simple_value: '!' • simple_value

    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    IDENTIFIER             shift, and go to state 78
    UNARY_LIST_OP          shift, and go to state 41
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    function_call_expression  go to state 56
    simple_value              go to state 83
    constant                  go to state 66


State 45

   66 simple_value: ARITMETIC_OP_ADDITIVE • simple_value

    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    IDENTIFIER             shift, and go to state 78
    UNARY_LIST_OP          shift, and go to state 41
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    function_call_expression  go to state 56
    simple_value              go to state 84
    constant                  go to state 66


State 46

   16 statement: block •

    $end         reduce using rule 16 (statement)
    SIMPLE_TYPE  reduce using rule 16 (statement)


State 47

   19 function_declaration_statement: SIMPLE_TYPE IDENTIFIER '(' $@1 parameters_optative ')' statement •

    $end         reduce using rule 19 (function_declaration_statement)
    SIMPLE_TYPE  reduce using rule 19 (function_declaration_statement)


State 48

   14 statement: for_statement •

    $end         reduce using rule 14 (statement)
    SIMPLE_TYPE  reduce using rule 14 (statement)


State 49

   15 statement: if_else_statement •

    $end         reduce using rule 15 (statement)
    SIMPLE_TYPE  reduce using rule 15 (statement)


State 50

   10 statement: expression_statement •

    $end         reduce using rule 10 (statement)
    SIMPLE_TYPE  reduce using rule 10 (statement)


State 51

   11 statement: io_statement •

    $end         reduce using rule 11 (statement)
    SIMPLE_TYPE  reduce using rule 11 (statement)


State 52

   32 io_statement: input_statement •

    $end         reduce using rule 32 (io_statement)
    SIMPLE_TYPE  reduce using rule 32 (io_statement)


State 53

   33 io_statement: output_statement •

    $end         reduce using rule 33 (io_statement)
    SIMPLE_TYPE  reduce using rule 33 (io_statement)


State 54

   12 statement: return_statement •

    $end         reduce using rule 12 (statement)
    SIMPLE_TYPE  reduce using rule 12 (statement)


State 55

   31 expression_statement: expression • ';'

    ';'  shift, and go to state 85


State 56

   70 simple_value: function_call_expression •

    BINARY_LIST_OP               reduce using rule 70 (simple_value)
    ';'                          reduce using rule 70 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 70 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 70 (simple_value)
    RELATIONAL_OP                reduce using rule 70 (simple_value)
    EQUALITY_OP                  reduce using rule 70 (simple_value)
    LOGICAL_OP_OR                reduce using rule 70 (simple_value)
    LOGICAL_OP_AND               reduce using rule 70 (simple_value)


State 57

   39 expression: or_expression •
   50 or_expression: or_expression • LOGICAL_OP_OR and_expression

    LOGICAL_OP_OR  shift, and go to state 86

    ';'  reduce using rule 39 (expression)


State 58

   51 or_expression: and_expression •
   52 and_expression: and_expression • LOGICAL_OP_AND equality_expression

    LOGICAL_OP_AND  shift, and go to state 87

    ';'            reduce using rule 51 (or_expression)
    LOGICAL_OP_OR  reduce using rule 51 (or_expression)


State 59

   53 and_expression: equality_expression •
   54 equality_expression: equality_expression • EQUALITY_OP relational_expression

    EQUALITY_OP  shift, and go to state 88

    ';'             reduce using rule 53 (and_expression)
    LOGICAL_OP_OR   reduce using rule 53 (and_expression)
    LOGICAL_OP_AND  reduce using rule 53 (and_expression)


State 60

   55 equality_expression: relational_expression •
   56 relational_expression: relational_expression • RELATIONAL_OP list_expression

    RELATIONAL_OP  shift, and go to state 89

    ';'             reduce using rule 55 (equality_expression)
    EQUALITY_OP     reduce using rule 55 (equality_expression)
    LOGICAL_OP_OR   reduce using rule 55 (equality_expression)
    LOGICAL_OP_AND  reduce using rule 55 (equality_expression)


State 61

   57 relational_expression: list_expression •
   58 list_expression: list_expression • BINARY_LIST_OP addition_expression

    BINARY_LIST_OP  shift, and go to state 90

    ';'             reduce using rule 57 (relational_expression)
    RELATIONAL_OP   reduce using rule 57 (relational_expression)
    EQUALITY_OP     reduce using rule 57 (relational_expression)
    LOGICAL_OP_OR   reduce using rule 57 (relational_expression)
    LOGICAL_OP_AND  reduce using rule 57 (relational_expression)


State 62

   59 list_expression: addition_expression •
   60 addition_expression: addition_expression • ARITMETIC_OP_ADDITIVE multiplication_expression

    ARITMETIC_OP_ADDITIVE  shift, and go to state 91

    BINARY_LIST_OP  reduce using rule 59 (list_expression)
    ';'             reduce using rule 59 (list_expression)
    RELATIONAL_OP   reduce using rule 59 (list_expression)
    EQUALITY_OP     reduce using rule 59 (list_expression)
    LOGICAL_OP_OR   reduce using rule 59 (list_expression)
    LOGICAL_OP_AND  reduce using rule 59 (list_expression)


State 63

   61 addition_expression: multiplication_expression •
   62 multiplication_expression: multiplication_expression • ARITMETIC_OP_MULTIPLICATIVE simple_value

    ARITMETIC_OP_MULTIPLICATIVE  shift, and go to state 92

    BINARY_LIST_OP         reduce using rule 61 (addition_expression)
    ';'                    reduce using rule 61 (addition_expression)
    ARITMETIC_OP_ADDITIVE  reduce using rule 61 (addition_expression)
    RELATIONAL_OP          reduce using rule 61 (addition_expression)
    EQUALITY_OP            reduce using rule 61 (addition_expression)
    LOGICAL_OP_OR          reduce using rule 61 (addition_expression)
    LOGICAL_OP_AND         reduce using rule 61 (addition_expression)


State 64

   63 multiplication_expression: simple_value •

    BINARY_LIST_OP               reduce using rule 63 (multiplication_expression)
    ';'                          reduce using rule 63 (multiplication_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 63 (multiplication_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 63 (multiplication_expression)
    RELATIONAL_OP                reduce using rule 63 (multiplication_expression)
    EQUALITY_OP                  reduce using rule 63 (multiplication_expression)
    LOGICAL_OP_OR                reduce using rule 63 (multiplication_expression)
    LOGICAL_OP_AND               reduce using rule 63 (multiplication_expression)


State 65

   13 statement: variable_declaration_statement •

    $end         reduce using rule 13 (statement)
    SIMPLE_TYPE  reduce using rule 13 (statement)


State 66

   64 simple_value: constant •

    BINARY_LIST_OP               reduce using rule 64 (simple_value)
    ';'                          reduce using rule 64 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 64 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 64 (simple_value)
    RELATIONAL_OP                reduce using rule 64 (simple_value)
    EQUALITY_OP                  reduce using rule 64 (simple_value)
    LOGICAL_OP_OR                reduce using rule 64 (simple_value)
    LOGICAL_OP_AND               reduce using rule 64 (simple_value)


State 67

   24 parameters: parameters ',' parameter •

    ')'  reduce using rule 24 (parameters)
    ','  reduce using rule 24 (parameters)


State 68

   21 function_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER '(' $@2 parameters_optative ')' statement •

    $end         reduce using rule 21 (function_declaration_statement)
    SIMPLE_TYPE  reduce using rule 21 (function_declaration_statement)


State 69

   72 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE • IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 93


State 70

   71 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 14


State 71

   40 function_call_expression: IDENTIFIER '(' • function_arguments_optative ')'

    C_INTEGER              shift, and go to state 172
    C_FLOAT                shift, and go to state 173
    C_NIL                  shift, and go to state 174
    IDENTIFIER             shift, and go to state 175
    UNARY_LIST_OP          shift, and go to state 176
    '('                    shift, and go to state 177
    '!'                    shift, and go to state 178
    ARITMETIC_OP_ADDITIVE  shift, and go to state 179

    ')'  reduce using rule 41 (function_arguments_optative)

    expression                   go to state 94
    function_call_expression     go to state 180
    function_arguments_optative  go to state 95
    function_arguments           go to state 96
    function_argument            go to state 97
    or_expression                go to state 181
    and_expression               go to state 182
    equality_expression          go to state 183
    relational_expression        go to state 184
    list_expression              go to state 185
    addition_expression          go to state 186
    multiplication_expression    go to state 187
    simple_value                 go to state 188
    constant                     go to state 189


State 72

   38 expression: IDENTIFIER '=' • expression

    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    IDENTIFIER             shift, and go to state 35
    UNARY_LIST_OP          shift, and go to state 41
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    expression                 go to state 98
    function_call_expression   go to state 56
    or_expression              go to state 57
    and_expression             go to state 58
    equality_expression        go to state 59
    relational_expression      go to state 60
    list_expression            go to state 61
    addition_expression        go to state 62
    multiplication_expression  go to state 63
    simple_value               go to state 64
    constant                   go to state 66


State 73

   28 for_statement: RW_FOR '(' • expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    IDENTIFIER             shift, and go to state 35
    UNARY_LIST_OP          shift, and go to state 41
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    ';'  reduce using rule 46 (expression_optative)

    expression                 go to state 99
    function_call_expression   go to state 56
    expression_optative        go to state 100
    or_expression              go to state 57
    and_expression             go to state 58
    equality_expression        go to state 59
    relational_expression      go to state 60
    list_expression            go to state 61
    addition_expression        go to state 62
    multiplication_expression  go to state 63
    simple_value               go to state 64
    constant                   go to state 66


State 74

   37 return_statement: RW_RETURN expression • ';'

    ';'  shift, and go to state 101


State 75

   29 if_else_statement: RW_IF '(' • expression ')' statement
   30                  | RW_IF '(' • expression ')' statement RW_ELSE statement

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    IDENTIFIER             shift, and go to state 157
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    expression                 go to state 102
    function_call_expression   go to state 162
    or_expression              go to state 163
    and_expression             go to state 164
    equality_expression        go to state 165
    relational_expression      go to state 166
    list_expression            go to state 167
    addition_expression        go to state 168
    multiplication_expression  go to state 169
    simple_value               go to state 170
    constant                   go to state 171


State 76

   34 input_statement: IO_READ '(' • IDENTIFIER ')' ';'

    IDENTIFIER  shift, and go to state 103


State 77

   35 output_statement: IO_WRITE '(' • expression ')' ';'
   36                 | IO_WRITE '(' • LIT_STRING ')' ';'

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    LIT_STRING             shift, and go to state 104
    IDENTIFIER             shift, and go to state 157
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    expression                 go to state 105
    function_call_expression   go to state 162
    or_expression              go to state 163
    and_expression             go to state 164
    equality_expression        go to state 165
    relational_expression      go to state 166
    list_expression            go to state 167
    addition_expression        go to state 168
    multiplication_expression  go to state 169
    simple_value               go to state 170
    constant                   go to state 171


State 78

   40 function_call_expression: IDENTIFIER • '(' function_arguments_optative ')'
   65 simple_value: IDENTIFIER •

    '('  shift, and go to state 71

    BINARY_LIST_OP               reduce using rule 65 (simple_value)
    ';'                          reduce using rule 65 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 65 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 65 (simple_value)
    RELATIONAL_OP                reduce using rule 65 (simple_value)
    EQUALITY_OP                  reduce using rule 65 (simple_value)
    LOGICAL_OP_OR                reduce using rule 65 (simple_value)
    LOGICAL_OP_AND               reduce using rule 65 (simple_value)


State 79

   68 simple_value: UNARY_LIST_OP simple_value •

    BINARY_LIST_OP               reduce using rule 68 (simple_value)
    ';'                          reduce using rule 68 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 68 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 68 (simple_value)
    RELATIONAL_OP                reduce using rule 68 (simple_value)
    EQUALITY_OP                  reduce using rule 68 (simple_value)
    LOGICAL_OP_OR                reduce using rule 68 (simple_value)
    LOGICAL_OP_AND               reduce using rule 68 (simple_value)


State 80

    7 block: '{' statements • '}'
    8 statements: statements • statement

    error                  shift, and go to state 136
    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    SIMPLE_TYPE            shift, and go to state 137
    IDENTIFIER             shift, and go to state 35
    RW_FOR                 shift, and go to state 138
    RW_RETURN              shift, and go to state 139
    RW_IF                  shift, and go to state 140
    IO_READ                shift, and go to state 141
    IO_WRITE               shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 41
    '{'                    shift, and go to state 143
    '}'                    shift, and go to state 106
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    block                           go to state 144
    statement                       go to state 107
    for_statement                   go to state 145
    if_else_statement               go to state 146
    expression_statement            go to state 147
    io_statement                    go to state 148
    input_statement                 go to state 149
    output_statement                go to state 150
    return_statement                go to state 151
    expression                      go to state 152
    function_call_expression        go to state 56
    or_expression                   go to state 57
    and_expression                  go to state 58
    equality_expression             go to state 59
    relational_expression           go to state 60
    list_expression                 go to state 61
    addition_expression             go to state 62
    multiplication_expression       go to state 63
    simple_value                    go to state 64
    variable_declaration_statement  go to state 153
    constant                        go to state 66


State 81

    9 statements: statement •

    error                  reduce using rule 9 (statements)
    C_INTEGER              reduce using rule 9 (statements)
    C_FLOAT                reduce using rule 9 (statements)
    C_NIL                  reduce using rule 9 (statements)
    SIMPLE_TYPE            reduce using rule 9 (statements)
    IDENTIFIER             reduce using rule 9 (statements)
    RW_FOR                 reduce using rule 9 (statements)
    RW_RETURN              reduce using rule 9 (statements)
    RW_IF                  reduce using rule 9 (statements)
    IO_READ                reduce using rule 9 (statements)
    IO_WRITE               reduce using rule 9 (statements)
    UNARY_LIST_OP          reduce using rule 9 (statements)
    '{'                    reduce using rule 9 (statements)
    '}'                    reduce using rule 9 (statements)
    '('                    reduce using rule 9 (statements)
    '!'                    reduce using rule 9 (statements)
    ARITMETIC_OP_ADDITIVE  reduce using rule 9 (statements)


State 82

   69 simple_value: '(' expression • ')'

    ')'  shift, and go to state 108


State 83

   67 simple_value: '!' simple_value •

    BINARY_LIST_OP               reduce using rule 67 (simple_value)
    ';'                          reduce using rule 67 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 67 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 67 (simple_value)
    RELATIONAL_OP                reduce using rule 67 (simple_value)
    EQUALITY_OP                  reduce using rule 67 (simple_value)
    LOGICAL_OP_OR                reduce using rule 67 (simple_value)
    LOGICAL_OP_AND               reduce using rule 67 (simple_value)


State 84

   66 simple_value: ARITMETIC_OP_ADDITIVE simple_value •

    BINARY_LIST_OP               reduce using rule 66 (simple_value)
    ';'                          reduce using rule 66 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 66 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 66 (simple_value)
    RELATIONAL_OP                reduce using rule 66 (simple_value)
    EQUALITY_OP                  reduce using rule 66 (simple_value)
    LOGICAL_OP_OR                reduce using rule 66 (simple_value)
    LOGICAL_OP_AND               reduce using rule 66 (simple_value)


State 85

   31 expression_statement: expression ';' •

    $end         reduce using rule 31 (expression_statement)
    SIMPLE_TYPE  reduce using rule 31 (expression_statement)


State 86

   50 or_expression: or_expression LOGICAL_OP_OR • and_expression

    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    IDENTIFIER             shift, and go to state 78
    UNARY_LIST_OP          shift, and go to state 41
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    function_call_expression   go to state 56
    and_expression             go to state 109
    equality_expression        go to state 59
    relational_expression      go to state 60
    list_expression            go to state 61
    addition_expression        go to state 62
    multiplication_expression  go to state 63
    simple_value               go to state 64
    constant                   go to state 66


State 87

   52 and_expression: and_expression LOGICAL_OP_AND • equality_expression

    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    IDENTIFIER             shift, and go to state 78
    UNARY_LIST_OP          shift, and go to state 41
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    function_call_expression   go to state 56
    equality_expression        go to state 110
    relational_expression      go to state 60
    list_expression            go to state 61
    addition_expression        go to state 62
    multiplication_expression  go to state 63
    simple_value               go to state 64
    constant                   go to state 66


State 88

   54 equality_expression: equality_expression EQUALITY_OP • relational_expression

    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    IDENTIFIER             shift, and go to state 78
    UNARY_LIST_OP          shift, and go to state 41
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    function_call_expression   go to state 56
    relational_expression      go to state 111
    list_expression            go to state 61
    addition_expression        go to state 62
    multiplication_expression  go to state 63
    simple_value               go to state 64
    constant                   go to state 66


State 89

   56 relational_expression: relational_expression RELATIONAL_OP • list_expression

    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    IDENTIFIER             shift, and go to state 78
    UNARY_LIST_OP          shift, and go to state 41
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    function_call_expression   go to state 56
    list_expression            go to state 112
    addition_expression        go to state 62
    multiplication_expression  go to state 63
    simple_value               go to state 64
    constant                   go to state 66


State 90

   58 list_expression: list_expression BINARY_LIST_OP • addition_expression

    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    IDENTIFIER             shift, and go to state 78
    UNARY_LIST_OP          shift, and go to state 41
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    function_call_expression   go to state 56
    addition_expression        go to state 113
    multiplication_expression  go to state 63
    simple_value               go to state 64
    constant                   go to state 66


State 91

   60 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE • multiplication_expression

    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    IDENTIFIER             shift, and go to state 78
    UNARY_LIST_OP          shift, and go to state 41
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    function_call_expression   go to state 56
    multiplication_expression  go to state 114
    simple_value               go to state 64
    constant                   go to state 66


State 92

   62 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE • simple_value

    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    IDENTIFIER             shift, and go to state 78
    UNARY_LIST_OP          shift, and go to state 41
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    function_call_expression  go to state 56
    simple_value              go to state 115
    constant                  go to state 66


State 93

   72 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 16


State 94

   45 function_argument: expression •

    ')'  reduce using rule 45 (function_argument)
    ','  reduce using rule 45 (function_argument)


State 95

   40 function_call_expression: IDENTIFIER '(' function_arguments_optative • ')'

    ')'  shift, and go to state 116


State 96

   42 function_arguments_optative: function_arguments •
   43 function_arguments: function_arguments • ',' function_argument

    ','  shift, and go to state 117

    ')'  reduce using rule 42 (function_arguments_optative)


State 97

   44 function_arguments: function_argument •

    ')'  reduce using rule 44 (function_arguments)
    ','  reduce using rule 44 (function_arguments)


State 98

   38 expression: IDENTIFIER '=' expression •

    ';'  reduce using rule 38 (expression)


State 99

   47 expression_optative: expression •

    ';'  reduce using rule 47 (expression_optative)


State 100

   28 for_statement: RW_FOR '(' expression_optative • ';' or_expression_optative ';' expression_optative ')' statement

    ';'  shift, and go to state 118


State 101

   37 return_statement: RW_RETURN expression ';' •

    $end         reduce using rule 37 (return_statement)
    SIMPLE_TYPE  reduce using rule 37 (return_statement)


State 102

   29 if_else_statement: RW_IF '(' expression • ')' statement
   30                  | RW_IF '(' expression • ')' statement RW_ELSE statement

    ')'  shift, and go to state 119


State 103

   34 input_statement: IO_READ '(' IDENTIFIER • ')' ';'

    ')'  shift, and go to state 120


State 104

   36 output_statement: IO_WRITE '(' LIT_STRING • ')' ';'

    ')'  shift, and go to state 121


State 105

   35 output_statement: IO_WRITE '(' expression • ')' ';'

    ')'  shift, and go to state 122


State 106

    7 block: '{' statements '}' •

    $end         reduce using rule 7 (block)
    SIMPLE_TYPE  reduce using rule 7 (block)


State 107

    8 statements: statements statement •

    error                  reduce using rule 8 (statements)
    C_INTEGER              reduce using rule 8 (statements)
    C_FLOAT                reduce using rule 8 (statements)
    C_NIL                  reduce using rule 8 (statements)
    SIMPLE_TYPE            reduce using rule 8 (statements)
    IDENTIFIER             reduce using rule 8 (statements)
    RW_FOR                 reduce using rule 8 (statements)
    RW_RETURN              reduce using rule 8 (statements)
    RW_IF                  reduce using rule 8 (statements)
    IO_READ                reduce using rule 8 (statements)
    IO_WRITE               reduce using rule 8 (statements)
    UNARY_LIST_OP          reduce using rule 8 (statements)
    '{'                    reduce using rule 8 (statements)
    '}'                    reduce using rule 8 (statements)
    '('                    reduce using rule 8 (statements)
    '!'                    reduce using rule 8 (statements)
    ARITMETIC_OP_ADDITIVE  reduce using rule 8 (statements)


State 108

   69 simple_value: '(' expression ')' •

    BINARY_LIST_OP               reduce using rule 69 (simple_value)
    ';'                          reduce using rule 69 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 69 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 69 (simple_value)
    RELATIONAL_OP                reduce using rule 69 (simple_value)
    EQUALITY_OP                  reduce using rule 69 (simple_value)
    LOGICAL_OP_OR                reduce using rule 69 (simple_value)
    LOGICAL_OP_AND               reduce using rule 69 (simple_value)


State 109

   50 or_expression: or_expression LOGICAL_OP_OR and_expression •
   52 and_expression: and_expression • LOGICAL_OP_AND equality_expression

    LOGICAL_OP_AND  shift, and go to state 87

    ';'            reduce using rule 50 (or_expression)
    LOGICAL_OP_OR  reduce using rule 50 (or_expression)


State 110

   52 and_expression: and_expression LOGICAL_OP_AND equality_expression •
   54 equality_expression: equality_expression • EQUALITY_OP relational_expression

    EQUALITY_OP  shift, and go to state 88

    ';'             reduce using rule 52 (and_expression)
    LOGICAL_OP_OR   reduce using rule 52 (and_expression)
    LOGICAL_OP_AND  reduce using rule 52 (and_expression)


State 111

   54 equality_expression: equality_expression EQUALITY_OP relational_expression •
   56 relational_expression: relational_expression • RELATIONAL_OP list_expression

    RELATIONAL_OP  shift, and go to state 89

    ';'             reduce using rule 54 (equality_expression)
    EQUALITY_OP     reduce using rule 54 (equality_expression)
    LOGICAL_OP_OR   reduce using rule 54 (equality_expression)
    LOGICAL_OP_AND  reduce using rule 54 (equality_expression)


State 112

   56 relational_expression: relational_expression RELATIONAL_OP list_expression •
   58 list_expression: list_expression • BINARY_LIST_OP addition_expression

    BINARY_LIST_OP  shift, and go to state 90

    ';'             reduce using rule 56 (relational_expression)
    RELATIONAL_OP   reduce using rule 56 (relational_expression)
    EQUALITY_OP     reduce using rule 56 (relational_expression)
    LOGICAL_OP_OR   reduce using rule 56 (relational_expression)
    LOGICAL_OP_AND  reduce using rule 56 (relational_expression)


State 113

   58 list_expression: list_expression BINARY_LIST_OP addition_expression •
   60 addition_expression: addition_expression • ARITMETIC_OP_ADDITIVE multiplication_expression

    ARITMETIC_OP_ADDITIVE  shift, and go to state 91

    BINARY_LIST_OP  reduce using rule 58 (list_expression)
    ';'             reduce using rule 58 (list_expression)
    RELATIONAL_OP   reduce using rule 58 (list_expression)
    EQUALITY_OP     reduce using rule 58 (list_expression)
    LOGICAL_OP_OR   reduce using rule 58 (list_expression)
    LOGICAL_OP_AND  reduce using rule 58 (list_expression)


State 114

   60 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE multiplication_expression •
   62 multiplication_expression: multiplication_expression • ARITMETIC_OP_MULTIPLICATIVE simple_value

    ARITMETIC_OP_MULTIPLICATIVE  shift, and go to state 92

    BINARY_LIST_OP         reduce using rule 60 (addition_expression)
    ';'                    reduce using rule 60 (addition_expression)
    ARITMETIC_OP_ADDITIVE  reduce using rule 60 (addition_expression)
    RELATIONAL_OP          reduce using rule 60 (addition_expression)
    EQUALITY_OP            reduce using rule 60 (addition_expression)
    LOGICAL_OP_OR          reduce using rule 60 (addition_expression)
    LOGICAL_OP_AND         reduce using rule 60 (addition_expression)


State 115

   62 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE simple_value •

    BINARY_LIST_OP               reduce using rule 62 (multiplication_expression)
    ';'                          reduce using rule 62 (multiplication_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 62 (multiplication_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 62 (multiplication_expression)
    RELATIONAL_OP                reduce using rule 62 (multiplication_expression)
    EQUALITY_OP                  reduce using rule 62 (multiplication_expression)
    LOGICAL_OP_OR                reduce using rule 62 (multiplication_expression)
    LOGICAL_OP_AND               reduce using rule 62 (multiplication_expression)


State 116

   40 function_call_expression: IDENTIFIER '(' function_arguments_optative ')' •

    BINARY_LIST_OP               reduce using rule 40 (function_call_expression)
    ';'                          reduce using rule 40 (function_call_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 40 (function_call_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 40 (function_call_expression)
    RELATIONAL_OP                reduce using rule 40 (function_call_expression)
    EQUALITY_OP                  reduce using rule 40 (function_call_expression)
    LOGICAL_OP_OR                reduce using rule 40 (function_call_expression)
    LOGICAL_OP_AND               reduce using rule 40 (function_call_expression)


State 117

   43 function_arguments: function_arguments ',' • function_argument

    C_INTEGER              shift, and go to state 172
    C_FLOAT                shift, and go to state 173
    C_NIL                  shift, and go to state 174
    IDENTIFIER             shift, and go to state 175
    UNARY_LIST_OP          shift, and go to state 176
    '('                    shift, and go to state 177
    '!'                    shift, and go to state 178
    ARITMETIC_OP_ADDITIVE  shift, and go to state 179

    expression                 go to state 94
    function_call_expression   go to state 180
    function_argument          go to state 123
    or_expression              go to state 181
    and_expression             go to state 182
    equality_expression        go to state 183
    relational_expression      go to state 184
    list_expression            go to state 185
    addition_expression        go to state 186
    multiplication_expression  go to state 187
    simple_value               go to state 188
    constant                   go to state 189


State 118

   28 for_statement: RW_FOR '(' expression_optative ';' • or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    IDENTIFIER             shift, and go to state 78
    UNARY_LIST_OP          shift, and go to state 41
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    ';'  reduce using rule 48 (or_expression_optative)

    function_call_expression   go to state 56
    or_expression_optative     go to state 124
    or_expression              go to state 125
    and_expression             go to state 58
    equality_expression        go to state 59
    relational_expression      go to state 60
    list_expression            go to state 61
    addition_expression        go to state 62
    multiplication_expression  go to state 63
    simple_value               go to state 64
    constant                   go to state 66


State 119

   29 if_else_statement: RW_IF '(' expression ')' • statement
   30                  | RW_IF '(' expression ')' • statement RW_ELSE statement

    error                  shift, and go to state 190
    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    SIMPLE_TYPE            shift, and go to state 191
    IDENTIFIER             shift, and go to state 35
    RW_FOR                 shift, and go to state 192
    RW_RETURN              shift, and go to state 193
    RW_IF                  shift, and go to state 194
    IO_READ                shift, and go to state 195
    IO_WRITE               shift, and go to state 196
    UNARY_LIST_OP          shift, and go to state 41
    '{'                    shift, and go to state 197
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    block                           go to state 198
    statement                       go to state 126
    for_statement                   go to state 199
    if_else_statement               go to state 200
    expression_statement            go to state 201
    io_statement                    go to state 202
    input_statement                 go to state 203
    output_statement                go to state 204
    return_statement                go to state 205
    expression                      go to state 206
    function_call_expression        go to state 56
    or_expression                   go to state 57
    and_expression                  go to state 58
    equality_expression             go to state 59
    relational_expression           go to state 60
    list_expression                 go to state 61
    addition_expression             go to state 62
    multiplication_expression       go to state 63
    simple_value                    go to state 64
    variable_declaration_statement  go to state 207
    constant                        go to state 66


State 120

   34 input_statement: IO_READ '(' IDENTIFIER ')' • ';'

    ';'  shift, and go to state 127


State 121

   36 output_statement: IO_WRITE '(' LIT_STRING ')' • ';'

    ';'  shift, and go to state 128


State 122

   35 output_statement: IO_WRITE '(' expression ')' • ';'

    ';'  shift, and go to state 129


State 123

   43 function_arguments: function_arguments ',' function_argument •

    ')'  reduce using rule 43 (function_arguments)
    ','  reduce using rule 43 (function_arguments)


State 124

   28 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative • ';' expression_optative ')' statement

    ';'  shift, and go to state 130


State 125

   49 or_expression_optative: or_expression •
   50 or_expression: or_expression • LOGICAL_OP_OR and_expression

    LOGICAL_OP_OR  shift, and go to state 86

    ';'  reduce using rule 49 (or_expression_optative)


State 126

   29 if_else_statement: RW_IF '(' expression ')' statement •
   30                  | RW_IF '(' expression ')' statement • RW_ELSE statement

    RW_ELSE  shift, and go to state 131

    $end         reduce using rule 29 (if_else_statement)
    SIMPLE_TYPE  reduce using rule 29 (if_else_statement)


State 127

   34 input_statement: IO_READ '(' IDENTIFIER ')' ';' •

    $end         reduce using rule 34 (input_statement)
    SIMPLE_TYPE  reduce using rule 34 (input_statement)


State 128

   36 output_statement: IO_WRITE '(' LIT_STRING ')' ';' •

    $end         reduce using rule 36 (output_statement)
    SIMPLE_TYPE  reduce using rule 36 (output_statement)


State 129

   35 output_statement: IO_WRITE '(' expression ')' ';' •

    $end         reduce using rule 35 (output_statement)
    SIMPLE_TYPE  reduce using rule 35 (output_statement)


State 130

   28 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' • expression_optative ')' statement

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    IDENTIFIER             shift, and go to state 157
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    ')'  reduce using rule 46 (expression_optative)

    expression                 go to state 208
    function_call_expression   go to state 162
    expression_optative        go to state 132
    or_expression              go to state 163
    and_expression             go to state 164
    equality_expression        go to state 165
    relational_expression      go to state 166
    list_expression            go to state 167
    addition_expression        go to state 168
    multiplication_expression  go to state 169
    simple_value               go to state 170
    constant                   go to state 171


State 131

   30 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE • statement

    error                  shift, and go to state 30
    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    SIMPLE_TYPE            shift, and go to state 34
    IDENTIFIER             shift, and go to state 35
    RW_FOR                 shift, and go to state 36
    RW_RETURN              shift, and go to state 37
    RW_IF                  shift, and go to state 38
    IO_READ                shift, and go to state 39
    IO_WRITE               shift, and go to state 40
    UNARY_LIST_OP          shift, and go to state 41
    '{'                    shift, and go to state 42
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    block                           go to state 46
    statement                       go to state 133
    for_statement                   go to state 48
    if_else_statement               go to state 49
    expression_statement            go to state 50
    io_statement                    go to state 51
    input_statement                 go to state 52
    output_statement                go to state 53
    return_statement                go to state 54
    expression                      go to state 55
    function_call_expression        go to state 56
    or_expression                   go to state 57
    and_expression                  go to state 58
    equality_expression             go to state 59
    relational_expression           go to state 60
    list_expression                 go to state 61
    addition_expression             go to state 62
    multiplication_expression       go to state 63
    simple_value                    go to state 64
    variable_declaration_statement  go to state 65
    constant                        go to state 66


State 132

   28 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative • ')' statement

    ')'  shift, and go to state 134


State 133

   30 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE statement •

    $end         reduce using rule 30 (if_else_statement)
    SIMPLE_TYPE  reduce using rule 30 (if_else_statement)


State 134

   28 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' • statement

    error                  shift, and go to state 30
    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    SIMPLE_TYPE            shift, and go to state 34
    IDENTIFIER             shift, and go to state 35
    RW_FOR                 shift, and go to state 36
    RW_RETURN              shift, and go to state 37
    RW_IF                  shift, and go to state 38
    IO_READ                shift, and go to state 39
    IO_WRITE               shift, and go to state 40
    UNARY_LIST_OP          shift, and go to state 41
    '{'                    shift, and go to state 42
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    block                           go to state 46
    statement                       go to state 135
    for_statement                   go to state 48
    if_else_statement               go to state 49
    expression_statement            go to state 50
    io_statement                    go to state 51
    input_statement                 go to state 52
    output_statement                go to state 53
    return_statement                go to state 54
    expression                      go to state 55
    function_call_expression        go to state 56
    or_expression                   go to state 57
    and_expression                  go to state 58
    equality_expression             go to state 59
    relational_expression           go to state 60
    list_expression                 go to state 61
    addition_expression             go to state 62
    multiplication_expression       go to state 63
    simple_value                    go to state 64
    variable_declaration_statement  go to state 65
    constant                        go to state 66


State 135

   28 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement •

    $end         reduce using rule 28 (for_statement)
    SIMPLE_TYPE  reduce using rule 28 (for_statement)


State 136

   17 statement: error •

    error                  reduce using rule 17 (statement)
    C_INTEGER              reduce using rule 17 (statement)
    C_FLOAT                reduce using rule 17 (statement)
    C_NIL                  reduce using rule 17 (statement)
    SIMPLE_TYPE            reduce using rule 17 (statement)
    IDENTIFIER             reduce using rule 17 (statement)
    RW_FOR                 reduce using rule 17 (statement)
    RW_RETURN              reduce using rule 17 (statement)
    RW_IF                  reduce using rule 17 (statement)
    IO_READ                reduce using rule 17 (statement)
    IO_WRITE               reduce using rule 17 (statement)
    UNARY_LIST_OP          reduce using rule 17 (statement)
    '{'                    reduce using rule 17 (statement)
    '}'                    reduce using rule 17 (statement)
    '('                    reduce using rule 17 (statement)
    '!'                    reduce using rule 17 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 17 (statement)


State 137

   71 variable_declaration_statement: SIMPLE_TYPE • IDENTIFIER ';'
   72                               | SIMPLE_TYPE • LIST_TYPE IDENTIFIER ';'

    LIST_TYPE   shift, and go to state 209
    IDENTIFIER  shift, and go to state 210


State 138

   28 for_statement: RW_FOR • '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    '('  shift, and go to state 211


State 139

   37 return_statement: RW_RETURN • expression ';'

    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    IDENTIFIER             shift, and go to state 35
    UNARY_LIST_OP          shift, and go to state 41
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    expression                 go to state 212
    function_call_expression   go to state 56
    or_expression              go to state 57
    and_expression             go to state 58
    equality_expression        go to state 59
    relational_expression      go to state 60
    list_expression            go to state 61
    addition_expression        go to state 62
    multiplication_expression  go to state 63
    simple_value               go to state 64
    constant                   go to state 66


State 140

   29 if_else_statement: RW_IF • '(' expression ')' statement
   30                  | RW_IF • '(' expression ')' statement RW_ELSE statement

    '('  shift, and go to state 213


State 141

   34 input_statement: IO_READ • '(' IDENTIFIER ')' ';'

    '('  shift, and go to state 214


State 142

   35 output_statement: IO_WRITE • '(' expression ')' ';'
   36                 | IO_WRITE • '(' LIT_STRING ')' ';'

    '('  shift, and go to state 215


State 143

    7 block: '{' • statements '}'

    error                  shift, and go to state 136
    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    SIMPLE_TYPE            shift, and go to state 137
    IDENTIFIER             shift, and go to state 35
    RW_FOR                 shift, and go to state 138
    RW_RETURN              shift, and go to state 139
    RW_IF                  shift, and go to state 140
    IO_READ                shift, and go to state 141
    IO_WRITE               shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 41
    '{'                    shift, and go to state 143
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    block                           go to state 144
    statements                      go to state 216
    statement                       go to state 81
    for_statement                   go to state 145
    if_else_statement               go to state 146
    expression_statement            go to state 147
    io_statement                    go to state 148
    input_statement                 go to state 149
    output_statement                go to state 150
    return_statement                go to state 151
    expression                      go to state 152
    function_call_expression        go to state 56
    or_expression                   go to state 57
    and_expression                  go to state 58
    equality_expression             go to state 59
    relational_expression           go to state 60
    list_expression                 go to state 61
    addition_expression             go to state 62
    multiplication_expression       go to state 63
    simple_value                    go to state 64
    variable_declaration_statement  go to state 153
    constant                        go to state 66


State 144

   16 statement: block •

    error                  reduce using rule 16 (statement)
    C_INTEGER              reduce using rule 16 (statement)
    C_FLOAT                reduce using rule 16 (statement)
    C_NIL                  reduce using rule 16 (statement)
    SIMPLE_TYPE            reduce using rule 16 (statement)
    IDENTIFIER             reduce using rule 16 (statement)
    RW_FOR                 reduce using rule 16 (statement)
    RW_RETURN              reduce using rule 16 (statement)
    RW_IF                  reduce using rule 16 (statement)
    IO_READ                reduce using rule 16 (statement)
    IO_WRITE               reduce using rule 16 (statement)
    UNARY_LIST_OP          reduce using rule 16 (statement)
    '{'                    reduce using rule 16 (statement)
    '}'                    reduce using rule 16 (statement)
    '('                    reduce using rule 16 (statement)
    '!'                    reduce using rule 16 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 16 (statement)


State 145

   14 statement: for_statement •

    error                  reduce using rule 14 (statement)
    C_INTEGER              reduce using rule 14 (statement)
    C_FLOAT                reduce using rule 14 (statement)
    C_NIL                  reduce using rule 14 (statement)
    SIMPLE_TYPE            reduce using rule 14 (statement)
    IDENTIFIER             reduce using rule 14 (statement)
    RW_FOR                 reduce using rule 14 (statement)
    RW_RETURN              reduce using rule 14 (statement)
    RW_IF                  reduce using rule 14 (statement)
    IO_READ                reduce using rule 14 (statement)
    IO_WRITE               reduce using rule 14 (statement)
    UNARY_LIST_OP          reduce using rule 14 (statement)
    '{'                    reduce using rule 14 (statement)
    '}'                    reduce using rule 14 (statement)
    '('                    reduce using rule 14 (statement)
    '!'                    reduce using rule 14 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 14 (statement)


State 146

   15 statement: if_else_statement •

    error                  reduce using rule 15 (statement)
    C_INTEGER              reduce using rule 15 (statement)
    C_FLOAT                reduce using rule 15 (statement)
    C_NIL                  reduce using rule 15 (statement)
    SIMPLE_TYPE            reduce using rule 15 (statement)
    IDENTIFIER             reduce using rule 15 (statement)
    RW_FOR                 reduce using rule 15 (statement)
    RW_RETURN              reduce using rule 15 (statement)
    RW_IF                  reduce using rule 15 (statement)
    IO_READ                reduce using rule 15 (statement)
    IO_WRITE               reduce using rule 15 (statement)
    UNARY_LIST_OP          reduce using rule 15 (statement)
    '{'                    reduce using rule 15 (statement)
    '}'                    reduce using rule 15 (statement)
    '('                    reduce using rule 15 (statement)
    '!'                    reduce using rule 15 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 15 (statement)


State 147

   10 statement: expression_statement •

    error                  reduce using rule 10 (statement)
    C_INTEGER              reduce using rule 10 (statement)
    C_FLOAT                reduce using rule 10 (statement)
    C_NIL                  reduce using rule 10 (statement)
    SIMPLE_TYPE            reduce using rule 10 (statement)
    IDENTIFIER             reduce using rule 10 (statement)
    RW_FOR                 reduce using rule 10 (statement)
    RW_RETURN              reduce using rule 10 (statement)
    RW_IF                  reduce using rule 10 (statement)
    IO_READ                reduce using rule 10 (statement)
    IO_WRITE               reduce using rule 10 (statement)
    UNARY_LIST_OP          reduce using rule 10 (statement)
    '{'                    reduce using rule 10 (statement)
    '}'                    reduce using rule 10 (statement)
    '('                    reduce using rule 10 (statement)
    '!'                    reduce using rule 10 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 10 (statement)


State 148

   11 statement: io_statement •

    error                  reduce using rule 11 (statement)
    C_INTEGER              reduce using rule 11 (statement)
    C_FLOAT                reduce using rule 11 (statement)
    C_NIL                  reduce using rule 11 (statement)
    SIMPLE_TYPE            reduce using rule 11 (statement)
    IDENTIFIER             reduce using rule 11 (statement)
    RW_FOR                 reduce using rule 11 (statement)
    RW_RETURN              reduce using rule 11 (statement)
    RW_IF                  reduce using rule 11 (statement)
    IO_READ                reduce using rule 11 (statement)
    IO_WRITE               reduce using rule 11 (statement)
    UNARY_LIST_OP          reduce using rule 11 (statement)
    '{'                    reduce using rule 11 (statement)
    '}'                    reduce using rule 11 (statement)
    '('                    reduce using rule 11 (statement)
    '!'                    reduce using rule 11 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 11 (statement)


State 149

   32 io_statement: input_statement •

    error                  reduce using rule 32 (io_statement)
    C_INTEGER              reduce using rule 32 (io_statement)
    C_FLOAT                reduce using rule 32 (io_statement)
    C_NIL                  reduce using rule 32 (io_statement)
    SIMPLE_TYPE            reduce using rule 32 (io_statement)
    IDENTIFIER             reduce using rule 32 (io_statement)
    RW_FOR                 reduce using rule 32 (io_statement)
    RW_RETURN              reduce using rule 32 (io_statement)
    RW_IF                  reduce using rule 32 (io_statement)
    IO_READ                reduce using rule 32 (io_statement)
    IO_WRITE               reduce using rule 32 (io_statement)
    UNARY_LIST_OP          reduce using rule 32 (io_statement)
    '{'                    reduce using rule 32 (io_statement)
    '}'                    reduce using rule 32 (io_statement)
    '('                    reduce using rule 32 (io_statement)
    '!'                    reduce using rule 32 (io_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 32 (io_statement)


State 150

   33 io_statement: output_statement •

    error                  reduce using rule 33 (io_statement)
    C_INTEGER              reduce using rule 33 (io_statement)
    C_FLOAT                reduce using rule 33 (io_statement)
    C_NIL                  reduce using rule 33 (io_statement)
    SIMPLE_TYPE            reduce using rule 33 (io_statement)
    IDENTIFIER             reduce using rule 33 (io_statement)
    RW_FOR                 reduce using rule 33 (io_statement)
    RW_RETURN              reduce using rule 33 (io_statement)
    RW_IF                  reduce using rule 33 (io_statement)
    IO_READ                reduce using rule 33 (io_statement)
    IO_WRITE               reduce using rule 33 (io_statement)
    UNARY_LIST_OP          reduce using rule 33 (io_statement)
    '{'                    reduce using rule 33 (io_statement)
    '}'                    reduce using rule 33 (io_statement)
    '('                    reduce using rule 33 (io_statement)
    '!'                    reduce using rule 33 (io_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 33 (io_statement)


State 151

   12 statement: return_statement •

    error                  reduce using rule 12 (statement)
    C_INTEGER              reduce using rule 12 (statement)
    C_FLOAT                reduce using rule 12 (statement)
    C_NIL                  reduce using rule 12 (statement)
    SIMPLE_TYPE            reduce using rule 12 (statement)
    IDENTIFIER             reduce using rule 12 (statement)
    RW_FOR                 reduce using rule 12 (statement)
    RW_RETURN              reduce using rule 12 (statement)
    RW_IF                  reduce using rule 12 (statement)
    IO_READ                reduce using rule 12 (statement)
    IO_WRITE               reduce using rule 12 (statement)
    UNARY_LIST_OP          reduce using rule 12 (statement)
    '{'                    reduce using rule 12 (statement)
    '}'                    reduce using rule 12 (statement)
    '('                    reduce using rule 12 (statement)
    '!'                    reduce using rule 12 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 12 (statement)


State 152

   31 expression_statement: expression • ';'

    ';'  shift, and go to state 217


State 153

   13 statement: variable_declaration_statement •

    error                  reduce using rule 13 (statement)
    C_INTEGER              reduce using rule 13 (statement)
    C_FLOAT                reduce using rule 13 (statement)
    C_NIL                  reduce using rule 13 (statement)
    SIMPLE_TYPE            reduce using rule 13 (statement)
    IDENTIFIER             reduce using rule 13 (statement)
    RW_FOR                 reduce using rule 13 (statement)
    RW_RETURN              reduce using rule 13 (statement)
    RW_IF                  reduce using rule 13 (statement)
    IO_READ                reduce using rule 13 (statement)
    IO_WRITE               reduce using rule 13 (statement)
    UNARY_LIST_OP          reduce using rule 13 (statement)
    '{'                    reduce using rule 13 (statement)
    '}'                    reduce using rule 13 (statement)
    '('                    reduce using rule 13 (statement)
    '!'                    reduce using rule 13 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 13 (statement)


State 154

   73 constant: C_INTEGER •

    BINARY_LIST_OP               reduce using rule 73 (constant)
    ')'                          reduce using rule 73 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 73 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 73 (constant)
    RELATIONAL_OP                reduce using rule 73 (constant)
    EQUALITY_OP                  reduce using rule 73 (constant)
    LOGICAL_OP_OR                reduce using rule 73 (constant)
    LOGICAL_OP_AND               reduce using rule 73 (constant)


State 155

   74 constant: C_FLOAT •

    BINARY_LIST_OP               reduce using rule 74 (constant)
    ')'                          reduce using rule 74 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 74 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 74 (constant)
    RELATIONAL_OP                reduce using rule 74 (constant)
    EQUALITY_OP                  reduce using rule 74 (constant)
    LOGICAL_OP_OR                reduce using rule 74 (constant)
    LOGICAL_OP_AND               reduce using rule 74 (constant)


State 156

   75 constant: C_NIL •

    BINARY_LIST_OP               reduce using rule 75 (constant)
    ')'                          reduce using rule 75 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 75 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 75 (constant)
    RELATIONAL_OP                reduce using rule 75 (constant)
    EQUALITY_OP                  reduce using rule 75 (constant)
    LOGICAL_OP_OR                reduce using rule 75 (constant)
    LOGICAL_OP_AND               reduce using rule 75 (constant)


State 157

   38 expression: IDENTIFIER • '=' expression
   40 function_call_expression: IDENTIFIER • '(' function_arguments_optative ')'
   65 simple_value: IDENTIFIER •

    '('  shift, and go to state 218
    '='  shift, and go to state 219

    BINARY_LIST_OP               reduce using rule 65 (simple_value)
    ')'                          reduce using rule 65 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 65 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 65 (simple_value)
    RELATIONAL_OP                reduce using rule 65 (simple_value)
    EQUALITY_OP                  reduce using rule 65 (simple_value)
    LOGICAL_OP_OR                reduce using rule 65 (simple_value)
    LOGICAL_OP_AND               reduce using rule 65 (simple_value)


State 158

   68 simple_value: UNARY_LIST_OP • simple_value

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    IDENTIFIER             shift, and go to state 220
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    function_call_expression  go to state 162
    simple_value              go to state 221
    constant                  go to state 171


State 159

   69 simple_value: '(' • expression ')'

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    IDENTIFIER             shift, and go to state 157
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    expression                 go to state 222
    function_call_expression   go to state 162
    or_expression              go to state 163
    and_expression             go to state 164
    equality_expression        go to state 165
    relational_expression      go to state 166
    list_expression            go to state 167
    addition_expression        go to state 168
    multiplication_expression  go to state 169
    simple_value               go to state 170
    constant                   go to state 171


State 160

   67 simple_value: '!' • simple_value

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    IDENTIFIER             shift, and go to state 220
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    function_call_expression  go to state 162
    simple_value              go to state 223
    constant                  go to state 171


State 161

   66 simple_value: ARITMETIC_OP_ADDITIVE • simple_value

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    IDENTIFIER             shift, and go to state 220
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    function_call_expression  go to state 162
    simple_value              go to state 224
    constant                  go to state 171


State 162

   70 simple_value: function_call_expression •

    BINARY_LIST_OP               reduce using rule 70 (simple_value)
    ')'                          reduce using rule 70 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 70 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 70 (simple_value)
    RELATIONAL_OP                reduce using rule 70 (simple_value)
    EQUALITY_OP                  reduce using rule 70 (simple_value)
    LOGICAL_OP_OR                reduce using rule 70 (simple_value)
    LOGICAL_OP_AND               reduce using rule 70 (simple_value)


State 163

   39 expression: or_expression •
   50 or_expression: or_expression • LOGICAL_OP_OR and_expression

    LOGICAL_OP_OR  shift, and go to state 225

    ')'  reduce using rule 39 (expression)


State 164

   51 or_expression: and_expression •
   52 and_expression: and_expression • LOGICAL_OP_AND equality_expression

    LOGICAL_OP_AND  shift, and go to state 226

    ')'            reduce using rule 51 (or_expression)
    LOGICAL_OP_OR  reduce using rule 51 (or_expression)


State 165

   53 and_expression: equality_expression •
   54 equality_expression: equality_expression • EQUALITY_OP relational_expression

    EQUALITY_OP  shift, and go to state 227

    ')'             reduce using rule 53 (and_expression)
    LOGICAL_OP_OR   reduce using rule 53 (and_expression)
    LOGICAL_OP_AND  reduce using rule 53 (and_expression)


State 166

   55 equality_expression: relational_expression •
   56 relational_expression: relational_expression • RELATIONAL_OP list_expression

    RELATIONAL_OP  shift, and go to state 228

    ')'             reduce using rule 55 (equality_expression)
    EQUALITY_OP     reduce using rule 55 (equality_expression)
    LOGICAL_OP_OR   reduce using rule 55 (equality_expression)
    LOGICAL_OP_AND  reduce using rule 55 (equality_expression)


State 167

   57 relational_expression: list_expression •
   58 list_expression: list_expression • BINARY_LIST_OP addition_expression

    BINARY_LIST_OP  shift, and go to state 229

    ')'             reduce using rule 57 (relational_expression)
    RELATIONAL_OP   reduce using rule 57 (relational_expression)
    EQUALITY_OP     reduce using rule 57 (relational_expression)
    LOGICAL_OP_OR   reduce using rule 57 (relational_expression)
    LOGICAL_OP_AND  reduce using rule 57 (relational_expression)


State 168

   59 list_expression: addition_expression •
   60 addition_expression: addition_expression • ARITMETIC_OP_ADDITIVE multiplication_expression

    ARITMETIC_OP_ADDITIVE  shift, and go to state 230

    BINARY_LIST_OP  reduce using rule 59 (list_expression)
    ')'             reduce using rule 59 (list_expression)
    RELATIONAL_OP   reduce using rule 59 (list_expression)
    EQUALITY_OP     reduce using rule 59 (list_expression)
    LOGICAL_OP_OR   reduce using rule 59 (list_expression)
    LOGICAL_OP_AND  reduce using rule 59 (list_expression)


State 169

   61 addition_expression: multiplication_expression •
   62 multiplication_expression: multiplication_expression • ARITMETIC_OP_MULTIPLICATIVE simple_value

    ARITMETIC_OP_MULTIPLICATIVE  shift, and go to state 231

    BINARY_LIST_OP         reduce using rule 61 (addition_expression)
    ')'                    reduce using rule 61 (addition_expression)
    ARITMETIC_OP_ADDITIVE  reduce using rule 61 (addition_expression)
    RELATIONAL_OP          reduce using rule 61 (addition_expression)
    EQUALITY_OP            reduce using rule 61 (addition_expression)
    LOGICAL_OP_OR          reduce using rule 61 (addition_expression)
    LOGICAL_OP_AND         reduce using rule 61 (addition_expression)


State 170

   63 multiplication_expression: simple_value •

    BINARY_LIST_OP               reduce using rule 63 (multiplication_expression)
    ')'                          reduce using rule 63 (multiplication_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 63 (multiplication_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 63 (multiplication_expression)
    RELATIONAL_OP                reduce using rule 63 (multiplication_expression)
    EQUALITY_OP                  reduce using rule 63 (multiplication_expression)
    LOGICAL_OP_OR                reduce using rule 63 (multiplication_expression)
    LOGICAL_OP_AND               reduce using rule 63 (multiplication_expression)


State 171

   64 simple_value: constant •

    BINARY_LIST_OP               reduce using rule 64 (simple_value)
    ')'                          reduce using rule 64 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 64 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 64 (simple_value)
    RELATIONAL_OP                reduce using rule 64 (simple_value)
    EQUALITY_OP                  reduce using rule 64 (simple_value)
    LOGICAL_OP_OR                reduce using rule 64 (simple_value)
    LOGICAL_OP_AND               reduce using rule 64 (simple_value)


State 172

   73 constant: C_INTEGER •

    BINARY_LIST_OP               reduce using rule 73 (constant)
    ')'                          reduce using rule 73 (constant)
    ','                          reduce using rule 73 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 73 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 73 (constant)
    RELATIONAL_OP                reduce using rule 73 (constant)
    EQUALITY_OP                  reduce using rule 73 (constant)
    LOGICAL_OP_OR                reduce using rule 73 (constant)
    LOGICAL_OP_AND               reduce using rule 73 (constant)


State 173

   74 constant: C_FLOAT •

    BINARY_LIST_OP               reduce using rule 74 (constant)
    ')'                          reduce using rule 74 (constant)
    ','                          reduce using rule 74 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 74 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 74 (constant)
    RELATIONAL_OP                reduce using rule 74 (constant)
    EQUALITY_OP                  reduce using rule 74 (constant)
    LOGICAL_OP_OR                reduce using rule 74 (constant)
    LOGICAL_OP_AND               reduce using rule 74 (constant)


State 174

   75 constant: C_NIL •

    BINARY_LIST_OP               reduce using rule 75 (constant)
    ')'                          reduce using rule 75 (constant)
    ','                          reduce using rule 75 (constant)
    ARITMETIC_OP_ADDITIVE        reduce using rule 75 (constant)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 75 (constant)
    RELATIONAL_OP                reduce using rule 75 (constant)
    EQUALITY_OP                  reduce using rule 75 (constant)
    LOGICAL_OP_OR                reduce using rule 75 (constant)
    LOGICAL_OP_AND               reduce using rule 75 (constant)


State 175

   38 expression: IDENTIFIER • '=' expression
   40 function_call_expression: IDENTIFIER • '(' function_arguments_optative ')'
   65 simple_value: IDENTIFIER •

    '('  shift, and go to state 232
    '='  shift, and go to state 233

    BINARY_LIST_OP               reduce using rule 65 (simple_value)
    ')'                          reduce using rule 65 (simple_value)
    ','                          reduce using rule 65 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 65 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 65 (simple_value)
    RELATIONAL_OP                reduce using rule 65 (simple_value)
    EQUALITY_OP                  reduce using rule 65 (simple_value)
    LOGICAL_OP_OR                reduce using rule 65 (simple_value)
    LOGICAL_OP_AND               reduce using rule 65 (simple_value)


State 176

   68 simple_value: UNARY_LIST_OP • simple_value

    C_INTEGER              shift, and go to state 172
    C_FLOAT                shift, and go to state 173
    C_NIL                  shift, and go to state 174
    IDENTIFIER             shift, and go to state 234
    UNARY_LIST_OP          shift, and go to state 176
    '('                    shift, and go to state 177
    '!'                    shift, and go to state 178
    ARITMETIC_OP_ADDITIVE  shift, and go to state 179

    function_call_expression  go to state 180
    simple_value              go to state 235
    constant                  go to state 189


State 177

   69 simple_value: '(' • expression ')'

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    IDENTIFIER             shift, and go to state 157
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    expression                 go to state 236
    function_call_expression   go to state 162
    or_expression              go to state 163
    and_expression             go to state 164
    equality_expression        go to state 165
    relational_expression      go to state 166
    list_expression            go to state 167
    addition_expression        go to state 168
    multiplication_expression  go to state 169
    simple_value               go to state 170
    constant                   go to state 171


State 178

   67 simple_value: '!' • simple_value

    C_INTEGER              shift, and go to state 172
    C_FLOAT                shift, and go to state 173
    C_NIL                  shift, and go to state 174
    IDENTIFIER             shift, and go to state 234
    UNARY_LIST_OP          shift, and go to state 176
    '('                    shift, and go to state 177
    '!'                    shift, and go to state 178
    ARITMETIC_OP_ADDITIVE  shift, and go to state 179

    function_call_expression  go to state 180
    simple_value              go to state 237
    constant                  go to state 189


State 179

   66 simple_value: ARITMETIC_OP_ADDITIVE • simple_value

    C_INTEGER              shift, and go to state 172
    C_FLOAT                shift, and go to state 173
    C_NIL                  shift, and go to state 174
    IDENTIFIER             shift, and go to state 234
    UNARY_LIST_OP          shift, and go to state 176
    '('                    shift, and go to state 177
    '!'                    shift, and go to state 178
    ARITMETIC_OP_ADDITIVE  shift, and go to state 179

    function_call_expression  go to state 180
    simple_value              go to state 238
    constant                  go to state 189


State 180

   70 simple_value: function_call_expression •

    BINARY_LIST_OP               reduce using rule 70 (simple_value)
    ')'                          reduce using rule 70 (simple_value)
    ','                          reduce using rule 70 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 70 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 70 (simple_value)
    RELATIONAL_OP                reduce using rule 70 (simple_value)
    EQUALITY_OP                  reduce using rule 70 (simple_value)
    LOGICAL_OP_OR                reduce using rule 70 (simple_value)
    LOGICAL_OP_AND               reduce using rule 70 (simple_value)


State 181

   39 expression: or_expression •
   50 or_expression: or_expression • LOGICAL_OP_OR and_expression

    LOGICAL_OP_OR  shift, and go to state 239

    ')'  reduce using rule 39 (expression)
    ','  reduce using rule 39 (expression)


State 182

   51 or_expression: and_expression •
   52 and_expression: and_expression • LOGICAL_OP_AND equality_expression

    LOGICAL_OP_AND  shift, and go to state 240

    ')'            reduce using rule 51 (or_expression)
    ','            reduce using rule 51 (or_expression)
    LOGICAL_OP_OR  reduce using rule 51 (or_expression)


State 183

   53 and_expression: equality_expression •
   54 equality_expression: equality_expression • EQUALITY_OP relational_expression

    EQUALITY_OP  shift, and go to state 241

    ')'             reduce using rule 53 (and_expression)
    ','             reduce using rule 53 (and_expression)
    LOGICAL_OP_OR   reduce using rule 53 (and_expression)
    LOGICAL_OP_AND  reduce using rule 53 (and_expression)


State 184

   55 equality_expression: relational_expression •
   56 relational_expression: relational_expression • RELATIONAL_OP list_expression

    RELATIONAL_OP  shift, and go to state 242

    ')'             reduce using rule 55 (equality_expression)
    ','             reduce using rule 55 (equality_expression)
    EQUALITY_OP     reduce using rule 55 (equality_expression)
    LOGICAL_OP_OR   reduce using rule 55 (equality_expression)
    LOGICAL_OP_AND  reduce using rule 55 (equality_expression)


State 185

   57 relational_expression: list_expression •
   58 list_expression: list_expression • BINARY_LIST_OP addition_expression

    BINARY_LIST_OP  shift, and go to state 243

    ')'             reduce using rule 57 (relational_expression)
    ','             reduce using rule 57 (relational_expression)
    RELATIONAL_OP   reduce using rule 57 (relational_expression)
    EQUALITY_OP     reduce using rule 57 (relational_expression)
    LOGICAL_OP_OR   reduce using rule 57 (relational_expression)
    LOGICAL_OP_AND  reduce using rule 57 (relational_expression)


State 186

   59 list_expression: addition_expression •
   60 addition_expression: addition_expression • ARITMETIC_OP_ADDITIVE multiplication_expression

    ARITMETIC_OP_ADDITIVE  shift, and go to state 244

    BINARY_LIST_OP  reduce using rule 59 (list_expression)
    ')'             reduce using rule 59 (list_expression)
    ','             reduce using rule 59 (list_expression)
    RELATIONAL_OP   reduce using rule 59 (list_expression)
    EQUALITY_OP     reduce using rule 59 (list_expression)
    LOGICAL_OP_OR   reduce using rule 59 (list_expression)
    LOGICAL_OP_AND  reduce using rule 59 (list_expression)


State 187

   61 addition_expression: multiplication_expression •
   62 multiplication_expression: multiplication_expression • ARITMETIC_OP_MULTIPLICATIVE simple_value

    ARITMETIC_OP_MULTIPLICATIVE  shift, and go to state 245

    BINARY_LIST_OP         reduce using rule 61 (addition_expression)
    ')'                    reduce using rule 61 (addition_expression)
    ','                    reduce using rule 61 (addition_expression)
    ARITMETIC_OP_ADDITIVE  reduce using rule 61 (addition_expression)
    RELATIONAL_OP          reduce using rule 61 (addition_expression)
    EQUALITY_OP            reduce using rule 61 (addition_expression)
    LOGICAL_OP_OR          reduce using rule 61 (addition_expression)
    LOGICAL_OP_AND         reduce using rule 61 (addition_expression)


State 188

   63 multiplication_expression: simple_value •

    BINARY_LIST_OP               reduce using rule 63 (multiplication_expression)
    ')'                          reduce using rule 63 (multiplication_expression)
    ','                          reduce using rule 63 (multiplication_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 63 (multiplication_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 63 (multiplication_expression)
    RELATIONAL_OP                reduce using rule 63 (multiplication_expression)
    EQUALITY_OP                  reduce using rule 63 (multiplication_expression)
    LOGICAL_OP_OR                reduce using rule 63 (multiplication_expression)
    LOGICAL_OP_AND               reduce using rule 63 (multiplication_expression)


State 189

   64 simple_value: constant •

    BINARY_LIST_OP               reduce using rule 64 (simple_value)
    ')'                          reduce using rule 64 (simple_value)
    ','                          reduce using rule 64 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 64 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 64 (simple_value)
    RELATIONAL_OP                reduce using rule 64 (simple_value)
    EQUALITY_OP                  reduce using rule 64 (simple_value)
    LOGICAL_OP_OR                reduce using rule 64 (simple_value)
    LOGICAL_OP_AND               reduce using rule 64 (simple_value)


State 190

   17 statement: error •

    $end         reduce using rule 17 (statement)
    SIMPLE_TYPE  reduce using rule 17 (statement)
    RW_ELSE      reduce using rule 17 (statement)


State 191

   71 variable_declaration_statement: SIMPLE_TYPE • IDENTIFIER ';'
   72                               | SIMPLE_TYPE • LIST_TYPE IDENTIFIER ';'

    LIST_TYPE   shift, and go to state 246
    IDENTIFIER  shift, and go to state 247


State 192

   28 for_statement: RW_FOR • '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    '('  shift, and go to state 248


State 193

   37 return_statement: RW_RETURN • expression ';'

    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    IDENTIFIER             shift, and go to state 35
    UNARY_LIST_OP          shift, and go to state 41
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    expression                 go to state 249
    function_call_expression   go to state 56
    or_expression              go to state 57
    and_expression             go to state 58
    equality_expression        go to state 59
    relational_expression      go to state 60
    list_expression            go to state 61
    addition_expression        go to state 62
    multiplication_expression  go to state 63
    simple_value               go to state 64
    constant                   go to state 66


State 194

   29 if_else_statement: RW_IF • '(' expression ')' statement
   30                  | RW_IF • '(' expression ')' statement RW_ELSE statement

    '('  shift, and go to state 250


State 195

   34 input_statement: IO_READ • '(' IDENTIFIER ')' ';'

    '('  shift, and go to state 251


State 196

   35 output_statement: IO_WRITE • '(' expression ')' ';'
   36                 | IO_WRITE • '(' LIT_STRING ')' ';'

    '('  shift, and go to state 252


State 197

    7 block: '{' • statements '}'

    error                  shift, and go to state 136
    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    SIMPLE_TYPE            shift, and go to state 137
    IDENTIFIER             shift, and go to state 35
    RW_FOR                 shift, and go to state 138
    RW_RETURN              shift, and go to state 139
    RW_IF                  shift, and go to state 140
    IO_READ                shift, and go to state 141
    IO_WRITE               shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 41
    '{'                    shift, and go to state 143
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    block                           go to state 144
    statements                      go to state 253
    statement                       go to state 81
    for_statement                   go to state 145
    if_else_statement               go to state 146
    expression_statement            go to state 147
    io_statement                    go to state 148
    input_statement                 go to state 149
    output_statement                go to state 150
    return_statement                go to state 151
    expression                      go to state 152
    function_call_expression        go to state 56
    or_expression                   go to state 57
    and_expression                  go to state 58
    equality_expression             go to state 59
    relational_expression           go to state 60
    list_expression                 go to state 61
    addition_expression             go to state 62
    multiplication_expression       go to state 63
    simple_value                    go to state 64
    variable_declaration_statement  go to state 153
    constant                        go to state 66


State 198

   16 statement: block •

    $end         reduce using rule 16 (statement)
    SIMPLE_TYPE  reduce using rule 16 (statement)
    RW_ELSE      reduce using rule 16 (statement)


State 199

   14 statement: for_statement •

    $end         reduce using rule 14 (statement)
    SIMPLE_TYPE  reduce using rule 14 (statement)
    RW_ELSE      reduce using rule 14 (statement)


State 200

   15 statement: if_else_statement •

    $end         reduce using rule 15 (statement)
    SIMPLE_TYPE  reduce using rule 15 (statement)
    RW_ELSE      reduce using rule 15 (statement)


State 201

   10 statement: expression_statement •

    $end         reduce using rule 10 (statement)
    SIMPLE_TYPE  reduce using rule 10 (statement)
    RW_ELSE      reduce using rule 10 (statement)


State 202

   11 statement: io_statement •

    $end         reduce using rule 11 (statement)
    SIMPLE_TYPE  reduce using rule 11 (statement)
    RW_ELSE      reduce using rule 11 (statement)


State 203

   32 io_statement: input_statement •

    $end         reduce using rule 32 (io_statement)
    SIMPLE_TYPE  reduce using rule 32 (io_statement)
    RW_ELSE      reduce using rule 32 (io_statement)


State 204

   33 io_statement: output_statement •

    $end         reduce using rule 33 (io_statement)
    SIMPLE_TYPE  reduce using rule 33 (io_statement)
    RW_ELSE      reduce using rule 33 (io_statement)


State 205

   12 statement: return_statement •

    $end         reduce using rule 12 (statement)
    SIMPLE_TYPE  reduce using rule 12 (statement)
    RW_ELSE      reduce using rule 12 (statement)


State 206

   31 expression_statement: expression • ';'

    ';'  shift, and go to state 254


State 207

   13 statement: variable_declaration_statement •

    $end         reduce using rule 13 (statement)
    SIMPLE_TYPE  reduce using rule 13 (statement)
    RW_ELSE      reduce using rule 13 (statement)


State 208

   47 expression_optative: expression •

    ')'  reduce using rule 47 (expression_optative)


State 209

   72 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE • IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 255


State 210

   71 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 256


State 211

   28 for_statement: RW_FOR '(' • expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    IDENTIFIER             shift, and go to state 35
    UNARY_LIST_OP          shift, and go to state 41
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    ';'  reduce using rule 46 (expression_optative)

    expression                 go to state 99
    function_call_expression   go to state 56
    expression_optative        go to state 257
    or_expression              go to state 57
    and_expression             go to state 58
    equality_expression        go to state 59
    relational_expression      go to state 60
    list_expression            go to state 61
    addition_expression        go to state 62
    multiplication_expression  go to state 63
    simple_value               go to state 64
    constant                   go to state 66


State 212

   37 return_statement: RW_RETURN expression • ';'

    ';'  shift, and go to state 258


State 213

   29 if_else_statement: RW_IF '(' • expression ')' statement
   30                  | RW_IF '(' • expression ')' statement RW_ELSE statement

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    IDENTIFIER             shift, and go to state 157
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    expression                 go to state 259
    function_call_expression   go to state 162
    or_expression              go to state 163
    and_expression             go to state 164
    equality_expression        go to state 165
    relational_expression      go to state 166
    list_expression            go to state 167
    addition_expression        go to state 168
    multiplication_expression  go to state 169
    simple_value               go to state 170
    constant                   go to state 171


State 214

   34 input_statement: IO_READ '(' • IDENTIFIER ')' ';'

    IDENTIFIER  shift, and go to state 260


State 215

   35 output_statement: IO_WRITE '(' • expression ')' ';'
   36                 | IO_WRITE '(' • LIT_STRING ')' ';'

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    LIT_STRING             shift, and go to state 261
    IDENTIFIER             shift, and go to state 157
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    expression                 go to state 262
    function_call_expression   go to state 162
    or_expression              go to state 163
    and_expression             go to state 164
    equality_expression        go to state 165
    relational_expression      go to state 166
    list_expression            go to state 167
    addition_expression        go to state 168
    multiplication_expression  go to state 169
    simple_value               go to state 170
    constant                   go to state 171


State 216

    7 block: '{' statements • '}'
    8 statements: statements • statement

    error                  shift, and go to state 136
    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    SIMPLE_TYPE            shift, and go to state 137
    IDENTIFIER             shift, and go to state 35
    RW_FOR                 shift, and go to state 138
    RW_RETURN              shift, and go to state 139
    RW_IF                  shift, and go to state 140
    IO_READ                shift, and go to state 141
    IO_WRITE               shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 41
    '{'                    shift, and go to state 143
    '}'                    shift, and go to state 263
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    block                           go to state 144
    statement                       go to state 107
    for_statement                   go to state 145
    if_else_statement               go to state 146
    expression_statement            go to state 147
    io_statement                    go to state 148
    input_statement                 go to state 149
    output_statement                go to state 150
    return_statement                go to state 151
    expression                      go to state 152
    function_call_expression        go to state 56
    or_expression                   go to state 57
    and_expression                  go to state 58
    equality_expression             go to state 59
    relational_expression           go to state 60
    list_expression                 go to state 61
    addition_expression             go to state 62
    multiplication_expression       go to state 63
    simple_value                    go to state 64
    variable_declaration_statement  go to state 153
    constant                        go to state 66


State 217

   31 expression_statement: expression ';' •

    error                  reduce using rule 31 (expression_statement)
    C_INTEGER              reduce using rule 31 (expression_statement)
    C_FLOAT                reduce using rule 31 (expression_statement)
    C_NIL                  reduce using rule 31 (expression_statement)
    SIMPLE_TYPE            reduce using rule 31 (expression_statement)
    IDENTIFIER             reduce using rule 31 (expression_statement)
    RW_FOR                 reduce using rule 31 (expression_statement)
    RW_RETURN              reduce using rule 31 (expression_statement)
    RW_IF                  reduce using rule 31 (expression_statement)
    IO_READ                reduce using rule 31 (expression_statement)
    IO_WRITE               reduce using rule 31 (expression_statement)
    UNARY_LIST_OP          reduce using rule 31 (expression_statement)
    '{'                    reduce using rule 31 (expression_statement)
    '}'                    reduce using rule 31 (expression_statement)
    '('                    reduce using rule 31 (expression_statement)
    '!'                    reduce using rule 31 (expression_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 31 (expression_statement)


State 218

   40 function_call_expression: IDENTIFIER '(' • function_arguments_optative ')'

    C_INTEGER              shift, and go to state 172
    C_FLOAT                shift, and go to state 173
    C_NIL                  shift, and go to state 174
    IDENTIFIER             shift, and go to state 175
    UNARY_LIST_OP          shift, and go to state 176
    '('                    shift, and go to state 177
    '!'                    shift, and go to state 178
    ARITMETIC_OP_ADDITIVE  shift, and go to state 179

    ')'  reduce using rule 41 (function_arguments_optative)

    expression                   go to state 94
    function_call_expression     go to state 180
    function_arguments_optative  go to state 264
    function_arguments           go to state 96
    function_argument            go to state 97
    or_expression                go to state 181
    and_expression               go to state 182
    equality_expression          go to state 183
    relational_expression        go to state 184
    list_expression              go to state 185
    addition_expression          go to state 186
    multiplication_expression    go to state 187
    simple_value                 go to state 188
    constant                     go to state 189


State 219

   38 expression: IDENTIFIER '=' • expression

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    IDENTIFIER             shift, and go to state 157
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    expression                 go to state 265
    function_call_expression   go to state 162
    or_expression              go to state 163
    and_expression             go to state 164
    equality_expression        go to state 165
    relational_expression      go to state 166
    list_expression            go to state 167
    addition_expression        go to state 168
    multiplication_expression  go to state 169
    simple_value               go to state 170
    constant                   go to state 171


State 220

   40 function_call_expression: IDENTIFIER • '(' function_arguments_optative ')'
   65 simple_value: IDENTIFIER •

    '('  shift, and go to state 218

    BINARY_LIST_OP               reduce using rule 65 (simple_value)
    ')'                          reduce using rule 65 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 65 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 65 (simple_value)
    RELATIONAL_OP                reduce using rule 65 (simple_value)
    EQUALITY_OP                  reduce using rule 65 (simple_value)
    LOGICAL_OP_OR                reduce using rule 65 (simple_value)
    LOGICAL_OP_AND               reduce using rule 65 (simple_value)


State 221

   68 simple_value: UNARY_LIST_OP simple_value •

    BINARY_LIST_OP               reduce using rule 68 (simple_value)
    ')'                          reduce using rule 68 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 68 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 68 (simple_value)
    RELATIONAL_OP                reduce using rule 68 (simple_value)
    EQUALITY_OP                  reduce using rule 68 (simple_value)
    LOGICAL_OP_OR                reduce using rule 68 (simple_value)
    LOGICAL_OP_AND               reduce using rule 68 (simple_value)


State 222

   69 simple_value: '(' expression • ')'

    ')'  shift, and go to state 266


State 223

   67 simple_value: '!' simple_value •

    BINARY_LIST_OP               reduce using rule 67 (simple_value)
    ')'                          reduce using rule 67 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 67 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 67 (simple_value)
    RELATIONAL_OP                reduce using rule 67 (simple_value)
    EQUALITY_OP                  reduce using rule 67 (simple_value)
    LOGICAL_OP_OR                reduce using rule 67 (simple_value)
    LOGICAL_OP_AND               reduce using rule 67 (simple_value)


State 224

   66 simple_value: ARITMETIC_OP_ADDITIVE simple_value •

    BINARY_LIST_OP               reduce using rule 66 (simple_value)
    ')'                          reduce using rule 66 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 66 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 66 (simple_value)
    RELATIONAL_OP                reduce using rule 66 (simple_value)
    EQUALITY_OP                  reduce using rule 66 (simple_value)
    LOGICAL_OP_OR                reduce using rule 66 (simple_value)
    LOGICAL_OP_AND               reduce using rule 66 (simple_value)


State 225

   50 or_expression: or_expression LOGICAL_OP_OR • and_expression

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    IDENTIFIER             shift, and go to state 220
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    function_call_expression   go to state 162
    and_expression             go to state 267
    equality_expression        go to state 165
    relational_expression      go to state 166
    list_expression            go to state 167
    addition_expression        go to state 168
    multiplication_expression  go to state 169
    simple_value               go to state 170
    constant                   go to state 171


State 226

   52 and_expression: and_expression LOGICAL_OP_AND • equality_expression

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    IDENTIFIER             shift, and go to state 220
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    function_call_expression   go to state 162
    equality_expression        go to state 268
    relational_expression      go to state 166
    list_expression            go to state 167
    addition_expression        go to state 168
    multiplication_expression  go to state 169
    simple_value               go to state 170
    constant                   go to state 171


State 227

   54 equality_expression: equality_expression EQUALITY_OP • relational_expression

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    IDENTIFIER             shift, and go to state 220
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    function_call_expression   go to state 162
    relational_expression      go to state 269
    list_expression            go to state 167
    addition_expression        go to state 168
    multiplication_expression  go to state 169
    simple_value               go to state 170
    constant                   go to state 171


State 228

   56 relational_expression: relational_expression RELATIONAL_OP • list_expression

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    IDENTIFIER             shift, and go to state 220
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    function_call_expression   go to state 162
    list_expression            go to state 270
    addition_expression        go to state 168
    multiplication_expression  go to state 169
    simple_value               go to state 170
    constant                   go to state 171


State 229

   58 list_expression: list_expression BINARY_LIST_OP • addition_expression

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    IDENTIFIER             shift, and go to state 220
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    function_call_expression   go to state 162
    addition_expression        go to state 271
    multiplication_expression  go to state 169
    simple_value               go to state 170
    constant                   go to state 171


State 230

   60 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE • multiplication_expression

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    IDENTIFIER             shift, and go to state 220
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    function_call_expression   go to state 162
    multiplication_expression  go to state 272
    simple_value               go to state 170
    constant                   go to state 171


State 231

   62 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE • simple_value

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    IDENTIFIER             shift, and go to state 220
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    function_call_expression  go to state 162
    simple_value              go to state 273
    constant                  go to state 171


State 232

   40 function_call_expression: IDENTIFIER '(' • function_arguments_optative ')'

    C_INTEGER              shift, and go to state 172
    C_FLOAT                shift, and go to state 173
    C_NIL                  shift, and go to state 174
    IDENTIFIER             shift, and go to state 175
    UNARY_LIST_OP          shift, and go to state 176
    '('                    shift, and go to state 177
    '!'                    shift, and go to state 178
    ARITMETIC_OP_ADDITIVE  shift, and go to state 179

    ')'  reduce using rule 41 (function_arguments_optative)

    expression                   go to state 94
    function_call_expression     go to state 180
    function_arguments_optative  go to state 274
    function_arguments           go to state 96
    function_argument            go to state 97
    or_expression                go to state 181
    and_expression               go to state 182
    equality_expression          go to state 183
    relational_expression        go to state 184
    list_expression              go to state 185
    addition_expression          go to state 186
    multiplication_expression    go to state 187
    simple_value                 go to state 188
    constant                     go to state 189


State 233

   38 expression: IDENTIFIER '=' • expression

    C_INTEGER              shift, and go to state 172
    C_FLOAT                shift, and go to state 173
    C_NIL                  shift, and go to state 174
    IDENTIFIER             shift, and go to state 175
    UNARY_LIST_OP          shift, and go to state 176
    '('                    shift, and go to state 177
    '!'                    shift, and go to state 178
    ARITMETIC_OP_ADDITIVE  shift, and go to state 179

    expression                 go to state 275
    function_call_expression   go to state 180
    or_expression              go to state 181
    and_expression             go to state 182
    equality_expression        go to state 183
    relational_expression      go to state 184
    list_expression            go to state 185
    addition_expression        go to state 186
    multiplication_expression  go to state 187
    simple_value               go to state 188
    constant                   go to state 189


State 234

   40 function_call_expression: IDENTIFIER • '(' function_arguments_optative ')'
   65 simple_value: IDENTIFIER •

    '('  shift, and go to state 232

    BINARY_LIST_OP               reduce using rule 65 (simple_value)
    ')'                          reduce using rule 65 (simple_value)
    ','                          reduce using rule 65 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 65 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 65 (simple_value)
    RELATIONAL_OP                reduce using rule 65 (simple_value)
    EQUALITY_OP                  reduce using rule 65 (simple_value)
    LOGICAL_OP_OR                reduce using rule 65 (simple_value)
    LOGICAL_OP_AND               reduce using rule 65 (simple_value)


State 235

   68 simple_value: UNARY_LIST_OP simple_value •

    BINARY_LIST_OP               reduce using rule 68 (simple_value)
    ')'                          reduce using rule 68 (simple_value)
    ','                          reduce using rule 68 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 68 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 68 (simple_value)
    RELATIONAL_OP                reduce using rule 68 (simple_value)
    EQUALITY_OP                  reduce using rule 68 (simple_value)
    LOGICAL_OP_OR                reduce using rule 68 (simple_value)
    LOGICAL_OP_AND               reduce using rule 68 (simple_value)


State 236

   69 simple_value: '(' expression • ')'

    ')'  shift, and go to state 276


State 237

   67 simple_value: '!' simple_value •

    BINARY_LIST_OP               reduce using rule 67 (simple_value)
    ')'                          reduce using rule 67 (simple_value)
    ','                          reduce using rule 67 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 67 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 67 (simple_value)
    RELATIONAL_OP                reduce using rule 67 (simple_value)
    EQUALITY_OP                  reduce using rule 67 (simple_value)
    LOGICAL_OP_OR                reduce using rule 67 (simple_value)
    LOGICAL_OP_AND               reduce using rule 67 (simple_value)


State 238

   66 simple_value: ARITMETIC_OP_ADDITIVE simple_value •

    BINARY_LIST_OP               reduce using rule 66 (simple_value)
    ')'                          reduce using rule 66 (simple_value)
    ','                          reduce using rule 66 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 66 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 66 (simple_value)
    RELATIONAL_OP                reduce using rule 66 (simple_value)
    EQUALITY_OP                  reduce using rule 66 (simple_value)
    LOGICAL_OP_OR                reduce using rule 66 (simple_value)
    LOGICAL_OP_AND               reduce using rule 66 (simple_value)


State 239

   50 or_expression: or_expression LOGICAL_OP_OR • and_expression

    C_INTEGER              shift, and go to state 172
    C_FLOAT                shift, and go to state 173
    C_NIL                  shift, and go to state 174
    IDENTIFIER             shift, and go to state 234
    UNARY_LIST_OP          shift, and go to state 176
    '('                    shift, and go to state 177
    '!'                    shift, and go to state 178
    ARITMETIC_OP_ADDITIVE  shift, and go to state 179

    function_call_expression   go to state 180
    and_expression             go to state 277
    equality_expression        go to state 183
    relational_expression      go to state 184
    list_expression            go to state 185
    addition_expression        go to state 186
    multiplication_expression  go to state 187
    simple_value               go to state 188
    constant                   go to state 189


State 240

   52 and_expression: and_expression LOGICAL_OP_AND • equality_expression

    C_INTEGER              shift, and go to state 172
    C_FLOAT                shift, and go to state 173
    C_NIL                  shift, and go to state 174
    IDENTIFIER             shift, and go to state 234
    UNARY_LIST_OP          shift, and go to state 176
    '('                    shift, and go to state 177
    '!'                    shift, and go to state 178
    ARITMETIC_OP_ADDITIVE  shift, and go to state 179

    function_call_expression   go to state 180
    equality_expression        go to state 278
    relational_expression      go to state 184
    list_expression            go to state 185
    addition_expression        go to state 186
    multiplication_expression  go to state 187
    simple_value               go to state 188
    constant                   go to state 189


State 241

   54 equality_expression: equality_expression EQUALITY_OP • relational_expression

    C_INTEGER              shift, and go to state 172
    C_FLOAT                shift, and go to state 173
    C_NIL                  shift, and go to state 174
    IDENTIFIER             shift, and go to state 234
    UNARY_LIST_OP          shift, and go to state 176
    '('                    shift, and go to state 177
    '!'                    shift, and go to state 178
    ARITMETIC_OP_ADDITIVE  shift, and go to state 179

    function_call_expression   go to state 180
    relational_expression      go to state 279
    list_expression            go to state 185
    addition_expression        go to state 186
    multiplication_expression  go to state 187
    simple_value               go to state 188
    constant                   go to state 189


State 242

   56 relational_expression: relational_expression RELATIONAL_OP • list_expression

    C_INTEGER              shift, and go to state 172
    C_FLOAT                shift, and go to state 173
    C_NIL                  shift, and go to state 174
    IDENTIFIER             shift, and go to state 234
    UNARY_LIST_OP          shift, and go to state 176
    '('                    shift, and go to state 177
    '!'                    shift, and go to state 178
    ARITMETIC_OP_ADDITIVE  shift, and go to state 179

    function_call_expression   go to state 180
    list_expression            go to state 280
    addition_expression        go to state 186
    multiplication_expression  go to state 187
    simple_value               go to state 188
    constant                   go to state 189


State 243

   58 list_expression: list_expression BINARY_LIST_OP • addition_expression

    C_INTEGER              shift, and go to state 172
    C_FLOAT                shift, and go to state 173
    C_NIL                  shift, and go to state 174
    IDENTIFIER             shift, and go to state 234
    UNARY_LIST_OP          shift, and go to state 176
    '('                    shift, and go to state 177
    '!'                    shift, and go to state 178
    ARITMETIC_OP_ADDITIVE  shift, and go to state 179

    function_call_expression   go to state 180
    addition_expression        go to state 281
    multiplication_expression  go to state 187
    simple_value               go to state 188
    constant                   go to state 189


State 244

   60 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE • multiplication_expression

    C_INTEGER              shift, and go to state 172
    C_FLOAT                shift, and go to state 173
    C_NIL                  shift, and go to state 174
    IDENTIFIER             shift, and go to state 234
    UNARY_LIST_OP          shift, and go to state 176
    '('                    shift, and go to state 177
    '!'                    shift, and go to state 178
    ARITMETIC_OP_ADDITIVE  shift, and go to state 179

    function_call_expression   go to state 180
    multiplication_expression  go to state 282
    simple_value               go to state 188
    constant                   go to state 189


State 245

   62 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE • simple_value

    C_INTEGER              shift, and go to state 172
    C_FLOAT                shift, and go to state 173
    C_NIL                  shift, and go to state 174
    IDENTIFIER             shift, and go to state 234
    UNARY_LIST_OP          shift, and go to state 176
    '('                    shift, and go to state 177
    '!'                    shift, and go to state 178
    ARITMETIC_OP_ADDITIVE  shift, and go to state 179

    function_call_expression  go to state 180
    simple_value              go to state 283
    constant                  go to state 189


State 246

   72 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE • IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 284


State 247

   71 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 285


State 248

   28 for_statement: RW_FOR '(' • expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    IDENTIFIER             shift, and go to state 35
    UNARY_LIST_OP          shift, and go to state 41
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    ';'  reduce using rule 46 (expression_optative)

    expression                 go to state 99
    function_call_expression   go to state 56
    expression_optative        go to state 286
    or_expression              go to state 57
    and_expression             go to state 58
    equality_expression        go to state 59
    relational_expression      go to state 60
    list_expression            go to state 61
    addition_expression        go to state 62
    multiplication_expression  go to state 63
    simple_value               go to state 64
    constant                   go to state 66


State 249

   37 return_statement: RW_RETURN expression • ';'

    ';'  shift, and go to state 287


State 250

   29 if_else_statement: RW_IF '(' • expression ')' statement
   30                  | RW_IF '(' • expression ')' statement RW_ELSE statement

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    IDENTIFIER             shift, and go to state 157
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    expression                 go to state 288
    function_call_expression   go to state 162
    or_expression              go to state 163
    and_expression             go to state 164
    equality_expression        go to state 165
    relational_expression      go to state 166
    list_expression            go to state 167
    addition_expression        go to state 168
    multiplication_expression  go to state 169
    simple_value               go to state 170
    constant                   go to state 171


State 251

   34 input_statement: IO_READ '(' • IDENTIFIER ')' ';'

    IDENTIFIER  shift, and go to state 289


State 252

   35 output_statement: IO_WRITE '(' • expression ')' ';'
   36                 | IO_WRITE '(' • LIT_STRING ')' ';'

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    LIT_STRING             shift, and go to state 290
    IDENTIFIER             shift, and go to state 157
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    expression                 go to state 291
    function_call_expression   go to state 162
    or_expression              go to state 163
    and_expression             go to state 164
    equality_expression        go to state 165
    relational_expression      go to state 166
    list_expression            go to state 167
    addition_expression        go to state 168
    multiplication_expression  go to state 169
    simple_value               go to state 170
    constant                   go to state 171


State 253

    7 block: '{' statements • '}'
    8 statements: statements • statement

    error                  shift, and go to state 136
    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    SIMPLE_TYPE            shift, and go to state 137
    IDENTIFIER             shift, and go to state 35
    RW_FOR                 shift, and go to state 138
    RW_RETURN              shift, and go to state 139
    RW_IF                  shift, and go to state 140
    IO_READ                shift, and go to state 141
    IO_WRITE               shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 41
    '{'                    shift, and go to state 143
    '}'                    shift, and go to state 292
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    block                           go to state 144
    statement                       go to state 107
    for_statement                   go to state 145
    if_else_statement               go to state 146
    expression_statement            go to state 147
    io_statement                    go to state 148
    input_statement                 go to state 149
    output_statement                go to state 150
    return_statement                go to state 151
    expression                      go to state 152
    function_call_expression        go to state 56
    or_expression                   go to state 57
    and_expression                  go to state 58
    equality_expression             go to state 59
    relational_expression           go to state 60
    list_expression                 go to state 61
    addition_expression             go to state 62
    multiplication_expression       go to state 63
    simple_value                    go to state 64
    variable_declaration_statement  go to state 153
    constant                        go to state 66


State 254

   31 expression_statement: expression ';' •

    $end         reduce using rule 31 (expression_statement)
    SIMPLE_TYPE  reduce using rule 31 (expression_statement)
    RW_ELSE      reduce using rule 31 (expression_statement)


State 255

   72 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 293


State 256

   71 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER ';' •

    error                  reduce using rule 71 (variable_declaration_statement)
    C_INTEGER              reduce using rule 71 (variable_declaration_statement)
    C_FLOAT                reduce using rule 71 (variable_declaration_statement)
    C_NIL                  reduce using rule 71 (variable_declaration_statement)
    SIMPLE_TYPE            reduce using rule 71 (variable_declaration_statement)
    IDENTIFIER             reduce using rule 71 (variable_declaration_statement)
    RW_FOR                 reduce using rule 71 (variable_declaration_statement)
    RW_RETURN              reduce using rule 71 (variable_declaration_statement)
    RW_IF                  reduce using rule 71 (variable_declaration_statement)
    IO_READ                reduce using rule 71 (variable_declaration_statement)
    IO_WRITE               reduce using rule 71 (variable_declaration_statement)
    UNARY_LIST_OP          reduce using rule 71 (variable_declaration_statement)
    '{'                    reduce using rule 71 (variable_declaration_statement)
    '}'                    reduce using rule 71 (variable_declaration_statement)
    '('                    reduce using rule 71 (variable_declaration_statement)
    '!'                    reduce using rule 71 (variable_declaration_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 71 (variable_declaration_statement)


State 257

   28 for_statement: RW_FOR '(' expression_optative • ';' or_expression_optative ';' expression_optative ')' statement

    ';'  shift, and go to state 294


State 258

   37 return_statement: RW_RETURN expression ';' •

    error                  reduce using rule 37 (return_statement)
    C_INTEGER              reduce using rule 37 (return_statement)
    C_FLOAT                reduce using rule 37 (return_statement)
    C_NIL                  reduce using rule 37 (return_statement)
    SIMPLE_TYPE            reduce using rule 37 (return_statement)
    IDENTIFIER             reduce using rule 37 (return_statement)
    RW_FOR                 reduce using rule 37 (return_statement)
    RW_RETURN              reduce using rule 37 (return_statement)
    RW_IF                  reduce using rule 37 (return_statement)
    IO_READ                reduce using rule 37 (return_statement)
    IO_WRITE               reduce using rule 37 (return_statement)
    UNARY_LIST_OP          reduce using rule 37 (return_statement)
    '{'                    reduce using rule 37 (return_statement)
    '}'                    reduce using rule 37 (return_statement)
    '('                    reduce using rule 37 (return_statement)
    '!'                    reduce using rule 37 (return_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 37 (return_statement)


State 259

   29 if_else_statement: RW_IF '(' expression • ')' statement
   30                  | RW_IF '(' expression • ')' statement RW_ELSE statement

    ')'  shift, and go to state 295


State 260

   34 input_statement: IO_READ '(' IDENTIFIER • ')' ';'

    ')'  shift, and go to state 296


State 261

   36 output_statement: IO_WRITE '(' LIT_STRING • ')' ';'

    ')'  shift, and go to state 297


State 262

   35 output_statement: IO_WRITE '(' expression • ')' ';'

    ')'  shift, and go to state 298


State 263

    7 block: '{' statements '}' •

    error                  reduce using rule 7 (block)
    C_INTEGER              reduce using rule 7 (block)
    C_FLOAT                reduce using rule 7 (block)
    C_NIL                  reduce using rule 7 (block)
    SIMPLE_TYPE            reduce using rule 7 (block)
    IDENTIFIER             reduce using rule 7 (block)
    RW_FOR                 reduce using rule 7 (block)
    RW_RETURN              reduce using rule 7 (block)
    RW_IF                  reduce using rule 7 (block)
    IO_READ                reduce using rule 7 (block)
    IO_WRITE               reduce using rule 7 (block)
    UNARY_LIST_OP          reduce using rule 7 (block)
    '{'                    reduce using rule 7 (block)
    '}'                    reduce using rule 7 (block)
    '('                    reduce using rule 7 (block)
    '!'                    reduce using rule 7 (block)
    ARITMETIC_OP_ADDITIVE  reduce using rule 7 (block)


State 264

   40 function_call_expression: IDENTIFIER '(' function_arguments_optative • ')'

    ')'  shift, and go to state 299


State 265

   38 expression: IDENTIFIER '=' expression •

    ')'  reduce using rule 38 (expression)


State 266

   69 simple_value: '(' expression ')' •

    BINARY_LIST_OP               reduce using rule 69 (simple_value)
    ')'                          reduce using rule 69 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 69 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 69 (simple_value)
    RELATIONAL_OP                reduce using rule 69 (simple_value)
    EQUALITY_OP                  reduce using rule 69 (simple_value)
    LOGICAL_OP_OR                reduce using rule 69 (simple_value)
    LOGICAL_OP_AND               reduce using rule 69 (simple_value)


State 267

   50 or_expression: or_expression LOGICAL_OP_OR and_expression •
   52 and_expression: and_expression • LOGICAL_OP_AND equality_expression

    LOGICAL_OP_AND  shift, and go to state 226

    ')'            reduce using rule 50 (or_expression)
    LOGICAL_OP_OR  reduce using rule 50 (or_expression)


State 268

   52 and_expression: and_expression LOGICAL_OP_AND equality_expression •
   54 equality_expression: equality_expression • EQUALITY_OP relational_expression

    EQUALITY_OP  shift, and go to state 227

    ')'             reduce using rule 52 (and_expression)
    LOGICAL_OP_OR   reduce using rule 52 (and_expression)
    LOGICAL_OP_AND  reduce using rule 52 (and_expression)


State 269

   54 equality_expression: equality_expression EQUALITY_OP relational_expression •
   56 relational_expression: relational_expression • RELATIONAL_OP list_expression

    RELATIONAL_OP  shift, and go to state 228

    ')'             reduce using rule 54 (equality_expression)
    EQUALITY_OP     reduce using rule 54 (equality_expression)
    LOGICAL_OP_OR   reduce using rule 54 (equality_expression)
    LOGICAL_OP_AND  reduce using rule 54 (equality_expression)


State 270

   56 relational_expression: relational_expression RELATIONAL_OP list_expression •
   58 list_expression: list_expression • BINARY_LIST_OP addition_expression

    BINARY_LIST_OP  shift, and go to state 229

    ')'             reduce using rule 56 (relational_expression)
    RELATIONAL_OP   reduce using rule 56 (relational_expression)
    EQUALITY_OP     reduce using rule 56 (relational_expression)
    LOGICAL_OP_OR   reduce using rule 56 (relational_expression)
    LOGICAL_OP_AND  reduce using rule 56 (relational_expression)


State 271

   58 list_expression: list_expression BINARY_LIST_OP addition_expression •
   60 addition_expression: addition_expression • ARITMETIC_OP_ADDITIVE multiplication_expression

    ARITMETIC_OP_ADDITIVE  shift, and go to state 230

    BINARY_LIST_OP  reduce using rule 58 (list_expression)
    ')'             reduce using rule 58 (list_expression)
    RELATIONAL_OP   reduce using rule 58 (list_expression)
    EQUALITY_OP     reduce using rule 58 (list_expression)
    LOGICAL_OP_OR   reduce using rule 58 (list_expression)
    LOGICAL_OP_AND  reduce using rule 58 (list_expression)


State 272

   60 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE multiplication_expression •
   62 multiplication_expression: multiplication_expression • ARITMETIC_OP_MULTIPLICATIVE simple_value

    ARITMETIC_OP_MULTIPLICATIVE  shift, and go to state 231

    BINARY_LIST_OP         reduce using rule 60 (addition_expression)
    ')'                    reduce using rule 60 (addition_expression)
    ARITMETIC_OP_ADDITIVE  reduce using rule 60 (addition_expression)
    RELATIONAL_OP          reduce using rule 60 (addition_expression)
    EQUALITY_OP            reduce using rule 60 (addition_expression)
    LOGICAL_OP_OR          reduce using rule 60 (addition_expression)
    LOGICAL_OP_AND         reduce using rule 60 (addition_expression)


State 273

   62 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE simple_value •

    BINARY_LIST_OP               reduce using rule 62 (multiplication_expression)
    ')'                          reduce using rule 62 (multiplication_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 62 (multiplication_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 62 (multiplication_expression)
    RELATIONAL_OP                reduce using rule 62 (multiplication_expression)
    EQUALITY_OP                  reduce using rule 62 (multiplication_expression)
    LOGICAL_OP_OR                reduce using rule 62 (multiplication_expression)
    LOGICAL_OP_AND               reduce using rule 62 (multiplication_expression)


State 274

   40 function_call_expression: IDENTIFIER '(' function_arguments_optative • ')'

    ')'  shift, and go to state 300


State 275

   38 expression: IDENTIFIER '=' expression •

    ')'  reduce using rule 38 (expression)
    ','  reduce using rule 38 (expression)


State 276

   69 simple_value: '(' expression ')' •

    BINARY_LIST_OP               reduce using rule 69 (simple_value)
    ')'                          reduce using rule 69 (simple_value)
    ','                          reduce using rule 69 (simple_value)
    ARITMETIC_OP_ADDITIVE        reduce using rule 69 (simple_value)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 69 (simple_value)
    RELATIONAL_OP                reduce using rule 69 (simple_value)
    EQUALITY_OP                  reduce using rule 69 (simple_value)
    LOGICAL_OP_OR                reduce using rule 69 (simple_value)
    LOGICAL_OP_AND               reduce using rule 69 (simple_value)


State 277

   50 or_expression: or_expression LOGICAL_OP_OR and_expression •
   52 and_expression: and_expression • LOGICAL_OP_AND equality_expression

    LOGICAL_OP_AND  shift, and go to state 240

    ')'            reduce using rule 50 (or_expression)
    ','            reduce using rule 50 (or_expression)
    LOGICAL_OP_OR  reduce using rule 50 (or_expression)


State 278

   52 and_expression: and_expression LOGICAL_OP_AND equality_expression •
   54 equality_expression: equality_expression • EQUALITY_OP relational_expression

    EQUALITY_OP  shift, and go to state 241

    ')'             reduce using rule 52 (and_expression)
    ','             reduce using rule 52 (and_expression)
    LOGICAL_OP_OR   reduce using rule 52 (and_expression)
    LOGICAL_OP_AND  reduce using rule 52 (and_expression)


State 279

   54 equality_expression: equality_expression EQUALITY_OP relational_expression •
   56 relational_expression: relational_expression • RELATIONAL_OP list_expression

    RELATIONAL_OP  shift, and go to state 242

    ')'             reduce using rule 54 (equality_expression)
    ','             reduce using rule 54 (equality_expression)
    EQUALITY_OP     reduce using rule 54 (equality_expression)
    LOGICAL_OP_OR   reduce using rule 54 (equality_expression)
    LOGICAL_OP_AND  reduce using rule 54 (equality_expression)


State 280

   56 relational_expression: relational_expression RELATIONAL_OP list_expression •
   58 list_expression: list_expression • BINARY_LIST_OP addition_expression

    BINARY_LIST_OP  shift, and go to state 243

    ')'             reduce using rule 56 (relational_expression)
    ','             reduce using rule 56 (relational_expression)
    RELATIONAL_OP   reduce using rule 56 (relational_expression)
    EQUALITY_OP     reduce using rule 56 (relational_expression)
    LOGICAL_OP_OR   reduce using rule 56 (relational_expression)
    LOGICAL_OP_AND  reduce using rule 56 (relational_expression)


State 281

   58 list_expression: list_expression BINARY_LIST_OP addition_expression •
   60 addition_expression: addition_expression • ARITMETIC_OP_ADDITIVE multiplication_expression

    ARITMETIC_OP_ADDITIVE  shift, and go to state 244

    BINARY_LIST_OP  reduce using rule 58 (list_expression)
    ')'             reduce using rule 58 (list_expression)
    ','             reduce using rule 58 (list_expression)
    RELATIONAL_OP   reduce using rule 58 (list_expression)
    EQUALITY_OP     reduce using rule 58 (list_expression)
    LOGICAL_OP_OR   reduce using rule 58 (list_expression)
    LOGICAL_OP_AND  reduce using rule 58 (list_expression)


State 282

   60 addition_expression: addition_expression ARITMETIC_OP_ADDITIVE multiplication_expression •
   62 multiplication_expression: multiplication_expression • ARITMETIC_OP_MULTIPLICATIVE simple_value

    ARITMETIC_OP_MULTIPLICATIVE  shift, and go to state 245

    BINARY_LIST_OP         reduce using rule 60 (addition_expression)
    ')'                    reduce using rule 60 (addition_expression)
    ','                    reduce using rule 60 (addition_expression)
    ARITMETIC_OP_ADDITIVE  reduce using rule 60 (addition_expression)
    RELATIONAL_OP          reduce using rule 60 (addition_expression)
    EQUALITY_OP            reduce using rule 60 (addition_expression)
    LOGICAL_OP_OR          reduce using rule 60 (addition_expression)
    LOGICAL_OP_AND         reduce using rule 60 (addition_expression)


State 283

   62 multiplication_expression: multiplication_expression ARITMETIC_OP_MULTIPLICATIVE simple_value •

    BINARY_LIST_OP               reduce using rule 62 (multiplication_expression)
    ')'                          reduce using rule 62 (multiplication_expression)
    ','                          reduce using rule 62 (multiplication_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 62 (multiplication_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 62 (multiplication_expression)
    RELATIONAL_OP                reduce using rule 62 (multiplication_expression)
    EQUALITY_OP                  reduce using rule 62 (multiplication_expression)
    LOGICAL_OP_OR                reduce using rule 62 (multiplication_expression)
    LOGICAL_OP_AND               reduce using rule 62 (multiplication_expression)


State 284

   72 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 301


State 285

   71 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER ';' •

    $end         reduce using rule 71 (variable_declaration_statement)
    SIMPLE_TYPE  reduce using rule 71 (variable_declaration_statement)
    RW_ELSE      reduce using rule 71 (variable_declaration_statement)


State 286

   28 for_statement: RW_FOR '(' expression_optative • ';' or_expression_optative ';' expression_optative ')' statement

    ';'  shift, and go to state 302


State 287

   37 return_statement: RW_RETURN expression ';' •

    $end         reduce using rule 37 (return_statement)
    SIMPLE_TYPE  reduce using rule 37 (return_statement)
    RW_ELSE      reduce using rule 37 (return_statement)


State 288

   29 if_else_statement: RW_IF '(' expression • ')' statement
   30                  | RW_IF '(' expression • ')' statement RW_ELSE statement

    ')'  shift, and go to state 303


State 289

   34 input_statement: IO_READ '(' IDENTIFIER • ')' ';'

    ')'  shift, and go to state 304


State 290

   36 output_statement: IO_WRITE '(' LIT_STRING • ')' ';'

    ')'  shift, and go to state 305


State 291

   35 output_statement: IO_WRITE '(' expression • ')' ';'

    ')'  shift, and go to state 306


State 292

    7 block: '{' statements '}' •

    $end         reduce using rule 7 (block)
    SIMPLE_TYPE  reduce using rule 7 (block)
    RW_ELSE      reduce using rule 7 (block)


State 293

   72 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER ';' •

    error                  reduce using rule 72 (variable_declaration_statement)
    C_INTEGER              reduce using rule 72 (variable_declaration_statement)
    C_FLOAT                reduce using rule 72 (variable_declaration_statement)
    C_NIL                  reduce using rule 72 (variable_declaration_statement)
    SIMPLE_TYPE            reduce using rule 72 (variable_declaration_statement)
    IDENTIFIER             reduce using rule 72 (variable_declaration_statement)
    RW_FOR                 reduce using rule 72 (variable_declaration_statement)
    RW_RETURN              reduce using rule 72 (variable_declaration_statement)
    RW_IF                  reduce using rule 72 (variable_declaration_statement)
    IO_READ                reduce using rule 72 (variable_declaration_statement)
    IO_WRITE               reduce using rule 72 (variable_declaration_statement)
    UNARY_LIST_OP          reduce using rule 72 (variable_declaration_statement)
    '{'                    reduce using rule 72 (variable_declaration_statement)
    '}'                    reduce using rule 72 (variable_declaration_statement)
    '('                    reduce using rule 72 (variable_declaration_statement)
    '!'                    reduce using rule 72 (variable_declaration_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 72 (variable_declaration_statement)


State 294

   28 for_statement: RW_FOR '(' expression_optative ';' • or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    IDENTIFIER             shift, and go to state 78
    UNARY_LIST_OP          shift, and go to state 41
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    ';'  reduce using rule 48 (or_expression_optative)

    function_call_expression   go to state 56
    or_expression_optative     go to state 307
    or_expression              go to state 125
    and_expression             go to state 58
    equality_expression        go to state 59
    relational_expression      go to state 60
    list_expression            go to state 61
    addition_expression        go to state 62
    multiplication_expression  go to state 63
    simple_value               go to state 64
    constant                   go to state 66


State 295

   29 if_else_statement: RW_IF '(' expression ')' • statement
   30                  | RW_IF '(' expression ')' • statement RW_ELSE statement

    error                  shift, and go to state 308
    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    SIMPLE_TYPE            shift, and go to state 309
    IDENTIFIER             shift, and go to state 35
    RW_FOR                 shift, and go to state 310
    RW_RETURN              shift, and go to state 311
    RW_IF                  shift, and go to state 312
    IO_READ                shift, and go to state 313
    IO_WRITE               shift, and go to state 314
    UNARY_LIST_OP          shift, and go to state 41
    '{'                    shift, and go to state 315
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    block                           go to state 316
    statement                       go to state 317
    for_statement                   go to state 318
    if_else_statement               go to state 319
    expression_statement            go to state 320
    io_statement                    go to state 321
    input_statement                 go to state 322
    output_statement                go to state 323
    return_statement                go to state 324
    expression                      go to state 325
    function_call_expression        go to state 56
    or_expression                   go to state 57
    and_expression                  go to state 58
    equality_expression             go to state 59
    relational_expression           go to state 60
    list_expression                 go to state 61
    addition_expression             go to state 62
    multiplication_expression       go to state 63
    simple_value                    go to state 64
    variable_declaration_statement  go to state 326
    constant                        go to state 66


State 296

   34 input_statement: IO_READ '(' IDENTIFIER ')' • ';'

    ';'  shift, and go to state 327


State 297

   36 output_statement: IO_WRITE '(' LIT_STRING ')' • ';'

    ';'  shift, and go to state 328


State 298

   35 output_statement: IO_WRITE '(' expression ')' • ';'

    ';'  shift, and go to state 329


State 299

   40 function_call_expression: IDENTIFIER '(' function_arguments_optative ')' •

    BINARY_LIST_OP               reduce using rule 40 (function_call_expression)
    ')'                          reduce using rule 40 (function_call_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 40 (function_call_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 40 (function_call_expression)
    RELATIONAL_OP                reduce using rule 40 (function_call_expression)
    EQUALITY_OP                  reduce using rule 40 (function_call_expression)
    LOGICAL_OP_OR                reduce using rule 40 (function_call_expression)
    LOGICAL_OP_AND               reduce using rule 40 (function_call_expression)


State 300

   40 function_call_expression: IDENTIFIER '(' function_arguments_optative ')' •

    BINARY_LIST_OP               reduce using rule 40 (function_call_expression)
    ')'                          reduce using rule 40 (function_call_expression)
    ','                          reduce using rule 40 (function_call_expression)
    ARITMETIC_OP_ADDITIVE        reduce using rule 40 (function_call_expression)
    ARITMETIC_OP_MULTIPLICATIVE  reduce using rule 40 (function_call_expression)
    RELATIONAL_OP                reduce using rule 40 (function_call_expression)
    EQUALITY_OP                  reduce using rule 40 (function_call_expression)
    LOGICAL_OP_OR                reduce using rule 40 (function_call_expression)
    LOGICAL_OP_AND               reduce using rule 40 (function_call_expression)


State 301

   72 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER ';' •

    $end         reduce using rule 72 (variable_declaration_statement)
    SIMPLE_TYPE  reduce using rule 72 (variable_declaration_statement)
    RW_ELSE      reduce using rule 72 (variable_declaration_statement)


State 302

   28 for_statement: RW_FOR '(' expression_optative ';' • or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    IDENTIFIER             shift, and go to state 78
    UNARY_LIST_OP          shift, and go to state 41
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    ';'  reduce using rule 48 (or_expression_optative)

    function_call_expression   go to state 56
    or_expression_optative     go to state 330
    or_expression              go to state 125
    and_expression             go to state 58
    equality_expression        go to state 59
    relational_expression      go to state 60
    list_expression            go to state 61
    addition_expression        go to state 62
    multiplication_expression  go to state 63
    simple_value               go to state 64
    constant                   go to state 66


State 303

   29 if_else_statement: RW_IF '(' expression ')' • statement
   30                  | RW_IF '(' expression ')' • statement RW_ELSE statement

    error                  shift, and go to state 190
    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    SIMPLE_TYPE            shift, and go to state 191
    IDENTIFIER             shift, and go to state 35
    RW_FOR                 shift, and go to state 192
    RW_RETURN              shift, and go to state 193
    RW_IF                  shift, and go to state 194
    IO_READ                shift, and go to state 195
    IO_WRITE               shift, and go to state 196
    UNARY_LIST_OP          shift, and go to state 41
    '{'                    shift, and go to state 197
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    block                           go to state 198
    statement                       go to state 331
    for_statement                   go to state 199
    if_else_statement               go to state 200
    expression_statement            go to state 201
    io_statement                    go to state 202
    input_statement                 go to state 203
    output_statement                go to state 204
    return_statement                go to state 205
    expression                      go to state 206
    function_call_expression        go to state 56
    or_expression                   go to state 57
    and_expression                  go to state 58
    equality_expression             go to state 59
    relational_expression           go to state 60
    list_expression                 go to state 61
    addition_expression             go to state 62
    multiplication_expression       go to state 63
    simple_value                    go to state 64
    variable_declaration_statement  go to state 207
    constant                        go to state 66


State 304

   34 input_statement: IO_READ '(' IDENTIFIER ')' • ';'

    ';'  shift, and go to state 332


State 305

   36 output_statement: IO_WRITE '(' LIT_STRING ')' • ';'

    ';'  shift, and go to state 333


State 306

   35 output_statement: IO_WRITE '(' expression ')' • ';'

    ';'  shift, and go to state 334


State 307

   28 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative • ';' expression_optative ')' statement

    ';'  shift, and go to state 335


State 308

   17 statement: error •

    error                  reduce using rule 17 (statement)
    C_INTEGER              reduce using rule 17 (statement)
    C_FLOAT                reduce using rule 17 (statement)
    C_NIL                  reduce using rule 17 (statement)
    SIMPLE_TYPE            reduce using rule 17 (statement)
    IDENTIFIER             reduce using rule 17 (statement)
    RW_FOR                 reduce using rule 17 (statement)
    RW_RETURN              reduce using rule 17 (statement)
    RW_IF                  reduce using rule 17 (statement)
    RW_ELSE                reduce using rule 17 (statement)
    IO_READ                reduce using rule 17 (statement)
    IO_WRITE               reduce using rule 17 (statement)
    UNARY_LIST_OP          reduce using rule 17 (statement)
    '{'                    reduce using rule 17 (statement)
    '}'                    reduce using rule 17 (statement)
    '('                    reduce using rule 17 (statement)
    '!'                    reduce using rule 17 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 17 (statement)


State 309

   71 variable_declaration_statement: SIMPLE_TYPE • IDENTIFIER ';'
   72                               | SIMPLE_TYPE • LIST_TYPE IDENTIFIER ';'

    LIST_TYPE   shift, and go to state 336
    IDENTIFIER  shift, and go to state 337


State 310

   28 for_statement: RW_FOR • '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    '('  shift, and go to state 338


State 311

   37 return_statement: RW_RETURN • expression ';'

    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    IDENTIFIER             shift, and go to state 35
    UNARY_LIST_OP          shift, and go to state 41
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    expression                 go to state 339
    function_call_expression   go to state 56
    or_expression              go to state 57
    and_expression             go to state 58
    equality_expression        go to state 59
    relational_expression      go to state 60
    list_expression            go to state 61
    addition_expression        go to state 62
    multiplication_expression  go to state 63
    simple_value               go to state 64
    constant                   go to state 66


State 312

   29 if_else_statement: RW_IF • '(' expression ')' statement
   30                  | RW_IF • '(' expression ')' statement RW_ELSE statement

    '('  shift, and go to state 340


State 313

   34 input_statement: IO_READ • '(' IDENTIFIER ')' ';'

    '('  shift, and go to state 341


State 314

   35 output_statement: IO_WRITE • '(' expression ')' ';'
   36                 | IO_WRITE • '(' LIT_STRING ')' ';'

    '('  shift, and go to state 342


State 315

    7 block: '{' • statements '}'

    error                  shift, and go to state 136
    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    SIMPLE_TYPE            shift, and go to state 137
    IDENTIFIER             shift, and go to state 35
    RW_FOR                 shift, and go to state 138
    RW_RETURN              shift, and go to state 139
    RW_IF                  shift, and go to state 140
    IO_READ                shift, and go to state 141
    IO_WRITE               shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 41
    '{'                    shift, and go to state 143
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    block                           go to state 144
    statements                      go to state 343
    statement                       go to state 81
    for_statement                   go to state 145
    if_else_statement               go to state 146
    expression_statement            go to state 147
    io_statement                    go to state 148
    input_statement                 go to state 149
    output_statement                go to state 150
    return_statement                go to state 151
    expression                      go to state 152
    function_call_expression        go to state 56
    or_expression                   go to state 57
    and_expression                  go to state 58
    equality_expression             go to state 59
    relational_expression           go to state 60
    list_expression                 go to state 61
    addition_expression             go to state 62
    multiplication_expression       go to state 63
    simple_value                    go to state 64
    variable_declaration_statement  go to state 153
    constant                        go to state 66


State 316

   16 statement: block •

    error                  reduce using rule 16 (statement)
    C_INTEGER              reduce using rule 16 (statement)
    C_FLOAT                reduce using rule 16 (statement)
    C_NIL                  reduce using rule 16 (statement)
    SIMPLE_TYPE            reduce using rule 16 (statement)
    IDENTIFIER             reduce using rule 16 (statement)
    RW_FOR                 reduce using rule 16 (statement)
    RW_RETURN              reduce using rule 16 (statement)
    RW_IF                  reduce using rule 16 (statement)
    RW_ELSE                reduce using rule 16 (statement)
    IO_READ                reduce using rule 16 (statement)
    IO_WRITE               reduce using rule 16 (statement)
    UNARY_LIST_OP          reduce using rule 16 (statement)
    '{'                    reduce using rule 16 (statement)
    '}'                    reduce using rule 16 (statement)
    '('                    reduce using rule 16 (statement)
    '!'                    reduce using rule 16 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 16 (statement)


State 317

   29 if_else_statement: RW_IF '(' expression ')' statement •
   30                  | RW_IF '(' expression ')' statement • RW_ELSE statement

    RW_ELSE  shift, and go to state 344

    error                  reduce using rule 29 (if_else_statement)
    C_INTEGER              reduce using rule 29 (if_else_statement)
    C_FLOAT                reduce using rule 29 (if_else_statement)
    C_NIL                  reduce using rule 29 (if_else_statement)
    SIMPLE_TYPE            reduce using rule 29 (if_else_statement)
    IDENTIFIER             reduce using rule 29 (if_else_statement)
    RW_FOR                 reduce using rule 29 (if_else_statement)
    RW_RETURN              reduce using rule 29 (if_else_statement)
    RW_IF                  reduce using rule 29 (if_else_statement)
    IO_READ                reduce using rule 29 (if_else_statement)
    IO_WRITE               reduce using rule 29 (if_else_statement)
    UNARY_LIST_OP          reduce using rule 29 (if_else_statement)
    '{'                    reduce using rule 29 (if_else_statement)
    '}'                    reduce using rule 29 (if_else_statement)
    '('                    reduce using rule 29 (if_else_statement)
    '!'                    reduce using rule 29 (if_else_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 29 (if_else_statement)


State 318

   14 statement: for_statement •

    error                  reduce using rule 14 (statement)
    C_INTEGER              reduce using rule 14 (statement)
    C_FLOAT                reduce using rule 14 (statement)
    C_NIL                  reduce using rule 14 (statement)
    SIMPLE_TYPE            reduce using rule 14 (statement)
    IDENTIFIER             reduce using rule 14 (statement)
    RW_FOR                 reduce using rule 14 (statement)
    RW_RETURN              reduce using rule 14 (statement)
    RW_IF                  reduce using rule 14 (statement)
    RW_ELSE                reduce using rule 14 (statement)
    IO_READ                reduce using rule 14 (statement)
    IO_WRITE               reduce using rule 14 (statement)
    UNARY_LIST_OP          reduce using rule 14 (statement)
    '{'                    reduce using rule 14 (statement)
    '}'                    reduce using rule 14 (statement)
    '('                    reduce using rule 14 (statement)
    '!'                    reduce using rule 14 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 14 (statement)


State 319

   15 statement: if_else_statement •

    error                  reduce using rule 15 (statement)
    C_INTEGER              reduce using rule 15 (statement)
    C_FLOAT                reduce using rule 15 (statement)
    C_NIL                  reduce using rule 15 (statement)
    SIMPLE_TYPE            reduce using rule 15 (statement)
    IDENTIFIER             reduce using rule 15 (statement)
    RW_FOR                 reduce using rule 15 (statement)
    RW_RETURN              reduce using rule 15 (statement)
    RW_IF                  reduce using rule 15 (statement)
    RW_ELSE                reduce using rule 15 (statement)
    IO_READ                reduce using rule 15 (statement)
    IO_WRITE               reduce using rule 15 (statement)
    UNARY_LIST_OP          reduce using rule 15 (statement)
    '{'                    reduce using rule 15 (statement)
    '}'                    reduce using rule 15 (statement)
    '('                    reduce using rule 15 (statement)
    '!'                    reduce using rule 15 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 15 (statement)


State 320

   10 statement: expression_statement •

    error                  reduce using rule 10 (statement)
    C_INTEGER              reduce using rule 10 (statement)
    C_FLOAT                reduce using rule 10 (statement)
    C_NIL                  reduce using rule 10 (statement)
    SIMPLE_TYPE            reduce using rule 10 (statement)
    IDENTIFIER             reduce using rule 10 (statement)
    RW_FOR                 reduce using rule 10 (statement)
    RW_RETURN              reduce using rule 10 (statement)
    RW_IF                  reduce using rule 10 (statement)
    RW_ELSE                reduce using rule 10 (statement)
    IO_READ                reduce using rule 10 (statement)
    IO_WRITE               reduce using rule 10 (statement)
    UNARY_LIST_OP          reduce using rule 10 (statement)
    '{'                    reduce using rule 10 (statement)
    '}'                    reduce using rule 10 (statement)
    '('                    reduce using rule 10 (statement)
    '!'                    reduce using rule 10 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 10 (statement)


State 321

   11 statement: io_statement •

    error                  reduce using rule 11 (statement)
    C_INTEGER              reduce using rule 11 (statement)
    C_FLOAT                reduce using rule 11 (statement)
    C_NIL                  reduce using rule 11 (statement)
    SIMPLE_TYPE            reduce using rule 11 (statement)
    IDENTIFIER             reduce using rule 11 (statement)
    RW_FOR                 reduce using rule 11 (statement)
    RW_RETURN              reduce using rule 11 (statement)
    RW_IF                  reduce using rule 11 (statement)
    RW_ELSE                reduce using rule 11 (statement)
    IO_READ                reduce using rule 11 (statement)
    IO_WRITE               reduce using rule 11 (statement)
    UNARY_LIST_OP          reduce using rule 11 (statement)
    '{'                    reduce using rule 11 (statement)
    '}'                    reduce using rule 11 (statement)
    '('                    reduce using rule 11 (statement)
    '!'                    reduce using rule 11 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 11 (statement)


State 322

   32 io_statement: input_statement •

    error                  reduce using rule 32 (io_statement)
    C_INTEGER              reduce using rule 32 (io_statement)
    C_FLOAT                reduce using rule 32 (io_statement)
    C_NIL                  reduce using rule 32 (io_statement)
    SIMPLE_TYPE            reduce using rule 32 (io_statement)
    IDENTIFIER             reduce using rule 32 (io_statement)
    RW_FOR                 reduce using rule 32 (io_statement)
    RW_RETURN              reduce using rule 32 (io_statement)
    RW_IF                  reduce using rule 32 (io_statement)
    RW_ELSE                reduce using rule 32 (io_statement)
    IO_READ                reduce using rule 32 (io_statement)
    IO_WRITE               reduce using rule 32 (io_statement)
    UNARY_LIST_OP          reduce using rule 32 (io_statement)
    '{'                    reduce using rule 32 (io_statement)
    '}'                    reduce using rule 32 (io_statement)
    '('                    reduce using rule 32 (io_statement)
    '!'                    reduce using rule 32 (io_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 32 (io_statement)


State 323

   33 io_statement: output_statement •

    error                  reduce using rule 33 (io_statement)
    C_INTEGER              reduce using rule 33 (io_statement)
    C_FLOAT                reduce using rule 33 (io_statement)
    C_NIL                  reduce using rule 33 (io_statement)
    SIMPLE_TYPE            reduce using rule 33 (io_statement)
    IDENTIFIER             reduce using rule 33 (io_statement)
    RW_FOR                 reduce using rule 33 (io_statement)
    RW_RETURN              reduce using rule 33 (io_statement)
    RW_IF                  reduce using rule 33 (io_statement)
    RW_ELSE                reduce using rule 33 (io_statement)
    IO_READ                reduce using rule 33 (io_statement)
    IO_WRITE               reduce using rule 33 (io_statement)
    UNARY_LIST_OP          reduce using rule 33 (io_statement)
    '{'                    reduce using rule 33 (io_statement)
    '}'                    reduce using rule 33 (io_statement)
    '('                    reduce using rule 33 (io_statement)
    '!'                    reduce using rule 33 (io_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 33 (io_statement)


State 324

   12 statement: return_statement •

    error                  reduce using rule 12 (statement)
    C_INTEGER              reduce using rule 12 (statement)
    C_FLOAT                reduce using rule 12 (statement)
    C_NIL                  reduce using rule 12 (statement)
    SIMPLE_TYPE            reduce using rule 12 (statement)
    IDENTIFIER             reduce using rule 12 (statement)
    RW_FOR                 reduce using rule 12 (statement)
    RW_RETURN              reduce using rule 12 (statement)
    RW_IF                  reduce using rule 12 (statement)
    RW_ELSE                reduce using rule 12 (statement)
    IO_READ                reduce using rule 12 (statement)
    IO_WRITE               reduce using rule 12 (statement)
    UNARY_LIST_OP          reduce using rule 12 (statement)
    '{'                    reduce using rule 12 (statement)
    '}'                    reduce using rule 12 (statement)
    '('                    reduce using rule 12 (statement)
    '!'                    reduce using rule 12 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 12 (statement)


State 325

   31 expression_statement: expression • ';'

    ';'  shift, and go to state 345


State 326

   13 statement: variable_declaration_statement •

    error                  reduce using rule 13 (statement)
    C_INTEGER              reduce using rule 13 (statement)
    C_FLOAT                reduce using rule 13 (statement)
    C_NIL                  reduce using rule 13 (statement)
    SIMPLE_TYPE            reduce using rule 13 (statement)
    IDENTIFIER             reduce using rule 13 (statement)
    RW_FOR                 reduce using rule 13 (statement)
    RW_RETURN              reduce using rule 13 (statement)
    RW_IF                  reduce using rule 13 (statement)
    RW_ELSE                reduce using rule 13 (statement)
    IO_READ                reduce using rule 13 (statement)
    IO_WRITE               reduce using rule 13 (statement)
    UNARY_LIST_OP          reduce using rule 13 (statement)
    '{'                    reduce using rule 13 (statement)
    '}'                    reduce using rule 13 (statement)
    '('                    reduce using rule 13 (statement)
    '!'                    reduce using rule 13 (statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 13 (statement)


State 327

   34 input_statement: IO_READ '(' IDENTIFIER ')' ';' •

    error                  reduce using rule 34 (input_statement)
    C_INTEGER              reduce using rule 34 (input_statement)
    C_FLOAT                reduce using rule 34 (input_statement)
    C_NIL                  reduce using rule 34 (input_statement)
    SIMPLE_TYPE            reduce using rule 34 (input_statement)
    IDENTIFIER             reduce using rule 34 (input_statement)
    RW_FOR                 reduce using rule 34 (input_statement)
    RW_RETURN              reduce using rule 34 (input_statement)
    RW_IF                  reduce using rule 34 (input_statement)
    IO_READ                reduce using rule 34 (input_statement)
    IO_WRITE               reduce using rule 34 (input_statement)
    UNARY_LIST_OP          reduce using rule 34 (input_statement)
    '{'                    reduce using rule 34 (input_statement)
    '}'                    reduce using rule 34 (input_statement)
    '('                    reduce using rule 34 (input_statement)
    '!'                    reduce using rule 34 (input_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 34 (input_statement)


State 328

   36 output_statement: IO_WRITE '(' LIT_STRING ')' ';' •

    error                  reduce using rule 36 (output_statement)
    C_INTEGER              reduce using rule 36 (output_statement)
    C_FLOAT                reduce using rule 36 (output_statement)
    C_NIL                  reduce using rule 36 (output_statement)
    SIMPLE_TYPE            reduce using rule 36 (output_statement)
    IDENTIFIER             reduce using rule 36 (output_statement)
    RW_FOR                 reduce using rule 36 (output_statement)
    RW_RETURN              reduce using rule 36 (output_statement)
    RW_IF                  reduce using rule 36 (output_statement)
    IO_READ                reduce using rule 36 (output_statement)
    IO_WRITE               reduce using rule 36 (output_statement)
    UNARY_LIST_OP          reduce using rule 36 (output_statement)
    '{'                    reduce using rule 36 (output_statement)
    '}'                    reduce using rule 36 (output_statement)
    '('                    reduce using rule 36 (output_statement)
    '!'                    reduce using rule 36 (output_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 36 (output_statement)


State 329

   35 output_statement: IO_WRITE '(' expression ')' ';' •

    error                  reduce using rule 35 (output_statement)
    C_INTEGER              reduce using rule 35 (output_statement)
    C_FLOAT                reduce using rule 35 (output_statement)
    C_NIL                  reduce using rule 35 (output_statement)
    SIMPLE_TYPE            reduce using rule 35 (output_statement)
    IDENTIFIER             reduce using rule 35 (output_statement)
    RW_FOR                 reduce using rule 35 (output_statement)
    RW_RETURN              reduce using rule 35 (output_statement)
    RW_IF                  reduce using rule 35 (output_statement)
    IO_READ                reduce using rule 35 (output_statement)
    IO_WRITE               reduce using rule 35 (output_statement)
    UNARY_LIST_OP          reduce using rule 35 (output_statement)
    '{'                    reduce using rule 35 (output_statement)
    '}'                    reduce using rule 35 (output_statement)
    '('                    reduce using rule 35 (output_statement)
    '!'                    reduce using rule 35 (output_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 35 (output_statement)


State 330

   28 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative • ';' expression_optative ')' statement

    ';'  shift, and go to state 346


State 331

   29 if_else_statement: RW_IF '(' expression ')' statement •
   30                  | RW_IF '(' expression ')' statement • RW_ELSE statement

    RW_ELSE  shift, and go to state 347

    $end         reduce using rule 29 (if_else_statement)
    SIMPLE_TYPE  reduce using rule 29 (if_else_statement)


State 332

   34 input_statement: IO_READ '(' IDENTIFIER ')' ';' •

    $end         reduce using rule 34 (input_statement)
    SIMPLE_TYPE  reduce using rule 34 (input_statement)
    RW_ELSE      reduce using rule 34 (input_statement)


State 333

   36 output_statement: IO_WRITE '(' LIT_STRING ')' ';' •

    $end         reduce using rule 36 (output_statement)
    SIMPLE_TYPE  reduce using rule 36 (output_statement)
    RW_ELSE      reduce using rule 36 (output_statement)


State 334

   35 output_statement: IO_WRITE '(' expression ')' ';' •

    $end         reduce using rule 35 (output_statement)
    SIMPLE_TYPE  reduce using rule 35 (output_statement)
    RW_ELSE      reduce using rule 35 (output_statement)


State 335

   28 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' • expression_optative ')' statement

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    IDENTIFIER             shift, and go to state 157
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    ')'  reduce using rule 46 (expression_optative)

    expression                 go to state 208
    function_call_expression   go to state 162
    expression_optative        go to state 348
    or_expression              go to state 163
    and_expression             go to state 164
    equality_expression        go to state 165
    relational_expression      go to state 166
    list_expression            go to state 167
    addition_expression        go to state 168
    multiplication_expression  go to state 169
    simple_value               go to state 170
    constant                   go to state 171


State 336

   72 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE • IDENTIFIER ';'

    IDENTIFIER  shift, and go to state 349


State 337

   71 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 350


State 338

   28 for_statement: RW_FOR '(' • expression_optative ';' or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    IDENTIFIER             shift, and go to state 35
    UNARY_LIST_OP          shift, and go to state 41
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    ';'  reduce using rule 46 (expression_optative)

    expression                 go to state 99
    function_call_expression   go to state 56
    expression_optative        go to state 351
    or_expression              go to state 57
    and_expression             go to state 58
    equality_expression        go to state 59
    relational_expression      go to state 60
    list_expression            go to state 61
    addition_expression        go to state 62
    multiplication_expression  go to state 63
    simple_value               go to state 64
    constant                   go to state 66


State 339

   37 return_statement: RW_RETURN expression • ';'

    ';'  shift, and go to state 352


State 340

   29 if_else_statement: RW_IF '(' • expression ')' statement
   30                  | RW_IF '(' • expression ')' statement RW_ELSE statement

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    IDENTIFIER             shift, and go to state 157
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    expression                 go to state 353
    function_call_expression   go to state 162
    or_expression              go to state 163
    and_expression             go to state 164
    equality_expression        go to state 165
    relational_expression      go to state 166
    list_expression            go to state 167
    addition_expression        go to state 168
    multiplication_expression  go to state 169
    simple_value               go to state 170
    constant                   go to state 171


State 341

   34 input_statement: IO_READ '(' • IDENTIFIER ')' ';'

    IDENTIFIER  shift, and go to state 354


State 342

   35 output_statement: IO_WRITE '(' • expression ')' ';'
   36                 | IO_WRITE '(' • LIT_STRING ')' ';'

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    LIT_STRING             shift, and go to state 355
    IDENTIFIER             shift, and go to state 157
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    expression                 go to state 356
    function_call_expression   go to state 162
    or_expression              go to state 163
    and_expression             go to state 164
    equality_expression        go to state 165
    relational_expression      go to state 166
    list_expression            go to state 167
    addition_expression        go to state 168
    multiplication_expression  go to state 169
    simple_value               go to state 170
    constant                   go to state 171


State 343

    7 block: '{' statements • '}'
    8 statements: statements • statement

    error                  shift, and go to state 136
    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    SIMPLE_TYPE            shift, and go to state 137
    IDENTIFIER             shift, and go to state 35
    RW_FOR                 shift, and go to state 138
    RW_RETURN              shift, and go to state 139
    RW_IF                  shift, and go to state 140
    IO_READ                shift, and go to state 141
    IO_WRITE               shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 41
    '{'                    shift, and go to state 143
    '}'                    shift, and go to state 357
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    block                           go to state 144
    statement                       go to state 107
    for_statement                   go to state 145
    if_else_statement               go to state 146
    expression_statement            go to state 147
    io_statement                    go to state 148
    input_statement                 go to state 149
    output_statement                go to state 150
    return_statement                go to state 151
    expression                      go to state 152
    function_call_expression        go to state 56
    or_expression                   go to state 57
    and_expression                  go to state 58
    equality_expression             go to state 59
    relational_expression           go to state 60
    list_expression                 go to state 61
    addition_expression             go to state 62
    multiplication_expression       go to state 63
    simple_value                    go to state 64
    variable_declaration_statement  go to state 153
    constant                        go to state 66


State 344

   30 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE • statement

    error                  shift, and go to state 136
    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    SIMPLE_TYPE            shift, and go to state 137
    IDENTIFIER             shift, and go to state 35
    RW_FOR                 shift, and go to state 138
    RW_RETURN              shift, and go to state 139
    RW_IF                  shift, and go to state 140
    IO_READ                shift, and go to state 141
    IO_WRITE               shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 41
    '{'                    shift, and go to state 143
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    block                           go to state 144
    statement                       go to state 358
    for_statement                   go to state 145
    if_else_statement               go to state 146
    expression_statement            go to state 147
    io_statement                    go to state 148
    input_statement                 go to state 149
    output_statement                go to state 150
    return_statement                go to state 151
    expression                      go to state 152
    function_call_expression        go to state 56
    or_expression                   go to state 57
    and_expression                  go to state 58
    equality_expression             go to state 59
    relational_expression           go to state 60
    list_expression                 go to state 61
    addition_expression             go to state 62
    multiplication_expression       go to state 63
    simple_value                    go to state 64
    variable_declaration_statement  go to state 153
    constant                        go to state 66


State 345

   31 expression_statement: expression ';' •

    error                  reduce using rule 31 (expression_statement)
    C_INTEGER              reduce using rule 31 (expression_statement)
    C_FLOAT                reduce using rule 31 (expression_statement)
    C_NIL                  reduce using rule 31 (expression_statement)
    SIMPLE_TYPE            reduce using rule 31 (expression_statement)
    IDENTIFIER             reduce using rule 31 (expression_statement)
    RW_FOR                 reduce using rule 31 (expression_statement)
    RW_RETURN              reduce using rule 31 (expression_statement)
    RW_IF                  reduce using rule 31 (expression_statement)
    RW_ELSE                reduce using rule 31 (expression_statement)
    IO_READ                reduce using rule 31 (expression_statement)
    IO_WRITE               reduce using rule 31 (expression_statement)
    UNARY_LIST_OP          reduce using rule 31 (expression_statement)
    '{'                    reduce using rule 31 (expression_statement)
    '}'                    reduce using rule 31 (expression_statement)
    '('                    reduce using rule 31 (expression_statement)
    '!'                    reduce using rule 31 (expression_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 31 (expression_statement)


State 346

   28 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' • expression_optative ')' statement

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    IDENTIFIER             shift, and go to state 157
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    ')'  reduce using rule 46 (expression_optative)

    expression                 go to state 208
    function_call_expression   go to state 162
    expression_optative        go to state 359
    or_expression              go to state 163
    and_expression             go to state 164
    equality_expression        go to state 165
    relational_expression      go to state 166
    list_expression            go to state 167
    addition_expression        go to state 168
    multiplication_expression  go to state 169
    simple_value               go to state 170
    constant                   go to state 171


State 347

   30 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE • statement

    error                  shift, and go to state 190
    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    SIMPLE_TYPE            shift, and go to state 191
    IDENTIFIER             shift, and go to state 35
    RW_FOR                 shift, and go to state 192
    RW_RETURN              shift, and go to state 193
    RW_IF                  shift, and go to state 194
    IO_READ                shift, and go to state 195
    IO_WRITE               shift, and go to state 196
    UNARY_LIST_OP          shift, and go to state 41
    '{'                    shift, and go to state 197
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    block                           go to state 198
    statement                       go to state 360
    for_statement                   go to state 199
    if_else_statement               go to state 200
    expression_statement            go to state 201
    io_statement                    go to state 202
    input_statement                 go to state 203
    output_statement                go to state 204
    return_statement                go to state 205
    expression                      go to state 206
    function_call_expression        go to state 56
    or_expression                   go to state 57
    and_expression                  go to state 58
    equality_expression             go to state 59
    relational_expression           go to state 60
    list_expression                 go to state 61
    addition_expression             go to state 62
    multiplication_expression       go to state 63
    simple_value                    go to state 64
    variable_declaration_statement  go to state 207
    constant                        go to state 66


State 348

   28 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative • ')' statement

    ')'  shift, and go to state 361


State 349

   72 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER • ';'

    ';'  shift, and go to state 362


State 350

   71 variable_declaration_statement: SIMPLE_TYPE IDENTIFIER ';' •

    error                  reduce using rule 71 (variable_declaration_statement)
    C_INTEGER              reduce using rule 71 (variable_declaration_statement)
    C_FLOAT                reduce using rule 71 (variable_declaration_statement)
    C_NIL                  reduce using rule 71 (variable_declaration_statement)
    SIMPLE_TYPE            reduce using rule 71 (variable_declaration_statement)
    IDENTIFIER             reduce using rule 71 (variable_declaration_statement)
    RW_FOR                 reduce using rule 71 (variable_declaration_statement)
    RW_RETURN              reduce using rule 71 (variable_declaration_statement)
    RW_IF                  reduce using rule 71 (variable_declaration_statement)
    RW_ELSE                reduce using rule 71 (variable_declaration_statement)
    IO_READ                reduce using rule 71 (variable_declaration_statement)
    IO_WRITE               reduce using rule 71 (variable_declaration_statement)
    UNARY_LIST_OP          reduce using rule 71 (variable_declaration_statement)
    '{'                    reduce using rule 71 (variable_declaration_statement)
    '}'                    reduce using rule 71 (variable_declaration_statement)
    '('                    reduce using rule 71 (variable_declaration_statement)
    '!'                    reduce using rule 71 (variable_declaration_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 71 (variable_declaration_statement)


State 351

   28 for_statement: RW_FOR '(' expression_optative • ';' or_expression_optative ';' expression_optative ')' statement

    ';'  shift, and go to state 363


State 352

   37 return_statement: RW_RETURN expression ';' •

    error                  reduce using rule 37 (return_statement)
    C_INTEGER              reduce using rule 37 (return_statement)
    C_FLOAT                reduce using rule 37 (return_statement)
    C_NIL                  reduce using rule 37 (return_statement)
    SIMPLE_TYPE            reduce using rule 37 (return_statement)
    IDENTIFIER             reduce using rule 37 (return_statement)
    RW_FOR                 reduce using rule 37 (return_statement)
    RW_RETURN              reduce using rule 37 (return_statement)
    RW_IF                  reduce using rule 37 (return_statement)
    RW_ELSE                reduce using rule 37 (return_statement)
    IO_READ                reduce using rule 37 (return_statement)
    IO_WRITE               reduce using rule 37 (return_statement)
    UNARY_LIST_OP          reduce using rule 37 (return_statement)
    '{'                    reduce using rule 37 (return_statement)
    '}'                    reduce using rule 37 (return_statement)
    '('                    reduce using rule 37 (return_statement)
    '!'                    reduce using rule 37 (return_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 37 (return_statement)


State 353

   29 if_else_statement: RW_IF '(' expression • ')' statement
   30                  | RW_IF '(' expression • ')' statement RW_ELSE statement

    ')'  shift, and go to state 364


State 354

   34 input_statement: IO_READ '(' IDENTIFIER • ')' ';'

    ')'  shift, and go to state 365


State 355

   36 output_statement: IO_WRITE '(' LIT_STRING • ')' ';'

    ')'  shift, and go to state 366


State 356

   35 output_statement: IO_WRITE '(' expression • ')' ';'

    ')'  shift, and go to state 367


State 357

    7 block: '{' statements '}' •

    error                  reduce using rule 7 (block)
    C_INTEGER              reduce using rule 7 (block)
    C_FLOAT                reduce using rule 7 (block)
    C_NIL                  reduce using rule 7 (block)
    SIMPLE_TYPE            reduce using rule 7 (block)
    IDENTIFIER             reduce using rule 7 (block)
    RW_FOR                 reduce using rule 7 (block)
    RW_RETURN              reduce using rule 7 (block)
    RW_IF                  reduce using rule 7 (block)
    RW_ELSE                reduce using rule 7 (block)
    IO_READ                reduce using rule 7 (block)
    IO_WRITE               reduce using rule 7 (block)
    UNARY_LIST_OP          reduce using rule 7 (block)
    '{'                    reduce using rule 7 (block)
    '}'                    reduce using rule 7 (block)
    '('                    reduce using rule 7 (block)
    '!'                    reduce using rule 7 (block)
    ARITMETIC_OP_ADDITIVE  reduce using rule 7 (block)


State 358

   30 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE statement •

    error                  reduce using rule 30 (if_else_statement)
    C_INTEGER              reduce using rule 30 (if_else_statement)
    C_FLOAT                reduce using rule 30 (if_else_statement)
    C_NIL                  reduce using rule 30 (if_else_statement)
    SIMPLE_TYPE            reduce using rule 30 (if_else_statement)
    IDENTIFIER             reduce using rule 30 (if_else_statement)
    RW_FOR                 reduce using rule 30 (if_else_statement)
    RW_RETURN              reduce using rule 30 (if_else_statement)
    RW_IF                  reduce using rule 30 (if_else_statement)
    IO_READ                reduce using rule 30 (if_else_statement)
    IO_WRITE               reduce using rule 30 (if_else_statement)
    UNARY_LIST_OP          reduce using rule 30 (if_else_statement)
    '{'                    reduce using rule 30 (if_else_statement)
    '}'                    reduce using rule 30 (if_else_statement)
    '('                    reduce using rule 30 (if_else_statement)
    '!'                    reduce using rule 30 (if_else_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 30 (if_else_statement)


State 359

   28 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative • ')' statement

    ')'  shift, and go to state 368


State 360

   30 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE statement •

    $end         reduce using rule 30 (if_else_statement)
    SIMPLE_TYPE  reduce using rule 30 (if_else_statement)
    RW_ELSE      reduce using rule 30 (if_else_statement)


State 361

   28 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' • statement

    error                  shift, and go to state 136
    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    SIMPLE_TYPE            shift, and go to state 137
    IDENTIFIER             shift, and go to state 35
    RW_FOR                 shift, and go to state 138
    RW_RETURN              shift, and go to state 139
    RW_IF                  shift, and go to state 140
    IO_READ                shift, and go to state 141
    IO_WRITE               shift, and go to state 142
    UNARY_LIST_OP          shift, and go to state 41
    '{'                    shift, and go to state 143
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    block                           go to state 144
    statement                       go to state 369
    for_statement                   go to state 145
    if_else_statement               go to state 146
    expression_statement            go to state 147
    io_statement                    go to state 148
    input_statement                 go to state 149
    output_statement                go to state 150
    return_statement                go to state 151
    expression                      go to state 152
    function_call_expression        go to state 56
    or_expression                   go to state 57
    and_expression                  go to state 58
    equality_expression             go to state 59
    relational_expression           go to state 60
    list_expression                 go to state 61
    addition_expression             go to state 62
    multiplication_expression       go to state 63
    simple_value                    go to state 64
    variable_declaration_statement  go to state 153
    constant                        go to state 66


State 362

   72 variable_declaration_statement: SIMPLE_TYPE LIST_TYPE IDENTIFIER ';' •

    error                  reduce using rule 72 (variable_declaration_statement)
    C_INTEGER              reduce using rule 72 (variable_declaration_statement)
    C_FLOAT                reduce using rule 72 (variable_declaration_statement)
    C_NIL                  reduce using rule 72 (variable_declaration_statement)
    SIMPLE_TYPE            reduce using rule 72 (variable_declaration_statement)
    IDENTIFIER             reduce using rule 72 (variable_declaration_statement)
    RW_FOR                 reduce using rule 72 (variable_declaration_statement)
    RW_RETURN              reduce using rule 72 (variable_declaration_statement)
    RW_IF                  reduce using rule 72 (variable_declaration_statement)
    RW_ELSE                reduce using rule 72 (variable_declaration_statement)
    IO_READ                reduce using rule 72 (variable_declaration_statement)
    IO_WRITE               reduce using rule 72 (variable_declaration_statement)
    UNARY_LIST_OP          reduce using rule 72 (variable_declaration_statement)
    '{'                    reduce using rule 72 (variable_declaration_statement)
    '}'                    reduce using rule 72 (variable_declaration_statement)
    '('                    reduce using rule 72 (variable_declaration_statement)
    '!'                    reduce using rule 72 (variable_declaration_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 72 (variable_declaration_statement)


State 363

   28 for_statement: RW_FOR '(' expression_optative ';' • or_expression_optative ';' expression_optative ')' statement

    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    IDENTIFIER             shift, and go to state 78
    UNARY_LIST_OP          shift, and go to state 41
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    ';'  reduce using rule 48 (or_expression_optative)

    function_call_expression   go to state 56
    or_expression_optative     go to state 370
    or_expression              go to state 125
    and_expression             go to state 58
    equality_expression        go to state 59
    relational_expression      go to state 60
    list_expression            go to state 61
    addition_expression        go to state 62
    multiplication_expression  go to state 63
    simple_value               go to state 64
    constant                   go to state 66


State 364

   29 if_else_statement: RW_IF '(' expression ')' • statement
   30                  | RW_IF '(' expression ')' • statement RW_ELSE statement

    error                  shift, and go to state 308
    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    SIMPLE_TYPE            shift, and go to state 309
    IDENTIFIER             shift, and go to state 35
    RW_FOR                 shift, and go to state 310
    RW_RETURN              shift, and go to state 311
    RW_IF                  shift, and go to state 312
    IO_READ                shift, and go to state 313
    IO_WRITE               shift, and go to state 314
    UNARY_LIST_OP          shift, and go to state 41
    '{'                    shift, and go to state 315
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    block                           go to state 316
    statement                       go to state 371
    for_statement                   go to state 318
    if_else_statement               go to state 319
    expression_statement            go to state 320
    io_statement                    go to state 321
    input_statement                 go to state 322
    output_statement                go to state 323
    return_statement                go to state 324
    expression                      go to state 325
    function_call_expression        go to state 56
    or_expression                   go to state 57
    and_expression                  go to state 58
    equality_expression             go to state 59
    relational_expression           go to state 60
    list_expression                 go to state 61
    addition_expression             go to state 62
    multiplication_expression       go to state 63
    simple_value                    go to state 64
    variable_declaration_statement  go to state 326
    constant                        go to state 66


State 365

   34 input_statement: IO_READ '(' IDENTIFIER ')' • ';'

    ';'  shift, and go to state 372


State 366

   36 output_statement: IO_WRITE '(' LIT_STRING ')' • ';'

    ';'  shift, and go to state 373


State 367

   35 output_statement: IO_WRITE '(' expression ')' • ';'

    ';'  shift, and go to state 374


State 368

   28 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' • statement

    error                  shift, and go to state 190
    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    SIMPLE_TYPE            shift, and go to state 191
    IDENTIFIER             shift, and go to state 35
    RW_FOR                 shift, and go to state 192
    RW_RETURN              shift, and go to state 193
    RW_IF                  shift, and go to state 194
    IO_READ                shift, and go to state 195
    IO_WRITE               shift, and go to state 196
    UNARY_LIST_OP          shift, and go to state 41
    '{'                    shift, and go to state 197
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    block                           go to state 198
    statement                       go to state 375
    for_statement                   go to state 199
    if_else_statement               go to state 200
    expression_statement            go to state 201
    io_statement                    go to state 202
    input_statement                 go to state 203
    output_statement                go to state 204
    return_statement                go to state 205
    expression                      go to state 206
    function_call_expression        go to state 56
    or_expression                   go to state 57
    and_expression                  go to state 58
    equality_expression             go to state 59
    relational_expression           go to state 60
    list_expression                 go to state 61
    addition_expression             go to state 62
    multiplication_expression       go to state 63
    simple_value                    go to state 64
    variable_declaration_statement  go to state 207
    constant                        go to state 66


State 369

   28 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement •

    error                  reduce using rule 28 (for_statement)
    C_INTEGER              reduce using rule 28 (for_statement)
    C_FLOAT                reduce using rule 28 (for_statement)
    C_NIL                  reduce using rule 28 (for_statement)
    SIMPLE_TYPE            reduce using rule 28 (for_statement)
    IDENTIFIER             reduce using rule 28 (for_statement)
    RW_FOR                 reduce using rule 28 (for_statement)
    RW_RETURN              reduce using rule 28 (for_statement)
    RW_IF                  reduce using rule 28 (for_statement)
    IO_READ                reduce using rule 28 (for_statement)
    IO_WRITE               reduce using rule 28 (for_statement)
    UNARY_LIST_OP          reduce using rule 28 (for_statement)
    '{'                    reduce using rule 28 (for_statement)
    '}'                    reduce using rule 28 (for_statement)
    '('                    reduce using rule 28 (for_statement)
    '!'                    reduce using rule 28 (for_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 28 (for_statement)


State 370

   28 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative • ';' expression_optative ')' statement

    ';'  shift, and go to state 376


State 371

   29 if_else_statement: RW_IF '(' expression ')' statement •
   30                  | RW_IF '(' expression ')' statement • RW_ELSE statement

    RW_ELSE  shift, and go to state 377

    error                  reduce using rule 29 (if_else_statement)
    C_INTEGER              reduce using rule 29 (if_else_statement)
    C_FLOAT                reduce using rule 29 (if_else_statement)
    C_NIL                  reduce using rule 29 (if_else_statement)
    SIMPLE_TYPE            reduce using rule 29 (if_else_statement)
    IDENTIFIER             reduce using rule 29 (if_else_statement)
    RW_FOR                 reduce using rule 29 (if_else_statement)
    RW_RETURN              reduce using rule 29 (if_else_statement)
    RW_IF                  reduce using rule 29 (if_else_statement)
    IO_READ                reduce using rule 29 (if_else_statement)
    IO_WRITE               reduce using rule 29 (if_else_statement)
    UNARY_LIST_OP          reduce using rule 29 (if_else_statement)
    '{'                    reduce using rule 29 (if_else_statement)
    '}'                    reduce using rule 29 (if_else_statement)
    '('                    reduce using rule 29 (if_else_statement)
    '!'                    reduce using rule 29 (if_else_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 29 (if_else_statement)


State 372

   34 input_statement: IO_READ '(' IDENTIFIER ')' ';' •

    error                  reduce using rule 34 (input_statement)
    C_INTEGER              reduce using rule 34 (input_statement)
    C_FLOAT                reduce using rule 34 (input_statement)
    C_NIL                  reduce using rule 34 (input_statement)
    SIMPLE_TYPE            reduce using rule 34 (input_statement)
    IDENTIFIER             reduce using rule 34 (input_statement)
    RW_FOR                 reduce using rule 34 (input_statement)
    RW_RETURN              reduce using rule 34 (input_statement)
    RW_IF                  reduce using rule 34 (input_statement)
    RW_ELSE                reduce using rule 34 (input_statement)
    IO_READ                reduce using rule 34 (input_statement)
    IO_WRITE               reduce using rule 34 (input_statement)
    UNARY_LIST_OP          reduce using rule 34 (input_statement)
    '{'                    reduce using rule 34 (input_statement)
    '}'                    reduce using rule 34 (input_statement)
    '('                    reduce using rule 34 (input_statement)
    '!'                    reduce using rule 34 (input_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 34 (input_statement)


State 373

   36 output_statement: IO_WRITE '(' LIT_STRING ')' ';' •

    error                  reduce using rule 36 (output_statement)
    C_INTEGER              reduce using rule 36 (output_statement)
    C_FLOAT                reduce using rule 36 (output_statement)
    C_NIL                  reduce using rule 36 (output_statement)
    SIMPLE_TYPE            reduce using rule 36 (output_statement)
    IDENTIFIER             reduce using rule 36 (output_statement)
    RW_FOR                 reduce using rule 36 (output_statement)
    RW_RETURN              reduce using rule 36 (output_statement)
    RW_IF                  reduce using rule 36 (output_statement)
    RW_ELSE                reduce using rule 36 (output_statement)
    IO_READ                reduce using rule 36 (output_statement)
    IO_WRITE               reduce using rule 36 (output_statement)
    UNARY_LIST_OP          reduce using rule 36 (output_statement)
    '{'                    reduce using rule 36 (output_statement)
    '}'                    reduce using rule 36 (output_statement)
    '('                    reduce using rule 36 (output_statement)
    '!'                    reduce using rule 36 (output_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 36 (output_statement)


State 374

   35 output_statement: IO_WRITE '(' expression ')' ';' •

    error                  reduce using rule 35 (output_statement)
    C_INTEGER              reduce using rule 35 (output_statement)
    C_FLOAT                reduce using rule 35 (output_statement)
    C_NIL                  reduce using rule 35 (output_statement)
    SIMPLE_TYPE            reduce using rule 35 (output_statement)
    IDENTIFIER             reduce using rule 35 (output_statement)
    RW_FOR                 reduce using rule 35 (output_statement)
    RW_RETURN              reduce using rule 35 (output_statement)
    RW_IF                  reduce using rule 35 (output_statement)
    RW_ELSE                reduce using rule 35 (output_statement)
    IO_READ                reduce using rule 35 (output_statement)
    IO_WRITE               reduce using rule 35 (output_statement)
    UNARY_LIST_OP          reduce using rule 35 (output_statement)
    '{'                    reduce using rule 35 (output_statement)
    '}'                    reduce using rule 35 (output_statement)
    '('                    reduce using rule 35 (output_statement)
    '!'                    reduce using rule 35 (output_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 35 (output_statement)


State 375

   28 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement •

    $end         reduce using rule 28 (for_statement)
    SIMPLE_TYPE  reduce using rule 28 (for_statement)
    RW_ELSE      reduce using rule 28 (for_statement)


State 376

   28 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' • expression_optative ')' statement

    C_INTEGER              shift, and go to state 154
    C_FLOAT                shift, and go to state 155
    C_NIL                  shift, and go to state 156
    IDENTIFIER             shift, and go to state 157
    UNARY_LIST_OP          shift, and go to state 158
    '('                    shift, and go to state 159
    '!'                    shift, and go to state 160
    ARITMETIC_OP_ADDITIVE  shift, and go to state 161

    ')'  reduce using rule 46 (expression_optative)

    expression                 go to state 208
    function_call_expression   go to state 162
    expression_optative        go to state 378
    or_expression              go to state 163
    and_expression             go to state 164
    equality_expression        go to state 165
    relational_expression      go to state 166
    list_expression            go to state 167
    addition_expression        go to state 168
    multiplication_expression  go to state 169
    simple_value               go to state 170
    constant                   go to state 171


State 377

   30 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE • statement

    error                  shift, and go to state 308
    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    SIMPLE_TYPE            shift, and go to state 309
    IDENTIFIER             shift, and go to state 35
    RW_FOR                 shift, and go to state 310
    RW_RETURN              shift, and go to state 311
    RW_IF                  shift, and go to state 312
    IO_READ                shift, and go to state 313
    IO_WRITE               shift, and go to state 314
    UNARY_LIST_OP          shift, and go to state 41
    '{'                    shift, and go to state 315
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    block                           go to state 316
    statement                       go to state 379
    for_statement                   go to state 318
    if_else_statement               go to state 319
    expression_statement            go to state 320
    io_statement                    go to state 321
    input_statement                 go to state 322
    output_statement                go to state 323
    return_statement                go to state 324
    expression                      go to state 325
    function_call_expression        go to state 56
    or_expression                   go to state 57
    and_expression                  go to state 58
    equality_expression             go to state 59
    relational_expression           go to state 60
    list_expression                 go to state 61
    addition_expression             go to state 62
    multiplication_expression       go to state 63
    simple_value                    go to state 64
    variable_declaration_statement  go to state 326
    constant                        go to state 66


State 378

   28 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative • ')' statement

    ')'  shift, and go to state 380


State 379

   30 if_else_statement: RW_IF '(' expression ')' statement RW_ELSE statement •

    error                  reduce using rule 30 (if_else_statement)
    C_INTEGER              reduce using rule 30 (if_else_statement)
    C_FLOAT                reduce using rule 30 (if_else_statement)
    C_NIL                  reduce using rule 30 (if_else_statement)
    SIMPLE_TYPE            reduce using rule 30 (if_else_statement)
    IDENTIFIER             reduce using rule 30 (if_else_statement)
    RW_FOR                 reduce using rule 30 (if_else_statement)
    RW_RETURN              reduce using rule 30 (if_else_statement)
    RW_IF                  reduce using rule 30 (if_else_statement)
    RW_ELSE                reduce using rule 30 (if_else_statement)
    IO_READ                reduce using rule 30 (if_else_statement)
    IO_WRITE               reduce using rule 30 (if_else_statement)
    UNARY_LIST_OP          reduce using rule 30 (if_else_statement)
    '{'                    reduce using rule 30 (if_else_statement)
    '}'                    reduce using rule 30 (if_else_statement)
    '('                    reduce using rule 30 (if_else_statement)
    '!'                    reduce using rule 30 (if_else_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 30 (if_else_statement)


State 380

   28 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' • statement

    error                  shift, and go to state 308
    C_INTEGER              shift, and go to state 31
    C_FLOAT                shift, and go to state 32
    C_NIL                  shift, and go to state 33
    SIMPLE_TYPE            shift, and go to state 309
    IDENTIFIER             shift, and go to state 35
    RW_FOR                 shift, and go to state 310
    RW_RETURN              shift, and go to state 311
    RW_IF                  shift, and go to state 312
    IO_READ                shift, and go to state 313
    IO_WRITE               shift, and go to state 314
    UNARY_LIST_OP          shift, and go to state 41
    '{'                    shift, and go to state 315
    '('                    shift, and go to state 43
    '!'                    shift, and go to state 44
    ARITMETIC_OP_ADDITIVE  shift, and go to state 45

    block                           go to state 316
    statement                       go to state 381
    for_statement                   go to state 318
    if_else_statement               go to state 319
    expression_statement            go to state 320
    io_statement                    go to state 321
    input_statement                 go to state 322
    output_statement                go to state 323
    return_statement                go to state 324
    expression                      go to state 325
    function_call_expression        go to state 56
    or_expression                   go to state 57
    and_expression                  go to state 58
    equality_expression             go to state 59
    relational_expression           go to state 60
    list_expression                 go to state 61
    addition_expression             go to state 62
    multiplication_expression       go to state 63
    simple_value                    go to state 64
    variable_declaration_statement  go to state 326
    constant                        go to state 66


State 381

   28 for_statement: RW_FOR '(' expression_optative ';' or_expression_optative ';' expression_optative ')' statement •

    error                  reduce using rule 28 (for_statement)
    C_INTEGER              reduce using rule 28 (for_statement)
    C_FLOAT                reduce using rule 28 (for_statement)
    C_NIL                  reduce using rule 28 (for_statement)
    SIMPLE_TYPE            reduce using rule 28 (for_statement)
    IDENTIFIER             reduce using rule 28 (for_statement)
    RW_FOR                 reduce using rule 28 (for_statement)
    RW_RETURN              reduce using rule 28 (for_statement)
    RW_IF                  reduce using rule 28 (for_statement)
    RW_ELSE                reduce using rule 28 (for_statement)
    IO_READ                reduce using rule 28 (for_statement)
    IO_WRITE               reduce using rule 28 (for_statement)
    UNARY_LIST_OP          reduce using rule 28 (for_statement)
    '{'                    reduce using rule 28 (for_statement)
    '}'                    reduce using rule 28 (for_statement)
    '('                    reduce using rule 28 (for_statement)
    '!'                    reduce using rule 28 (for_statement)
    ARITMETIC_OP_ADDITIVE  reduce using rule 28 (for_statement)
